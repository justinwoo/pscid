// Generated by purs bundle 0.13.0
var PS = {};
(function(exports) {
  "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Control.Alt"] = $PS["Control.Alt"] || {};
  var exports = $PS["Control.Alt"];                          
  var Alt = function (Functor0, alt) {
      this.Functor0 = Functor0;
      this.alt = alt;
  };                                                       
  var alt = function (dict) {
      return dict.alt;
  };
  exports["Alt"] = Alt;
  exports["alt"] = alt;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayApply = function (fs) {
    return function (xs) {
      var l = fs.length;
      var k = xs.length;
      var result = new Array(l*k);
      var n = 0;
      for (var i = 0; i < l; i++) {
        var f = fs[i];
        for (var j = 0; j < k; j++) {
          result[n++] = f(xs[j]);
        }
      }
      return result;
    };
  };
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Control.Semigroupoid"] = $PS["Control.Semigroupoid"] || {};
  var exports = $PS["Control.Semigroupoid"];
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  exports["compose"] = compose;
  exports["Semigroupoid"] = Semigroupoid;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Control.Category"] = $PS["Control.Category"] || {};
  var exports = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];                
  var Category = function (Semigroupoid0, identity) {
      this.Semigroupoid0 = Semigroupoid0;
      this.identity = identity;
  };
  var identity = function (dict) {
      return dict.identity;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["Category"] = Category;
  exports["identity"] = identity;
  exports["categoryFn"] = categoryFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Data.Function"] = $PS["Data.Function"] || {};
  var exports = $PS["Data.Function"];                    
  var on = function (f) {
      return function (g) {
          return function (x) {
              return function (y) {
                  return f(g(x))(g(y));
              };
          };
      };
  };
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  var applyFlipped = function (x) {
      return function (f) {
          return f(x);
      };
  };
  exports["flip"] = flip;
  exports["const"] = $$const;
  exports["applyFlipped"] = applyFlipped;
  exports["on"] = on;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Data.Unit"] = $PS["Data.Unit"] || {};
  var exports = $PS["Data.Unit"];
  var $foreign = $PS["Data.Unit"];
  exports["unit"] = $foreign.unit;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Data.Functor"] = $PS["Data.Functor"] || {};
  var exports = $PS["Data.Functor"];
  var $foreign = $PS["Data.Functor"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];
  var Data_Function = $PS["Data.Function"];
  var Data_Unit = $PS["Data.Unit"];                
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var mapFlipped = function (dictFunctor) {
      return function (fa) {
          return function (f) {
              return map(dictFunctor)(f)(fa);
          };
      };
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };
  var voidLeft = function (dictFunctor) {
      return function (f) {
          return function (x) {
              return map(dictFunctor)(Data_Function["const"](x))(f);
          };
      };
  };
  var voidRight = function (dictFunctor) {
      return function (x) {
          return map(dictFunctor)(Data_Function["const"](x));
      };
  };
  var functorFn = new Functor(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn));
  var functorArray = new Functor($foreign.arrayMap);
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["mapFlipped"] = mapFlipped;
  exports["void"] = $$void;
  exports["voidRight"] = voidRight;
  exports["voidLeft"] = voidLeft;
  exports["functorFn"] = functorFn;
  exports["functorArray"] = functorArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Control.Apply"] = $PS["Control.Apply"] || {};
  var exports = $PS["Control.Apply"];
  var $foreign = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];                
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  }; 
  var applyArray = new Apply(function () {
      return Data_Functor.functorArray;
  }, $foreign.arrayApply);
  var apply = function (dict) {
      return dict.apply;
  };
  var applyFirst = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"])(a))(b);
          };
      };
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  var lift2 = function (dictApply) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b);
              };
          };
      };
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
  exports["applyFirst"] = applyFirst;
  exports["applySecond"] = applySecond;
  exports["lift2"] = lift2;
  exports["applyArray"] = applyArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Control.Applicative"] = $PS["Control.Applicative"] || {};
  var exports = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Unit = $PS["Data.Unit"];                
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var when = function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (v) {
                  return v1;
              };
              if (!v) {
                  return pure(dictApplicative)(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at Control.Applicative (line 57, column 1 - line 57, column 63): " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  }; 
  var applicativeArray = new Applicative(function () {
      return Control_Apply.applyArray;
  }, function (x) {
      return [ x ];
  });
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
  exports["when"] = when;
  exports["applicativeArray"] = applicativeArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Control.Plus"] = $PS["Control.Plus"] || {};
  var exports = $PS["Control.Plus"];                   
  var Plus = function (Alt0, empty) {
      this.Alt0 = Alt0;
      this.empty = empty;
  };       
  var empty = function (dict) {
      return dict.empty;
  };
  exports["Plus"] = Plus;
  exports["empty"] = empty;
})(PS);
(function(exports) {
  "use strict";

  var refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };

  exports.eqBooleanImpl = refEq;
  exports.eqIntImpl = refEq;   
  exports.eqCharImpl = refEq;
  exports.eqStringImpl = refEq;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Data.Eq"] = $PS["Data.Eq"] || {};
  var exports = $PS["Data.Eq"];
  var $foreign = $PS["Data.Eq"];
  var Eq = function (eq) {
      this.eq = eq;
  }; 
  var eqString = new Eq($foreign.eqStringImpl);
  var eqInt = new Eq($foreign.eqIntImpl);
  var eqChar = new Eq($foreign.eqCharImpl);
  var eqBoolean = new Eq($foreign.eqBooleanImpl);
  var eq = function (dict) {
      return dict.eq;
  };
  var notEq = function (dictEq) {
      return function (x) {
          return function (y) {
              return eq(eqBoolean)(eq(dictEq)(x)(y))(false);
          };
      };
  };
  exports["Eq"] = Eq;
  exports["eq"] = eq;
  exports["notEq"] = notEq;
  exports["eqBoolean"] = eqBoolean;
  exports["eqInt"] = eqInt;
  exports["eqChar"] = eqChar;
  exports["eqString"] = eqString;
})(PS);
(function(exports) {
  "use strict";

  exports.boolConj = function (b1) {
    return function (b2) {
      return b1 && b2;
    };
  };

  exports.boolDisj = function (b1) {
    return function (b2) {
      return b1 || b2;
    };
  };

  exports.boolNot = function (b) {
    return !b;
  };
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Data.HeytingAlgebra"] = $PS["Data.HeytingAlgebra"] || {};
  var exports = $PS["Data.HeytingAlgebra"];
  var $foreign = $PS["Data.HeytingAlgebra"];
  var HeytingAlgebra = function (conj, disj, ff, implies, not, tt) {
      this.conj = conj;
      this.disj = disj;
      this.ff = ff;
      this.implies = implies;
      this.not = not;
      this.tt = tt;
  };
  var tt = function (dict) {
      return dict.tt;
  };
  var not = function (dict) {
      return dict.not;
  };
  var implies = function (dict) {
      return dict.implies;
  };
  var ff = function (dict) {
      return dict.ff;
  };
  var disj = function (dict) {
      return dict.disj;
  };
  var heytingAlgebraBoolean = new HeytingAlgebra($foreign.boolConj, $foreign.boolDisj, false, function (a) {
      return function (b) {
          return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);
      };
  }, $foreign.boolNot, true);
  var conj = function (dict) {
      return dict.conj;
  };
  var heytingAlgebraFunction = function (dictHeytingAlgebra) {
      return new HeytingAlgebra(function (f) {
          return function (g) {
              return function (a) {
                  return conj(dictHeytingAlgebra)(f(a))(g(a));
              };
          };
      }, function (f) {
          return function (g) {
              return function (a) {
                  return disj(dictHeytingAlgebra)(f(a))(g(a));
              };
          };
      }, function (v) {
          return ff(dictHeytingAlgebra);
      }, function (f) {
          return function (g) {
              return function (a) {
                  return implies(dictHeytingAlgebra)(f(a))(g(a));
              };
          };
      }, function (f) {
          return function (a) {
              return not(dictHeytingAlgebra)(f(a));
          };
      }, function (v) {
          return tt(dictHeytingAlgebra);
      });
  };
  exports["HeytingAlgebra"] = HeytingAlgebra;
  exports["tt"] = tt;
  exports["ff"] = ff;
  exports["implies"] = implies;
  exports["conj"] = conj;
  exports["disj"] = disj;
  exports["not"] = not;
  exports["heytingAlgebraBoolean"] = heytingAlgebraBoolean;
  exports["heytingAlgebraFunction"] = heytingAlgebraFunction;
})(PS);
(function(exports) {
  "use strict";

  exports.concatString = function (s1) {
    return function (s2) {
      return s1 + s2;
    };
  };

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Data.Symbol"] = $PS["Data.Symbol"] || {};
  var exports = $PS["Data.Symbol"];      
  var SProxy = (function () {
      function SProxy() {

      };
      SProxy.value = new SProxy();
      return SProxy;
  })();
  var IsSymbol = function (reflectSymbol) {
      this.reflectSymbol = reflectSymbol;
  };
  var reflectSymbol = function (dict) {
      return dict.reflectSymbol;
  };
  exports["IsSymbol"] = IsSymbol;
  exports["reflectSymbol"] = reflectSymbol;
  exports["SProxy"] = SProxy;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafeGet = function (label) {
    return function (rec) {
      return rec[label];
    };
  };

  exports.unsafeSet = function (label) {
    return function (value) {
      return function (rec) {
        var copy = {};
        for (var key in rec) {
          if ({}.hasOwnProperty.call(rec, key)) {
            copy[key] = rec[key];
          }
        }
        copy[label] = value;
        return copy;
      };
    };
  };
})(PS["Record.Unsafe"] = PS["Record.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Record.Unsafe"] = $PS["Record.Unsafe"] || {};
  var exports = $PS["Record.Unsafe"];
  var $foreign = $PS["Record.Unsafe"];
  exports["unsafeGet"] = $foreign.unsafeGet;
  exports["unsafeSet"] = $foreign.unsafeSet;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Type.Data.RowList"] = $PS["Type.Data.RowList"] || {};
  var exports = $PS["Type.Data.RowList"];
  var RLProxy = (function () {
      function RLProxy() {

      };
      RLProxy.value = new RLProxy();
      return RLProxy;
  })();
  exports["RLProxy"] = RLProxy;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Data.Semigroup"] = $PS["Data.Semigroup"] || {};
  var exports = $PS["Data.Semigroup"];
  var $foreign = $PS["Data.Semigroup"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Data_Unit = $PS["Data.Unit"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var Type_Data_RowList = $PS["Type.Data.RowList"];                
  var SemigroupRecord = function (appendRecord) {
      this.appendRecord = appendRecord;
  };
  var Semigroup = function (append) {
      this.append = append;
  }; 
  var semigroupUnit = new Semigroup(function (v) {
      return function (v1) {
          return Data_Unit.unit;
      };
  });
  var semigroupString = new Semigroup($foreign.concatString);
  var semigroupRecordNil = new SemigroupRecord(function (v) {
      return function (v1) {
          return function (v2) {
              return {};
          };
      };
  });
  var semigroupArray = new Semigroup($foreign.concatArray);
  var appendRecord = function (dict) {
      return dict.appendRecord;
  };
  var semigroupRecord = function (dictRowToList) {
      return function (dictSemigroupRecord) {
          return new Semigroup(appendRecord(dictSemigroupRecord)(Type_Data_RowList.RLProxy.value));
      };
  };
  var append = function (dict) {
      return dict.append;
  };
  var semigroupRecordCons = function (dictIsSymbol) {
      return function (dictCons) {
          return function (dictSemigroupRecord) {
              return function (dictSemigroup) {
                  return new SemigroupRecord(function (v) {
                      return function (ra) {
                          return function (rb) {
                              var tail = appendRecord(dictSemigroupRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);
                              var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                              var insert = Record_Unsafe.unsafeSet(key);
                              var get = Record_Unsafe.unsafeGet(key);
                              return insert(append(dictSemigroup)(get(ra))(get(rb)))(tail);
                          };
                      };
                  });
              };
          };
      };
  };
  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
  exports["SemigroupRecord"] = SemigroupRecord;
  exports["appendRecord"] = appendRecord;
  exports["semigroupString"] = semigroupString;
  exports["semigroupUnit"] = semigroupUnit;
  exports["semigroupArray"] = semigroupArray;
  exports["semigroupRecord"] = semigroupRecord;
  exports["semigroupRecordNil"] = semigroupRecordNil;
  exports["semigroupRecordCons"] = semigroupRecordCons;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Data.Monoid"] = $PS["Data.Monoid"] || {};
  var exports = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Data_Unit = $PS["Data.Unit"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var Type_Data_RowList = $PS["Type.Data.RowList"];                
  var MonoidRecord = function (SemigroupRecord0, memptyRecord) {
      this.SemigroupRecord0 = SemigroupRecord0;
      this.memptyRecord = memptyRecord;
  };
  var Monoid = function (Semigroup0, mempty) {
      this.Semigroup0 = Semigroup0;
      this.mempty = mempty;
  };
  var monoidUnit = new Monoid(function () {
      return Data_Semigroup.semigroupUnit;
  }, Data_Unit.unit);
  var monoidString = new Monoid(function () {
      return Data_Semigroup.semigroupString;
  }, "");
  var monoidRecordNil = new MonoidRecord(function () {
      return Data_Semigroup.semigroupRecordNil;
  }, function (v) {
      return {};
  });                        
  var monoidArray = new Monoid(function () {
      return Data_Semigroup.semigroupArray;
  }, [  ]);
  var memptyRecord = function (dict) {
      return dict.memptyRecord;
  };
  var monoidRecord = function (dictRowToList) {
      return function (dictMonoidRecord) {
          return new Monoid(function () {
              return Data_Semigroup.semigroupRecord(dictRowToList)(dictMonoidRecord.SemigroupRecord0());
          }, memptyRecord(dictMonoidRecord)(Type_Data_RowList.RLProxy.value));
      };
  };
  var mempty = function (dict) {
      return dict.mempty;
  };
  var monoidRecordCons = function (dictIsSymbol) {
      return function (dictMonoid) {
          return function (dictCons) {
              return function (dictMonoidRecord) {
                  return new MonoidRecord(function () {
                      return Data_Semigroup.semigroupRecordCons(dictIsSymbol)(dictCons)(dictMonoidRecord.SemigroupRecord0())(dictMonoid.Semigroup0());
                  }, function (v) {
                      var tail = memptyRecord(dictMonoidRecord)(Type_Data_RowList.RLProxy.value);
                      var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                      var insert = Record_Unsafe.unsafeSet(key);
                      return insert(mempty(dictMonoid))(tail);
                  });
              };
          };
      };
  };
  exports["Monoid"] = Monoid;
  exports["mempty"] = mempty;
  exports["MonoidRecord"] = MonoidRecord;
  exports["memptyRecord"] = memptyRecord;
  exports["monoidUnit"] = monoidUnit;
  exports["monoidString"] = monoidString;
  exports["monoidArray"] = monoidArray;
  exports["monoidRecord"] = monoidRecord;
  exports["monoidRecordNil"] = monoidRecordNil;
  exports["monoidRecordCons"] = monoidRecordCons;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Data.Monoid.Disj"] = $PS["Data.Monoid.Disj"] || {};
  var exports = $PS["Data.Monoid.Disj"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];      
  var Disj = function (x) {
      return x;
  };
  var semigroupDisj = function (dictHeytingAlgebra) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v)(v1);
          };
      });
  };
  var monoidDisj = function (dictHeytingAlgebra) {
      return new Data_Monoid.Monoid(function () {
          return semigroupDisj(dictHeytingAlgebra);
      }, Data_HeytingAlgebra.ff(dictHeytingAlgebra));
  };
  exports["Disj"] = Disj;
  exports["semigroupDisj"] = semigroupDisj;
  exports["monoidDisj"] = monoidDisj;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Data.Newtype"] = $PS["Data.Newtype"] || {};
  var exports = $PS["Data.Newtype"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Monoid_Disj = $PS["Data.Monoid.Disj"];                      
  var Newtype = function (unwrap, wrap) {
      this.unwrap = unwrap;
      this.wrap = wrap;
  };
  var wrap = function (dict) {
      return dict.wrap;
  };
  var unwrap = function (dict) {
      return dict.unwrap;
  };
  var un = function (dictNewtype) {
      return function (v) {
          return unwrap(dictNewtype);
      };
  };
  var over = function (dictNewtype) {
      return function (dictNewtype1) {
          return function (v) {
              return function (f) {
                  var $90 = wrap(dictNewtype1);
                  var $91 = unwrap(dictNewtype);
                  return function ($92) {
                      return $90(f($91($92)));
                  };
              };
          };
      };
  };                        
  var newtypeDisj = new Newtype(function (v) {
      return v;
  }, Data_Monoid_Disj.Disj);
  var alaF = function (dictFunctor) {
      return function (dictFunctor1) {
          return function (dictNewtype) {
              return function (dictNewtype1) {
                  return function (v) {
                      return function (f) {
                          var $96 = Data_Functor.map(dictFunctor1)(unwrap(dictNewtype1));
                          var $97 = Data_Functor.map(dictFunctor)(wrap(dictNewtype));
                          return function ($98) {
                              return $96(f($97($98)));
                          };
                      };
                  };
              };
          };
      };
  };
  var ala = function (dictFunctor) {
      return function (dictNewtype) {
          return function (dictNewtype1) {
              return function (v) {
                  return function (f) {
                      return Data_Functor.map(dictFunctor)(unwrap(dictNewtype))(f(wrap(dictNewtype1)));
                  };
              };
          };
      };
  };
  exports["unwrap"] = unwrap;
  exports["wrap"] = wrap;
  exports["Newtype"] = Newtype;
  exports["un"] = un;
  exports["ala"] = ala;
  exports["alaF"] = alaF;
  exports["over"] = over;
  exports["newtypeDisj"] = newtypeDisj;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Data.Foldable"] = $PS["Data.Foldable"] || {};
  var exports = $PS["Data.Foldable"];
  var $foreign = $PS["Data.Foldable"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Monoid_Disj = $PS["Data.Monoid.Disj"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Unit = $PS["Data.Unit"];                
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var oneOf = function (dictFoldable) {
      return function (dictPlus) {
          return foldr(dictFoldable)(Control_Alt.alt(dictPlus.Alt0()))(Control_Plus.empty(dictPlus));
      };
  };
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)((function () {
                  var $197 = Control_Apply.applySecond(dictApplicative.Apply0());
                  return function ($198) {
                      return $197(f($198));
                  };
              })())(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
      };
  };
  var for_ = function (dictApplicative) {
      return function (dictFoldable) {
          return Data_Function.flip(traverse_(dictApplicative)(dictFoldable));
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  };
  var intercalate = function (dictFoldable) {
      return function (dictMonoid) {
          return function (sep) {
              return function (xs) {
                  var go = function (v) {
                      return function (x) {
                          if (v.init) {
                              return {
                                  init: false,
                                  acc: x
                              };
                          };
                          return {
                              init: false,
                              acc: Data_Semigroup.append(dictMonoid.Semigroup0())(v.acc)(Data_Semigroup.append(dictMonoid.Semigroup0())(sep)(x))
                          };
                      };
                  };
                  return (foldl(dictFoldable)(go)({
                      init: true,
                      acc: Data_Monoid.mempty(dictMonoid)
                  })(xs)).acc;
              };
          };
      };
  }; 
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  var fold = function (dictFoldable) {
      return function (dictMonoid) {
          return foldMap(dictFoldable)(dictMonoid)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var any = function (dictFoldable) {
      return function (dictHeytingAlgebra) {
          return Data_Newtype.alaF(Data_Functor.functorFn)(Data_Functor.functorFn)(Data_Newtype.newtypeDisj)(Data_Newtype.newtypeDisj)(Data_Monoid_Disj.Disj)(foldMap(dictFoldable)(Data_Monoid_Disj.monoidDisj(dictHeytingAlgebra)));
      };
  };
  var elem = function (dictFoldable) {
      return function (dictEq) {
          var $204 = any(dictFoldable)(Data_HeytingAlgebra.heytingAlgebraBoolean);
          var $205 = Data_Eq.eq(dictEq);
          return function ($206) {
              return $204($205($206));
          };
      };
  };
  var notElem = function (dictFoldable) {
      return function (dictEq) {
          return function (x) {
              var $207 = Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean);
              var $208 = elem(dictFoldable)(dictEq)(x);
              return function ($209) {
                  return $207($208($209));
              };
          };
      };
  };
  exports["Foldable"] = Foldable;
  exports["foldr"] = foldr;
  exports["foldl"] = foldl;
  exports["foldMap"] = foldMap;
  exports["foldMapDefaultR"] = foldMapDefaultR;
  exports["fold"] = fold;
  exports["traverse_"] = traverse_;
  exports["for_"] = for_;
  exports["oneOf"] = oneOf;
  exports["intercalate"] = intercalate;
  exports["any"] = any;
  exports["elem"] = elem;
  exports["notElem"] = notElem;
  exports["foldableArray"] = foldableArray;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayBind = function (arr) {
    return function (f) {
      var result = [];
      for (var i = 0, l = arr.length; i < l; i++) {
        Array.prototype.push.apply(result, f(arr[i]));
      }
      return result;
    };
  };
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Control.Bind"] = $PS["Control.Bind"] || {};
  var exports = $PS["Control.Bind"];
  var $foreign = $PS["Control.Bind"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Function = $PS["Data.Function"];                
  var Discard = function (discard) {
      this.discard = discard;
  };
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };
  var discard = function (dict) {
      return dict.discard;
  }; 
  var bindArray = new Bind(function () {
      return Control_Apply.applyArray;
  }, $foreign.arrayBind);
  var bind = function (dict) {
      return dict.bind;
  };
  var bindFlipped = function (dictBind) {
      return Data_Function.flip(bind(dictBind));
  };
  var composeKleisliFlipped = function (dictBind) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return bindFlipped(dictBind)(f)(g(a));
              };
          };
      };
  };
  var composeKleisli = function (dictBind) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return bind(dictBind)(f(a))(g);
              };
          };
      };
  };
  var discardUnit = new Discard(function (dictBind) {
      return bind(dictBind);
  });
  var join = function (dictBind) {
      return function (m) {
          return bind(dictBind)(m)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  exports["Bind"] = Bind;
  exports["bind"] = bind;
  exports["bindFlipped"] = bindFlipped;
  exports["Discard"] = Discard;
  exports["discard"] = discard;
  exports["join"] = join;
  exports["composeKleisli"] = composeKleisli;
  exports["composeKleisliFlipped"] = composeKleisliFlipped;
  exports["bindArray"] = bindArray;
  exports["discardUnit"] = discardUnit;
})(PS);
(function(exports) {
  "use strict";

  var unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };                                         
  exports.ordIntImpl = unsafeCompareImpl;   
  exports.ordStringImpl = unsafeCompareImpl;
  exports.ordCharImpl = unsafeCompareImpl;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Data.Ordering"] = $PS["Data.Ordering"] || {};
  var exports = $PS["Data.Ordering"];              
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Data.Ord"] = $PS["Data.Ord"] || {};
  var exports = $PS["Data.Ord"];
  var $foreign = $PS["Data.Ord"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Ord = function (Eq0, compare) {
      this.Eq0 = Eq0;
      this.compare = compare;
  }; 
  var ordString = new Ord(function () {
      return Data_Eq.eqString;
  }, $foreign.ordStringImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var ordInt = new Ord(function () {
      return Data_Eq.eqInt;
  }, $foreign.ordIntImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var ordChar = new Ord(function () {
      return Data_Eq.eqChar;
  }, $foreign.ordCharImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var compare = function (dict) {
      return dict.compare;
  };
  var greaterThan = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var v = compare(dictOrd)(a1)(a2);
              if (v instanceof Data_Ordering.GT) {
                  return true;
              };
              return false;
          };
      };
  };
  var max = function (dictOrd) {
      return function (x) {
          return function (y) {
              var v = compare(dictOrd)(x)(y);
              if (v instanceof Data_Ordering.LT) {
                  return y;
              };
              if (v instanceof Data_Ordering.EQ) {
                  return x;
              };
              if (v instanceof Data_Ordering.GT) {
                  return x;
              };
              throw new Error("Failed pattern match at Data.Ord (line 167, column 3 - line 170, column 12): " + [ v.constructor.name ]);
          };
      };
  };
  var min = function (dictOrd) {
      return function (x) {
          return function (y) {
              var v = compare(dictOrd)(x)(y);
              if (v instanceof Data_Ordering.LT) {
                  return x;
              };
              if (v instanceof Data_Ordering.EQ) {
                  return x;
              };
              if (v instanceof Data_Ordering.GT) {
                  return y;
              };
              throw new Error("Failed pattern match at Data.Ord (line 158, column 3 - line 161, column 12): " + [ v.constructor.name ]);
          };
      };
  };
  exports["Ord"] = Ord;
  exports["compare"] = compare;
  exports["greaterThan"] = greaterThan;
  exports["min"] = min;
  exports["max"] = max;
  exports["ordInt"] = ordInt;
  exports["ordString"] = ordString;
  exports["ordChar"] = ordChar;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Data.Ord.Min"] = $PS["Data.Ord.Min"] || {};
  var exports = $PS["Data.Ord.Min"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];      
  var Min = function (x) {
      return x;
  };
  var semigroupMin = function (dictOrd) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_Ord.min(dictOrd)(v)(v1);
          };
      });
  };
  var newtypeMin = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Min);
  exports["Min"] = Min;
  exports["newtypeMin"] = newtypeMin;
  exports["semigroupMin"] = semigroupMin;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Data.Semigroup.Foldable"] = $PS["Data.Semigroup.Foldable"] || {};
  var exports = $PS["Data.Semigroup.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord_Min = $PS["Data.Ord.Min"];
  var Foldable1 = function (Foldable0, fold1, foldMap1) {
      this.Foldable0 = Foldable0;
      this.fold1 = fold1;
      this.foldMap1 = foldMap1;
  };
  var foldMap1 = function (dict) {
      return dict.foldMap1;
  };
  var minimum = function (dictOrd) {
      return function (dictFoldable1) {
          return Data_Newtype.ala(Data_Functor.functorFn)(Data_Ord_Min.newtypeMin)(Data_Ord_Min.newtypeMin)(Data_Ord_Min.Min)(foldMap1(dictFoldable1)(Data_Ord_Min.semigroupMin(dictOrd)));
      };
  }; 
  var fold1 = function (dict) {
      return dict.fold1;
  };
  exports["Foldable1"] = Foldable1;
  exports["foldMap1"] = foldMap1;
  exports["fold1"] = fold1;
  exports["minimum"] = minimum;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Data.NonEmpty"] = $PS["Data.NonEmpty"] || {};
  var exports = $PS["Data.NonEmpty"];
  var Control_Category = $PS["Control.Category"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = $PS["Data.Semigroup.Foldable"];  
  var NonEmpty = (function () {
      function NonEmpty(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      NonEmpty.create = function (value0) {
          return function (value1) {
              return new NonEmpty(value0, value1);
          };
      };
      return NonEmpty;
  })();
  var singleton = function (dictPlus) {
      return function (a) {
          return new NonEmpty(a, Control_Plus.empty(dictPlus));
      };
  };
  var functorNonEmpty = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (m) {
              return new NonEmpty(f(m.value0), Data_Functor.map(dictFunctor)(f)(m.value1));
          };
      });
  };
  var foldableNonEmpty = function (dictFoldable) {
      return new Data_Foldable.Foldable(function (dictMonoid) {
          return function (f) {
              return function (v) {
                  return Data_Semigroup.append(dictMonoid.Semigroup0())(f(v.value0))(Data_Foldable.foldMap(dictFoldable)(dictMonoid)(f)(v.value1));
              };
          };
      }, function (f) {
          return function (b) {
              return function (v) {
                  return Data_Foldable.foldl(dictFoldable)(f)(f(b)(v.value0))(v.value1);
              };
          };
      }, function (f) {
          return function (b) {
              return function (v) {
                  return f(v.value0)(Data_Foldable.foldr(dictFoldable)(f)(b)(v.value1));
              };
          };
      });
  };
  var foldable1NonEmpty = function (dictFoldable) {
      return new Data_Semigroup_Foldable.Foldable1(function () {
          return foldableNonEmpty(dictFoldable);
      }, function (dictSemigroup) {
          return Data_Semigroup_Foldable.foldMap1(foldable1NonEmpty(dictFoldable))(dictSemigroup)(Control_Category.identity(Control_Category.categoryFn));
      }, function (dictSemigroup) {
          return function (f) {
              return function (v) {
                  return Data_Foldable.foldl(dictFoldable)(function (s) {
                      return function (a1) {
                          return Data_Semigroup.append(dictSemigroup)(s)(f(a1));
                      };
                  })(f(v.value0))(v.value1);
              };
          };
      });
  };
  exports["NonEmpty"] = NonEmpty;
  exports["singleton"] = singleton;
  exports["functorNonEmpty"] = functorNonEmpty;
  exports["foldableNonEmpty"] = foldableNonEmpty;
  exports["foldable1NonEmpty"] = foldable1NonEmpty;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Data.List.Types"] = $PS["Data.List.Types"] || {};
  var exports = $PS["Data.List.Types"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_NonEmpty = $PS["Data.NonEmpty"];
  var Data_Semigroup = $PS["Data.Semigroup"];                    
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var NonEmptyList = function (x) {
      return x;
  };
  var listMap = function (f) {
      var chunkedRevMap = function ($copy_chunksAcc) {
          return function ($copy_v) {
              var $tco_var_chunksAcc = $copy_chunksAcc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(chunksAcc, v) {
                  if (v instanceof Cons && (v.value1 instanceof Cons && v.value1.value1 instanceof Cons)) {
                      $tco_var_chunksAcc = new Cons(v, chunksAcc);
                      $copy_v = v.value1.value1.value1;
                      return;
                  };
                  var unrolledMap = function (v1) {
                      if (v1 instanceof Cons && (v1.value1 instanceof Cons && v1.value1.value1 instanceof Nil)) {
                          return new Cons(f(v1.value0), new Cons(f(v1.value1.value0), Nil.value));
                      };
                      if (v1 instanceof Cons && v1.value1 instanceof Nil) {
                          return new Cons(f(v1.value0), Nil.value);
                      };
                      return Nil.value;
                  };
                  var reverseUnrolledMap = function ($copy_v1) {
                      return function ($copy_acc) {
                          var $tco_var_v1 = $copy_v1;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(v1, acc) {
                              if (v1 instanceof Cons && (v1.value0 instanceof Cons && (v1.value0.value1 instanceof Cons && v1.value0.value1.value1 instanceof Cons))) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_acc = new Cons(f(v1.value0.value0), new Cons(f(v1.value0.value1.value0), new Cons(f(v1.value0.value1.value1.value0), acc)));
                                  return;
                              };
                              $tco_done = true;
                              return acc;
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_v1, $copy_acc);
                          };
                          return $tco_result;
                      };
                  };
                  $tco_done = true;
                  return reverseUnrolledMap(chunksAcc)(unrolledMap(v));
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_chunksAcc, $copy_v);
              };
              return $tco_result;
          };
      };
      return chunkedRevMap(Nil.value);
  };
  var functorList = new Data_Functor.Functor(listMap);
  var functorNonEmptyList = Data_NonEmpty.functorNonEmpty(functorList);
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (acc) {
              var $202 = Data_Semigroup.append(dictMonoid.Semigroup0())(acc);
              return function ($203) {
                  return $202(f($203));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, function (f) {
      var go = function ($copy_b) {
          return function ($copy_v) {
              var $tco_var_b = $copy_b;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(b, v) {
                  if (v instanceof Nil) {
                      $tco_done = true;
                      return b;
                  };
                  if (v instanceof Cons) {
                      $tco_var_b = f(b)(v.value0);
                      $copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List.Types (line 109, column 12 - line 111, column 30): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_b, $copy_v);
              };
              return $tco_result;
          };
      };
      return go;
  }, function (f) {
      return function (b) {
          var rev = Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value);
          var $204 = Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b);
          return function ($205) {
              return $204(rev($205));
          };
      };
  });
  var foldableNonEmptyList = Data_NonEmpty.foldableNonEmpty(foldableList);
  var semigroupList = new Data_Semigroup.Semigroup(function (xs) {
      return function (ys) {
          return Data_Foldable.foldr(foldableList)(Cons.create)(ys)(xs);
      };
  });
  var monoidList = new Data_Monoid.Monoid(function () {
      return semigroupList;
  }, Nil.value);
  var applyList = new Control_Apply.Apply(function () {
      return functorList;
  }, function (v) {
      return function (v1) {
          if (v instanceof Nil) {
              return Nil.value;
          };
          if (v instanceof Cons) {
              return Data_Semigroup.append(semigroupList)(Data_Functor.map(functorList)(v.value0)(v1))(Control_Apply.apply(applyList)(v.value1)(v1));
          };
          throw new Error("Failed pattern match at Data.List.Types (line 155, column 1 - line 157, column 48): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applyNonEmptyList = new Control_Apply.Apply(function () {
      return functorNonEmptyList;
  }, function (v) {
      return function (v1) {
          return new Data_NonEmpty.NonEmpty(v.value0(v1.value0), Data_Semigroup.append(semigroupList)(Control_Apply.apply(applyList)(v.value1)(new Cons(v1.value0, Nil.value)))(Control_Apply.apply(applyList)(new Cons(v.value0, v.value1))(v1.value1)));
      };
  });
  var bindList = new Control_Bind.Bind(function () {
      return applyList;
  }, function (v) {
      return function (v1) {
          if (v instanceof Nil) {
              return Nil.value;
          };
          if (v instanceof Cons) {
              return Data_Semigroup.append(semigroupList)(v1(v.value0))(Control_Bind.bind(bindList)(v.value1)(v1));
          };
          throw new Error("Failed pattern match at Data.List.Types (line 162, column 1 - line 164, column 37): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });                                              
  var altList = new Control_Alt.Alt(function () {
      return functorList;
  }, Data_Semigroup.append(semigroupList));
  var plusList = new Control_Plus.Plus(function () {
      return altList;
  }, Nil.value);
  var applicativeNonEmptyList = new Control_Applicative.Applicative(function () {
      return applyNonEmptyList;
  }, (function () {
      var $233 = Data_NonEmpty.singleton(plusList);
      return function ($234) {
          return NonEmptyList($233($234));
      };
  })());
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["NonEmptyList"] = NonEmptyList;
  exports["semigroupList"] = semigroupList;
  exports["monoidList"] = monoidList;
  exports["functorList"] = functorList;
  exports["foldableList"] = foldableList;
  exports["applyList"] = applyList;
  exports["bindList"] = bindList;
  exports["altList"] = altList;
  exports["plusList"] = plusList;
  exports["functorNonEmptyList"] = functorNonEmptyList;
  exports["applyNonEmptyList"] = applyNonEmptyList;
  exports["applicativeNonEmptyList"] = applicativeNonEmptyList;
  exports["foldableNonEmptyList"] = foldableNonEmptyList;
})(PS);
(function(exports) {
  "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };

  exports.showStringImpl = function (s) {
    var l = s.length;
    return "\"" + s.replace(
      /[\0-\x1F\x7F"\\]/g, // eslint-disable-line no-control-regex
      function (c, i) {
        switch (c) {
          case "\"":
          case "\\":
            return "\\" + c;
          case "\x07": return "\\a";
          case "\b": return "\\b";
          case "\f": return "\\f";
          case "\n": return "\\n";
          case "\r": return "\\r";
          case "\t": return "\\t";
          case "\v": return "\\v";
        }
        var k = i + 1;
        var empty = k < l && s[k] >= "0" && s[k] <= "9" ? "\\&" : "";
        return "\\" + c.charCodeAt(0).toString(10) + empty;
      }
    ) + "\"";
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Data.Show"] = $PS["Data.Show"] || {};
  var exports = $PS["Data.Show"];
  var $foreign = $PS["Data.Show"];
  var Show = function (show) {
      this.show = show;
  };
  var showString = new Show($foreign.showStringImpl);
  var showInt = new Show($foreign.showIntImpl);
  var show = function (dict) {
      return dict.show;
  };
  exports["Show"] = Show;
  exports["show"] = show;
  exports["showInt"] = showInt;
  exports["showString"] = showString;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Ansi.Codes"] = $PS["Ansi.Codes"] || {};
  var exports = $PS["Ansi.Codes"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Show = $PS["Data.Show"];                
  var Bold = (function () {
      function Bold() {

      };
      Bold.value = new Bold();
      return Bold;
  })();
  var Dim = (function () {
      function Dim() {

      };
      Dim.value = new Dim();
      return Dim;
  })();
  var Italic = (function () {
      function Italic() {

      };
      Italic.value = new Italic();
      return Italic;
  })();
  var Underline = (function () {
      function Underline() {

      };
      Underline.value = new Underline();
      return Underline;
  })();
  var Inverse = (function () {
      function Inverse() {

      };
      Inverse.value = new Inverse();
      return Inverse;
  })();
  var Strikethrough = (function () {
      function Strikethrough() {

      };
      Strikethrough.value = new Strikethrough();
      return Strikethrough;
  })();
  var ToEnd = (function () {
      function ToEnd() {

      };
      ToEnd.value = new ToEnd();
      return ToEnd;
  })();
  var FromBeginning = (function () {
      function FromBeginning() {

      };
      FromBeginning.value = new FromBeginning();
      return FromBeginning;
  })();
  var Entire = (function () {
      function Entire() {

      };
      Entire.value = new Entire();
      return Entire;
  })();
  var Black = (function () {
      function Black() {

      };
      Black.value = new Black();
      return Black;
  })();
  var Red = (function () {
      function Red() {

      };
      Red.value = new Red();
      return Red;
  })();
  var Green = (function () {
      function Green() {

      };
      Green.value = new Green();
      return Green;
  })();
  var Yellow = (function () {
      function Yellow() {

      };
      Yellow.value = new Yellow();
      return Yellow;
  })();
  var Blue = (function () {
      function Blue() {

      };
      Blue.value = new Blue();
      return Blue;
  })();
  var Magenta = (function () {
      function Magenta() {

      };
      Magenta.value = new Magenta();
      return Magenta;
  })();
  var Cyan = (function () {
      function Cyan() {

      };
      Cyan.value = new Cyan();
      return Cyan;
  })();
  var White = (function () {
      function White() {

      };
      White.value = new White();
      return White;
  })();
  var BrightBlack = (function () {
      function BrightBlack() {

      };
      BrightBlack.value = new BrightBlack();
      return BrightBlack;
  })();
  var BrightRed = (function () {
      function BrightRed() {

      };
      BrightRed.value = new BrightRed();
      return BrightRed;
  })();
  var BrightGreen = (function () {
      function BrightGreen() {

      };
      BrightGreen.value = new BrightGreen();
      return BrightGreen;
  })();
  var BrightYellow = (function () {
      function BrightYellow() {

      };
      BrightYellow.value = new BrightYellow();
      return BrightYellow;
  })();
  var BrightBlue = (function () {
      function BrightBlue() {

      };
      BrightBlue.value = new BrightBlue();
      return BrightBlue;
  })();
  var BrightMagenta = (function () {
      function BrightMagenta() {

      };
      BrightMagenta.value = new BrightMagenta();
      return BrightMagenta;
  })();
  var BrightCyan = (function () {
      function BrightCyan() {

      };
      BrightCyan.value = new BrightCyan();
      return BrightCyan;
  })();
  var BrightWhite = (function () {
      function BrightWhite() {

      };
      BrightWhite.value = new BrightWhite();
      return BrightWhite;
  })();
  var Reset = (function () {
      function Reset() {

      };
      Reset.value = new Reset();
      return Reset;
  })();
  var PMode = (function () {
      function PMode(value0) {
          this.value0 = value0;
      };
      PMode.create = function (value0) {
          return new PMode(value0);
      };
      return PMode;
  })();
  var PForeground = (function () {
      function PForeground(value0) {
          this.value0 = value0;
      };
      PForeground.create = function (value0) {
          return new PForeground(value0);
      };
      return PForeground;
  })();
  var PBackground = (function () {
      function PBackground(value0) {
          this.value0 = value0;
      };
      PBackground.create = function (value0) {
          return new PBackground(value0);
      };
      return PBackground;
  })();
  var Up = (function () {
      function Up(value0) {
          this.value0 = value0;
      };
      Up.create = function (value0) {
          return new Up(value0);
      };
      return Up;
  })();
  var Down = (function () {
      function Down(value0) {
          this.value0 = value0;
      };
      Down.create = function (value0) {
          return new Down(value0);
      };
      return Down;
  })();
  var Forward = (function () {
      function Forward(value0) {
          this.value0 = value0;
      };
      Forward.create = function (value0) {
          return new Forward(value0);
      };
      return Forward;
  })();
  var Back = (function () {
      function Back(value0) {
          this.value0 = value0;
      };
      Back.create = function (value0) {
          return new Back(value0);
      };
      return Back;
  })();
  var NextLine = (function () {
      function NextLine(value0) {
          this.value0 = value0;
      };
      NextLine.create = function (value0) {
          return new NextLine(value0);
      };
      return NextLine;
  })();
  var PreviousLine = (function () {
      function PreviousLine(value0) {
          this.value0 = value0;
      };
      PreviousLine.create = function (value0) {
          return new PreviousLine(value0);
      };
      return PreviousLine;
  })();
  var HorizontalAbsolute = (function () {
      function HorizontalAbsolute(value0) {
          this.value0 = value0;
      };
      HorizontalAbsolute.create = function (value0) {
          return new HorizontalAbsolute(value0);
      };
      return HorizontalAbsolute;
  })();
  var Position = (function () {
      function Position(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Position.create = function (value0) {
          return function (value1) {
              return new Position(value0, value1);
          };
      };
      return Position;
  })();
  var EraseData = (function () {
      function EraseData(value0) {
          this.value0 = value0;
      };
      EraseData.create = function (value0) {
          return new EraseData(value0);
      };
      return EraseData;
  })();
  var EraseLine = (function () {
      function EraseLine(value0) {
          this.value0 = value0;
      };
      EraseLine.create = function (value0) {
          return new EraseLine(value0);
      };
      return EraseLine;
  })();
  var ScrollUp = (function () {
      function ScrollUp(value0) {
          this.value0 = value0;
      };
      ScrollUp.create = function (value0) {
          return new ScrollUp(value0);
      };
      return ScrollUp;
  })();
  var ScrollDown = (function () {
      function ScrollDown(value0) {
          this.value0 = value0;
      };
      ScrollDown.create = function (value0) {
          return new ScrollDown(value0);
      };
      return ScrollDown;
  })();
  var Graphics = (function () {
      function Graphics(value0) {
          this.value0 = value0;
      };
      Graphics.create = function (value0) {
          return new Graphics(value0);
      };
      return Graphics;
  })();
  var SavePosition = (function () {
      function SavePosition() {

      };
      SavePosition.value = new SavePosition();
      return SavePosition;
  })();
  var RestorePosition = (function () {
      function RestorePosition() {

      };
      RestorePosition.value = new RestorePosition();
      return RestorePosition;
  })();
  var QueryPosition = (function () {
      function QueryPosition() {

      };
      QueryPosition.value = new QueryPosition();
      return QueryPosition;
  })();
  var HideCursor = (function () {
      function HideCursor() {

      };
      HideCursor.value = new HideCursor();
      return HideCursor;
  })();
  var ShowCursor = (function () {
      function ShowCursor() {

      };
      ShowCursor.value = new ShowCursor();
      return ShowCursor;
  })();
  var prefix = "\x1b[";
  var eraseParamToString = function (ep) {
      if (ep instanceof ToEnd) {
          return "0";
      };
      if (ep instanceof FromBeginning) {
          return "1";
      };
      if (ep instanceof Entire) {
          return "2";
      };
      throw new Error("Failed pattern match at Ansi.Codes (line 86, column 3 - line 89, column 25): " + [ ep.constructor.name ]);
  }; 
  var colorSuffix = "m";
  var colorCode = function (c) {
      if (c instanceof Black) {
          return 30;
      };
      if (c instanceof Red) {
          return 31;
      };
      if (c instanceof Green) {
          return 32;
      };
      if (c instanceof Yellow) {
          return 33;
      };
      if (c instanceof Blue) {
          return 34;
      };
      if (c instanceof Magenta) {
          return 35;
      };
      if (c instanceof Cyan) {
          return 36;
      };
      if (c instanceof White) {
          return 37;
      };
      if (c instanceof BrightBlack) {
          return 90;
      };
      if (c instanceof BrightRed) {
          return 91;
      };
      if (c instanceof BrightGreen) {
          return 92;
      };
      if (c instanceof BrightYellow) {
          return 93;
      };
      if (c instanceof BrightBlue) {
          return 94;
      };
      if (c instanceof BrightMagenta) {
          return 95;
      };
      if (c instanceof BrightCyan) {
          return 96;
      };
      if (c instanceof BrightWhite) {
          return 97;
      };
      throw new Error("Failed pattern match at Ansi.Codes (line 155, column 3 - line 171, column 22): " + [ c.constructor.name ]);
  };
  var codeForRenderingMode = function (m) {
      if (m instanceof Bold) {
          return 1;
      };
      if (m instanceof Dim) {
          return 2;
      };
      if (m instanceof Italic) {
          return 3;
      };
      if (m instanceof Underline) {
          return 4;
      };
      if (m instanceof Inverse) {
          return 7;
      };
      if (m instanceof Strikethrough) {
          return 9;
      };
      throw new Error("Failed pattern match at Ansi.Codes (line 123, column 3 - line 129, column 23): " + [ m.constructor.name ]);
  };
  var graphicsParamToString = function (gp) {
      if (gp instanceof Reset) {
          return "0";
      };
      if (gp instanceof PMode) {
          return Data_Show.show(Data_Show.showInt)(codeForRenderingMode(gp.value0));
      };
      if (gp instanceof PForeground) {
          return Data_Show.show(Data_Show.showInt)(colorCode(gp.value0));
      };
      if (gp instanceof PBackground) {
          return Data_Show.show(Data_Show.showInt)(colorCode(gp.value0) + 10 | 0);
      };
      throw new Error("Failed pattern match at Ansi.Codes (line 104, column 3 - line 108, column 45): " + [ gp.constructor.name ]);
  };
  var escapeCodeToString = (function () {
      var go = function (c) {
          if (c instanceof Up) {
              return Data_Show.show(Data_Show.showInt)(c.value0) + "A";
          };
          if (c instanceof Down) {
              return Data_Show.show(Data_Show.showInt)(c.value0) + "B";
          };
          if (c instanceof Forward) {
              return Data_Show.show(Data_Show.showInt)(c.value0) + "C";
          };
          if (c instanceof Back) {
              return Data_Show.show(Data_Show.showInt)(c.value0) + "D";
          };
          if (c instanceof NextLine) {
              return Data_Show.show(Data_Show.showInt)(c.value0) + "E";
          };
          if (c instanceof PreviousLine) {
              return Data_Show.show(Data_Show.showInt)(c.value0) + "F";
          };
          if (c instanceof HorizontalAbsolute) {
              return Data_Show.show(Data_Show.showInt)(c.value0) + "G";
          };
          if (c instanceof Position) {
              return Data_Show.show(Data_Show.showInt)(c.value0) + (";" + (Data_Show.show(Data_Show.showInt)(c.value1) + "H"));
          };
          if (c instanceof EraseData) {
              return eraseParamToString(c.value0) + "J";
          };
          if (c instanceof EraseLine) {
              return eraseParamToString(c.value0) + "K";
          };
          if (c instanceof ScrollUp) {
              return Data_Show.show(Data_Show.showInt)(c.value0) + "S";
          };
          if (c instanceof ScrollDown) {
              return Data_Show.show(Data_Show.showInt)(c.value0) + "T";
          };
          if (c instanceof Graphics) {
              return Data_Foldable.intercalate(Data_List_Types.foldableNonEmptyList)(Data_Monoid.monoidString)(";")(Data_Functor.map(Data_List_Types.functorNonEmptyList)(graphicsParamToString)(c.value0)) + colorSuffix;
          };
          if (c instanceof SavePosition) {
              return "s";
          };
          if (c instanceof RestorePosition) {
              return "u";
          };
          if (c instanceof QueryPosition) {
              return "6n";
          };
          if (c instanceof HideCursor) {
              return "?25l";
          };
          if (c instanceof ShowCursor) {
              return "?25h";
          };
          throw new Error("Failed pattern match at Ansi.Codes (line 47, column 5 - line 65, column 37): " + [ c.constructor.name ]);
      };
      return function ($234) {
          return (function (v) {
              return prefix + v;
          })(go($234));
      };
  })();
  exports["prefix"] = prefix;
  exports["colorSuffix"] = colorSuffix;
  exports["Up"] = Up;
  exports["Down"] = Down;
  exports["Forward"] = Forward;
  exports["Back"] = Back;
  exports["NextLine"] = NextLine;
  exports["PreviousLine"] = PreviousLine;
  exports["HorizontalAbsolute"] = HorizontalAbsolute;
  exports["Position"] = Position;
  exports["EraseData"] = EraseData;
  exports["EraseLine"] = EraseLine;
  exports["ScrollUp"] = ScrollUp;
  exports["ScrollDown"] = ScrollDown;
  exports["Graphics"] = Graphics;
  exports["SavePosition"] = SavePosition;
  exports["RestorePosition"] = RestorePosition;
  exports["QueryPosition"] = QueryPosition;
  exports["HideCursor"] = HideCursor;
  exports["ShowCursor"] = ShowCursor;
  exports["escapeCodeToString"] = escapeCodeToString;
  exports["ToEnd"] = ToEnd;
  exports["FromBeginning"] = FromBeginning;
  exports["Entire"] = Entire;
  exports["eraseParamToString"] = eraseParamToString;
  exports["Reset"] = Reset;
  exports["PMode"] = PMode;
  exports["PForeground"] = PForeground;
  exports["PBackground"] = PBackground;
  exports["graphicsParamToString"] = graphicsParamToString;
  exports["Bold"] = Bold;
  exports["Dim"] = Dim;
  exports["Italic"] = Italic;
  exports["Underline"] = Underline;
  exports["Inverse"] = Inverse;
  exports["Strikethrough"] = Strikethrough;
  exports["codeForRenderingMode"] = codeForRenderingMode;
  exports["Black"] = Black;
  exports["Red"] = Red;
  exports["Green"] = Green;
  exports["Yellow"] = Yellow;
  exports["Blue"] = Blue;
  exports["Magenta"] = Magenta;
  exports["Cyan"] = Cyan;
  exports["White"] = White;
  exports["BrightBlack"] = BrightBlack;
  exports["BrightRed"] = BrightRed;
  exports["BrightGreen"] = BrightGreen;
  exports["BrightYellow"] = BrightYellow;
  exports["BrightBlue"] = BrightBlue;
  exports["BrightMagenta"] = BrightMagenta;
  exports["BrightCyan"] = BrightCyan;
  exports["BrightWhite"] = BrightWhite;
  exports["colorCode"] = colorCode;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Ansi.Output"] = $PS["Ansi.Output"] || {};
  var exports = $PS["Ansi.Output"];
  var Ansi_Codes = $PS["Ansi.Codes"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_List_Types = $PS["Data.List.Types"];                
  var withGraphics = function (params) {
      return function (text) {
          return Ansi_Codes.escapeCodeToString(new Ansi_Codes.Graphics(params)) + (text + Ansi_Codes.escapeCodeToString(new Ansi_Codes.Graphics(Control_Applicative.pure(Data_List_Types.applicativeNonEmptyList)(Ansi_Codes.Reset.value))));
      };
  };                                                                                                                              
  var foreground = function (c) {
      return Control_Applicative.pure(Data_List_Types.applicativeNonEmptyList)(new Ansi_Codes.PForeground(c));
  };
  var dim = Control_Applicative.pure(Data_List_Types.applicativeNonEmptyList)(new Ansi_Codes.PMode(Ansi_Codes.Dim.value));
  exports["withGraphics"] = withGraphics;
  exports["dim"] = dim;
  exports["foreground"] = foreground;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Control.Alternative"] = $PS["Control.Alternative"] || {};
  var exports = $PS["Control.Alternative"];              
  var Alternative = function (Applicative0, Plus1) {
      this.Applicative0 = Applicative0;
      this.Plus1 = Plus1;
  };
  exports["Alternative"] = Alternative;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Control.Monad"] = $PS["Control.Monad"] || {};
  var exports = $PS["Control.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];                
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  }; 
  var liftM1 = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(a)(function (v) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(f(v));
              });
          };
      };
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (v) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (v1) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["liftM1"] = liftM1;
  exports["ap"] = ap;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Data.Bifunctor"] = $PS["Data.Bifunctor"] || {};
  var exports = $PS["Data.Bifunctor"];
  var Control_Category = $PS["Control.Category"];                
  var Bifunctor = function (bimap) {
      this.bimap = bimap;
  };
  var bimap = function (dict) {
      return dict.bimap;
  };
  var lmap = function (dictBifunctor) {
      return function (f) {
          return bimap(dictBifunctor)(f)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  exports["bimap"] = bimap;
  exports["Bifunctor"] = Bifunctor;
  exports["lmap"] = lmap;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Data.Either"] = $PS["Data.Either"] || {};
  var exports = $PS["Data.Either"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];          
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  var functorEither = new Data_Functor.Functor(function (f) {
      return function (m) {
          if (m instanceof Left) {
              return new Left(m.value0);
          };
          if (m instanceof Right) {
              return new Right(f(m.value0));
          };
          throw new Error("Failed pattern match at Data.Either (line 38, column 1 - line 38, column 52): " + [ m.constructor.name ]);
      };
  });
  var either = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return v(v2.value0);
              };
              if (v2 instanceof Right) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Either (line 238, column 1 - line 238, column 64): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };                                                                               
  var isRight = either(Data_Function["const"](false))(Data_Function["const"](true));
  var bifunctorEither = new Data_Bifunctor.Bifunctor(function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return new Left(v(v2.value0));
              };
              if (v2 instanceof Right) {
                  return new Right(v1(v2.value0));
              };
              throw new Error("Failed pattern match at Data.Either (line 46, column 1 - line 48, column 36): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  });
  var applyEither = new Control_Apply.Apply(function () {
      return functorEither;
  }, function (v) {
      return function (v1) {
          if (v instanceof Left) {
              return new Left(v.value0);
          };
          if (v instanceof Right) {
              return Data_Functor.map(functorEither)(v.value0)(v1);
          };
          throw new Error("Failed pattern match at Data.Either (line 82, column 1 - line 84, column 30): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindEither = new Control_Bind.Bind(function () {
      return applyEither;
  }, either(function (e) {
      return function (v) {
          return new Left(e);
      };
  })(function (a) {
      return function (f) {
          return f(a);
      };
  }));
  var applicativeEither = new Control_Applicative.Applicative(function () {
      return applyEither;
  }, Right.create);
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["either"] = either;
  exports["isRight"] = isRight;
  exports["functorEither"] = functorEither;
  exports["bifunctorEither"] = bifunctorEither;
  exports["applyEither"] = applyEither;
  exports["applicativeEither"] = applicativeEither;
  exports["bindEither"] = bindEither;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Control.Monad.Error.Class"] = $PS["Control.Monad.Error.Class"] || {};
  var exports = $PS["Control.Monad.Error.Class"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];                        
  var MonadThrow = function (Monad0, throwError) {
      this.Monad0 = Monad0;
      this.throwError = throwError;
  };
  var MonadError = function (MonadThrow0, catchError) {
      this.MonadThrow0 = MonadThrow0;
      this.catchError = catchError;
  };
  var throwError = function (dict) {
      return dict.throwError;
  };                                                      
  var catchError = function (dict) {
      return dict.catchError;
  };
  var $$try = function (dictMonadError) {
      return function (a) {
          return catchError(dictMonadError)(Data_Functor.map(((((dictMonadError.MonadThrow0()).Monad0()).Bind1()).Apply0()).Functor0())(Data_Either.Right.create)(a))((function () {
              var $21 = Control_Applicative.pure(((dictMonadError.MonadThrow0()).Monad0()).Applicative0());
              return function ($22) {
                  return $21(Data_Either.Left.create($22));
              };
          })());
      };
  };
  exports["catchError"] = catchError;
  exports["throwError"] = throwError;
  exports["MonadThrow"] = MonadThrow;
  exports["MonadError"] = MonadError;
  exports["try"] = $$try;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Control.Monad.Trans.Class"] = $PS["Control.Monad.Trans.Class"] || {};
  var exports = $PS["Control.Monad.Trans.Class"];
  var MonadTrans = function (lift) {
      this.lift = lift;
  };
  var lift = function (dict) {
      return dict.lift;
  };
  exports["lift"] = lift;
  exports["MonadTrans"] = MonadTrans;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Control.Monad.Except.Trans"] = $PS["Control.Monad.Except.Trans"] || {};
  var exports = $PS["Control.Monad.Except.Trans"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];            
  var ExceptT = function (x) {
      return x;
  };
  var withExceptT = function (dictFunctor) {
      return function (f) {
          return function (v) {
              var mapLeft = function (v1) {
                  return function (v2) {
                      if (v2 instanceof Data_Either.Right) {
                          return new Data_Either.Right(v2.value0);
                      };
                      if (v2 instanceof Data_Either.Left) {
                          return new Data_Either.Left(v1(v2.value0));
                      };
                      throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 42, column 3 - line 42, column 32): " + [ v1.constructor.name, v2.constructor.name ]);
                  };
              };
              return ExceptT(Data_Functor.map(dictFunctor)(mapLeft(f))(v));
          };
      };
  };
  var runExceptT = function (v) {
      return v;
  };          
  var monadTransExceptT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
      return function (m) {
          return Control_Bind.bind(dictMonad.Bind1())(m)(function (v) {
              return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(v));
          });
      };
  });
  var mapExceptT = function (f) {
      return function (v) {
          return f(v);
      };
  };
  var functorExceptT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return mapExceptT(Data_Functor.map(dictFunctor)(Data_Functor.map(Data_Either.functorEither)(f)));
      });
  };
  var monadExceptT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeExceptT(dictMonad);
      }, function () {
          return bindExceptT(dictMonad);
      });
  };
  var bindExceptT = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return applyExceptT(dictMonad);
      }, function (v) {
          return function (k) {
              return Control_Bind.bind(dictMonad.Bind1())(v)(Data_Either.either((function () {
                  var $98 = Control_Applicative.pure(dictMonad.Applicative0());
                  return function ($99) {
                      return $98(Data_Either.Left.create($99));
                  };
              })())(function (a) {
                  var v1 = k(a);
                  return v1;
              }));
          };
      });
  };
  var applyExceptT = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return functorExceptT(((dictMonad.Bind1()).Apply0()).Functor0());
      }, Control_Monad.ap(monadExceptT(dictMonad)));
  };
  var applicativeExceptT = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return applyExceptT(dictMonad);
      }, (function () {
          var $100 = Control_Applicative.pure(dictMonad.Applicative0());
          return function ($101) {
              return ExceptT($100(Data_Either.Right.create($101)));
          };
      })());
  };
  var monadThrowExceptT = function (dictMonad) {
      return new Control_Monad_Error_Class.MonadThrow(function () {
          return monadExceptT(dictMonad);
      }, (function () {
          var $110 = Control_Applicative.pure(dictMonad.Applicative0());
          return function ($111) {
              return ExceptT($110(Data_Either.Left.create($111)));
          };
      })());
  };
  var altExceptT = function (dictSemigroup) {
      return function (dictMonad) {
          return new Control_Alt.Alt(function () {
              return functorExceptT(((dictMonad.Bind1()).Apply0()).Functor0());
          }, function (v) {
              return function (v1) {
                  return Control_Bind.bind(dictMonad.Bind1())(v)(function (v2) {
                      if (v2 instanceof Data_Either.Right) {
                          return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(v2.value0));
                      };
                      if (v2 instanceof Data_Either.Left) {
                          return Control_Bind.bind(dictMonad.Bind1())(v1)(function (v3) {
                              if (v3 instanceof Data_Either.Right) {
                                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(v3.value0));
                              };
                              if (v3 instanceof Data_Either.Left) {
                                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Left(Data_Semigroup.append(dictSemigroup)(v2.value0)(v3.value0)));
                              };
                              throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 86, column 9 - line 88, column 49): " + [ v3.constructor.name ]);
                          });
                      };
                      throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 82, column 5 - line 88, column 49): " + [ v2.constructor.name ]);
                  });
              };
          });
      };
  };
  var plusExceptT = function (dictMonoid) {
      return function (dictMonad) {
          return new Control_Plus.Plus(function () {
              return altExceptT(dictMonoid.Semigroup0())(dictMonad);
          }, Control_Monad_Error_Class.throwError(monadThrowExceptT(dictMonad))(Data_Monoid.mempty(dictMonoid)));
      };
  };
  exports["ExceptT"] = ExceptT;
  exports["runExceptT"] = runExceptT;
  exports["withExceptT"] = withExceptT;
  exports["mapExceptT"] = mapExceptT;
  exports["functorExceptT"] = functorExceptT;
  exports["applyExceptT"] = applyExceptT;
  exports["applicativeExceptT"] = applicativeExceptT;
  exports["bindExceptT"] = bindExceptT;
  exports["monadExceptT"] = monadExceptT;
  exports["altExceptT"] = altExceptT;
  exports["plusExceptT"] = plusExceptT;
  exports["monadTransExceptT"] = monadTransExceptT;
  exports["monadThrowExceptT"] = monadThrowExceptT;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Data.Identity"] = $PS["Data.Identity"] || {};
  var exports = $PS["Data.Identity"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Newtype = $PS["Data.Newtype"];          
  var Identity = function (x) {
      return x;
  };
  var newtypeIdentity = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Identity);
  var functorIdentity = new Data_Functor.Functor(function (f) {
      return function (m) {
          return f(m);
      };
  });
  var applyIdentity = new Control_Apply.Apply(function () {
      return functorIdentity;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindIdentity = new Control_Bind.Bind(function () {
      return applyIdentity;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeIdentity = new Control_Applicative.Applicative(function () {
      return applyIdentity;
  }, Identity);
  var monadIdentity = new Control_Monad.Monad(function () {
      return applicativeIdentity;
  }, function () {
      return bindIdentity;
  });
  exports["Identity"] = Identity;
  exports["newtypeIdentity"] = newtypeIdentity;
  exports["functorIdentity"] = functorIdentity;
  exports["applyIdentity"] = applyIdentity;
  exports["applicativeIdentity"] = applicativeIdentity;
  exports["bindIdentity"] = bindIdentity;
  exports["monadIdentity"] = monadIdentity;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Control.Monad.Except"] = $PS["Control.Monad.Except"] || {};
  var exports = $PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Newtype = $PS["Data.Newtype"];                
  var withExcept = Control_Monad_Except_Trans.withExceptT(Data_Identity.functorIdentity);
  var runExcept = (function () {
      var $0 = Data_Newtype.unwrap(Data_Identity.newtypeIdentity);
      return function ($1) {
          return $0(Control_Monad_Except_Trans.runExceptT($1));
      };
  })();
  exports["runExcept"] = runExcept;
  exports["withExcept"] = withExcept;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Control.Monad.Rec.Class"] = $PS["Control.Monad.Rec.Class"] || {};
  var exports = $PS["Control.Monad.Rec.Class"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];        
  var Loop = (function () {
      function Loop(value0) {
          this.value0 = value0;
      };
      Loop.create = function (value0) {
          return new Loop(value0);
      };
      return Loop;
  })();
  var Done = (function () {
      function Done(value0) {
          this.value0 = value0;
      };
      Done.create = function (value0) {
          return new Done(value0);
      };
      return Done;
  })();
  var MonadRec = function (Monad0, tailRecM) {
      this.Monad0 = Monad0;
      this.tailRecM = tailRecM;
  };
  var tailRecM = function (dict) {
      return dict.tailRecM;
  };
  var bifunctorStep = new Data_Bifunctor.Bifunctor(function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Loop) {
                  return new Loop(v(v2.value0));
              };
              if (v2 instanceof Done) {
                  return new Done(v1(v2.value0));
              };
              throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 27, column 1 - line 29, column 34): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  });
  exports["Loop"] = Loop;
  exports["Done"] = Done;
  exports["MonadRec"] = MonadRec;
  exports["tailRecM"] = tailRecM;
  exports["bifunctorStep"] = bifunctorStep;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Control.MonadZero"] = $PS["Control.MonadZero"] || {};
  var exports = $PS["Control.MonadZero"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Unit = $PS["Data.Unit"];                
  var MonadZero = function (Alternative1, Monad0) {
      this.Alternative1 = Alternative1;
      this.Monad0 = Monad0;
  }; 
  var guard = function (dictMonadZero) {
      return function (v) {
          if (v) {
              return Control_Applicative.pure((dictMonadZero.Alternative1()).Applicative0())(Data_Unit.unit);
          };
          if (!v) {
              return Control_Plus.empty((dictMonadZero.Alternative1()).Plus1());
          };
          throw new Error("Failed pattern match at Control.MonadZero (line 54, column 1 - line 54, column 52): " + [ v.constructor.name ]);
      };
  };
  exports["MonadZero"] = MonadZero;
  exports["guard"] = guard;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Data.Maybe"] = $PS["Data.Maybe"] || {};
  var exports = $PS["Data.Maybe"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Alternative = $PS["Control.Alternative"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_MonadZero = $PS["Control.MonadZero"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];      
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var semigroupMaybe = function (dictSemigroup) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              if (v instanceof Nothing) {
                  return v1;
              };
              if (v1 instanceof Nothing) {
                  return v;
              };
              if (v instanceof Just && v1 instanceof Just) {
                  return new Just(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0));
              };
              throw new Error("Failed pattern match at Data.Maybe (line 174, column 1 - line 177, column 43): " + [ v.constructor.name, v1.constructor.name ]);
          };
      });
  };
  var optional = function (dictAlternative) {
      return function (a) {
          return Control_Alt.alt((dictAlternative.Plus1()).Alt0())(Data_Functor.map(((dictAlternative.Plus1()).Alt0()).Functor0())(Just.create)(a))(Control_Applicative.pure(dictAlternative.Applicative0())(Nothing.value));
      };
  };
  var monoidMaybe = function (dictSemigroup) {
      return new Data_Monoid.Monoid(function () {
          return semigroupMaybe(dictSemigroup);
      }, Nothing.value);
  };
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe (line 217, column 1 - line 217, column 51): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var isNothing = maybe(true)(Data_Function["const"](false));
  var isJust = maybe(false)(Data_Function["const"](true));
  var functorMaybe = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  var fromMaybe = function (a) {
      return maybe(a)(Control_Category.identity(Control_Category.categoryFn));
  };
  var fromJust = function (dictPartial) {
      return function (v) {
          if (v instanceof Just) {
              return v.value0;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 268, column 1 - line 268, column 46): " + [ v.constructor.name ]);
      };
  }; 
  var eqMaybe = function (dictEq) {
      return new Data_Eq.Eq(function (x) {
          return function (y) {
              if (x instanceof Nothing && y instanceof Nothing) {
                  return true;
              };
              if (x instanceof Just && y instanceof Just) {
                  return Data_Eq.eq(dictEq)(x.value0)(y.value0);
              };
              return false;
          };
      });
  };
  var applyMaybe = new Control_Apply.Apply(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return Data_Functor.map(functorMaybe)(v.value0)(v1);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 67, column 1 - line 69, column 30): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindMaybe = new Control_Bind.Bind(function () {
      return applyMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return v1(v.value0);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 125, column 1 - line 127, column 28): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applicativeMaybe = new Control_Applicative.Applicative(function () {
      return applyMaybe;
  }, Just.create);
  var monadMaybe = new Control_Monad.Monad(function () {
      return applicativeMaybe;
  }, function () {
      return bindMaybe;
  });
  var altMaybe = new Control_Alt.Alt(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Nothing) {
              return v1;
          };
          return v;
      };
  });
  var plusMaybe = new Control_Plus.Plus(function () {
      return altMaybe;
  }, Nothing.value);
  var alternativeMaybe = new Control_Alternative.Alternative(function () {
      return applicativeMaybe;
  }, function () {
      return plusMaybe;
  });
  var monadZeroMaybe = new Control_MonadZero.MonadZero(function () {
      return alternativeMaybe;
  }, function () {
      return monadMaybe;
  });
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["maybe"] = maybe;
  exports["fromMaybe"] = fromMaybe;
  exports["isJust"] = isJust;
  exports["isNothing"] = isNothing;
  exports["fromJust"] = fromJust;
  exports["optional"] = optional;
  exports["functorMaybe"] = functorMaybe;
  exports["applyMaybe"] = applyMaybe;
  exports["applicativeMaybe"] = applicativeMaybe;
  exports["altMaybe"] = altMaybe;
  exports["plusMaybe"] = plusMaybe;
  exports["alternativeMaybe"] = alternativeMaybe;
  exports["bindMaybe"] = bindMaybe;
  exports["monadMaybe"] = monadMaybe;
  exports["monadZeroMaybe"] = monadZeroMaybe;
  exports["semigroupMaybe"] = semigroupMaybe;
  exports["monoidMaybe"] = monoidMaybe;
  exports["eqMaybe"] = eqMaybe;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Data.List"] = $PS["Data.List"] || {};
  var exports = $PS["Data.List"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var span = function (v) {
      return function (v1) {
          if (v1 instanceof Data_List_Types.Cons && v(v1.value0)) {
              var v2 = span(v)(v1.value1);
              return {
                  init: new Data_List_Types.Cons(v1.value0, v2.init),
                  rest: v2.rest
              };
          };
          return {
              init: Data_List_Types.Nil.value,
              rest: v1
          };
      };
  };
  var singleton = function (a) {
      return new Data_List_Types.Cons(a, Data_List_Types.Nil.value);
  };
  var reverse = (function () {
      var go = function ($copy_acc) {
          return function ($copy_v) {
              var $tco_var_acc = $copy_acc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(acc, v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return acc;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      $tco_var_acc = new Data_List_Types.Cons(v.value0, acc);
                      $copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List (line 368, column 3 - line 368, column 19): " + [ acc.constructor.name, v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_acc, $copy_v);
              };
              return $tco_result;
          };
      };
      return go(Data_List_Types.Nil.value);
  })();
  var take = (function () {
      var go = function ($copy_acc) {
          return function ($copy_v) {
              return function ($copy_v1) {
                  var $tco_var_acc = $copy_acc;
                  var $tco_var_v = $copy_v;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(acc, v, v1) {
                      if (v < 1) {
                          $tco_done = true;
                          return reverse(acc);
                      };
                      if (v1 instanceof Data_List_Types.Nil) {
                          $tco_done = true;
                          return reverse(acc);
                      };
                      if (v1 instanceof Data_List_Types.Cons) {
                          $tco_var_acc = new Data_List_Types.Cons(v1.value0, acc);
                          $tco_var_v = v - 1 | 0;
                          $copy_v1 = v1.value1;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.List (line 520, column 3 - line 520, column 35): " + [ acc.constructor.name, v.constructor.name, v1.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_acc, $tco_var_v, $copy_v1);
                  };
                  return $tco_result;
              };
          };
      };
      return go(Data_List_Types.Nil.value);
  })();
  var unsnoc = function (lst) {
      var go = function ($copy_v) {
          return function ($copy_acc) {
              var $tco_var_v = $copy_v;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v, acc) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return new Data_Maybe.Just({
                          revInit: acc,
                          last: v.value0
                      });
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      $tco_var_v = v.value1;
                      $copy_acc = new Data_List_Types.Cons(v.value0, acc);
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List (line 270, column 3 - line 270, column 23): " + [ v.constructor.name, acc.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_v, $copy_acc);
              };
              return $tco_result;
          };
      };
      return Data_Functor.map(Data_Maybe.functorMaybe)(function (h) {
          return {
              init: reverse(h.revInit),
              last: h.last
          };
      })(go(lst)(Data_List_Types.Nil.value));
  };
  var $$null = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return true;
      };
      return false;
  };
  var length = Data_Foldable.foldl(Data_List_Types.foldableList)(function (acc) {
      return function (v) {
          return acc + 1 | 0;
      };
  })(0);
  var last = function ($copy_v) {
      var $tco_done = false;
      var $tco_result;
      function $tco_loop(v) {
          if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Nil) {
              $tco_done = true;
              return new Data_Maybe.Just(v.value0);
          };
          if (v instanceof Data_List_Types.Cons) {
              $copy_v = v.value1;
              return;
          };
          $tco_done = true;
          return Data_Maybe.Nothing.value;
      };
      while (!$tco_done) {
          $tco_result = $tco_loop($copy_v);
      };
      return $tco_result;
  };
  var init = function (lst) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
          return v.init;
      })(unsnoc(lst));
  };
  var index = function ($copy_v) {
      return function ($copy_v1) {
          var $tco_var_v = $copy_v;
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(v, v1) {
              if (v instanceof Data_List_Types.Nil) {
                  $tco_done = true;
                  return Data_Maybe.Nothing.value;
              };
              if (v instanceof Data_List_Types.Cons && v1 === 0) {
                  $tco_done = true;
                  return new Data_Maybe.Just(v.value0);
              };
              if (v instanceof Data_List_Types.Cons) {
                  $tco_var_v = v.value1;
                  $copy_v1 = v1 - 1 | 0;
                  return;
              };
              throw new Error("Failed pattern match at Data.List (line 281, column 1 - line 281, column 44): " + [ v.constructor.name, v1.constructor.name ]);
          };
          while (!$tco_done) {
              $tco_result = $tco_loop($tco_var_v, $copy_v1);
          };
          return $tco_result;
      };
  };
  var head = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Types.Cons) {
          return new Data_Maybe.Just(v.value0);
      };
      throw new Error("Failed pattern match at Data.List (line 230, column 1 - line 230, column 22): " + [ v.constructor.name ]);
  };
  var fromFoldable = function (dictFoldable) {
      return Data_Foldable.foldr(dictFoldable)(Data_List_Types.Cons.create)(Data_List_Types.Nil.value);
  };
  var drop = function ($copy_v) {
      return function ($copy_v1) {
          var $tco_var_v = $copy_v;
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(v, v1) {
              if (v < 1) {
                  $tco_done = true;
                  return v1;
              };
              if (v1 instanceof Data_List_Types.Nil) {
                  $tco_done = true;
                  return Data_List_Types.Nil.value;
              };
              if (v1 instanceof Data_List_Types.Cons) {
                  $tco_var_v = v - 1 | 0;
                  $copy_v1 = v1.value1;
                  return;
              };
              throw new Error("Failed pattern match at Data.List (line 543, column 1 - line 543, column 42): " + [ v.constructor.name, v1.constructor.name ]);
          };
          while (!$tco_done) {
              $tco_result = $tco_loop($tco_var_v, $copy_v1);
          };
          return $tco_result;
      };
  };
  var concatMap = Data_Function.flip(Control_Bind.bind(Data_List_Types.bindList));
  exports["fromFoldable"] = fromFoldable;
  exports["singleton"] = singleton;
  exports["null"] = $$null;
  exports["length"] = length;
  exports["head"] = head;
  exports["last"] = last;
  exports["init"] = init;
  exports["unsnoc"] = unsnoc;
  exports["index"] = index;
  exports["reverse"] = reverse;
  exports["concatMap"] = concatMap;
  exports["take"] = take;
  exports["drop"] = drop;
  exports["span"] = span;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Data.Tuple"] = $PS["Data.Tuple"] || {};
  var exports = $PS["Data.Tuple"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Semigroup = $PS["Data.Semigroup"];              
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var uncurry = function (f) {
      return function (v) {
          return f(v.value0)(v.value1);
      };
  };
  var snd = function (v) {
      return v.value1;
  }; 
  var semigroupTuple = function (dictSemigroup) {
      return function (dictSemigroup1) {
          return new Data_Semigroup.Semigroup(function (v) {
              return function (v1) {
                  return new Tuple(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0), Data_Semigroup.append(dictSemigroup1)(v.value1)(v1.value1));
              };
          });
      };
  };
  var monoidTuple = function (dictMonoid) {
      return function (dictMonoid1) {
          return new Data_Monoid.Monoid(function () {
              return semigroupTuple(dictMonoid.Semigroup0())(dictMonoid1.Semigroup0());
          }, new Tuple(Data_Monoid.mempty(dictMonoid), Data_Monoid.mempty(dictMonoid1)));
      };
  };                                                                                                    
  var fst = function (v) {
      return v.value0;
  }; 
  var eqTuple = function (dictEq) {
      return function (dictEq1) {
          return new Data_Eq.Eq(function (x) {
              return function (y) {
                  return Data_Eq.eq(dictEq)(x.value0)(y.value0) && Data_Eq.eq(dictEq1)(x.value1)(y.value1);
              };
          });
      };
  };
  var ordTuple = function (dictOrd) {
      return function (dictOrd1) {
          return new Data_Ord.Ord(function () {
              return eqTuple(dictOrd.Eq0())(dictOrd1.Eq0());
          }, function (x) {
              return function (y) {
                  var v = Data_Ord.compare(dictOrd)(x.value0)(y.value0);
                  if (v instanceof Data_Ordering.LT) {
                      return Data_Ordering.LT.value;
                  };
                  if (v instanceof Data_Ordering.GT) {
                      return Data_Ordering.GT.value;
                  };
                  return Data_Ord.compare(dictOrd1)(x.value1)(y.value1);
              };
          });
      };
  };
  var curry = function (f) {
      return function (a) {
          return function (b) {
              return f(new Tuple(a, b));
          };
      };
  };
  exports["Tuple"] = Tuple;
  exports["fst"] = fst;
  exports["snd"] = snd;
  exports["curry"] = curry;
  exports["uncurry"] = uncurry;
  exports["eqTuple"] = eqTuple;
  exports["ordTuple"] = ordTuple;
  exports["semigroupTuple"] = semigroupTuple;
  exports["monoidTuple"] = monoidTuple;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Data.CatQueue"] = $PS["Data.CatQueue"] || {};
  var exports = $PS["Data.CatQueue"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];                            
  var CatQueue = (function () {
      function CatQueue(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CatQueue.create = function (value0) {
          return function (value1) {
              return new CatQueue(value0, value1);
          };
      };
      return CatQueue;
  })();
  var uncons = function ($copy_v) {
      var $tco_done = false;
      var $tco_result;
      function $tco_loop(v) {
          if (v.value0 instanceof Data_List_Types.Nil && v.value1 instanceof Data_List_Types.Nil) {
              $tco_done = true;
              return Data_Maybe.Nothing.value;
          };
          if (v.value0 instanceof Data_List_Types.Nil) {
              $copy_v = new CatQueue(Data_List.reverse(v.value1), Data_List_Types.Nil.value);
              return;
          };
          if (v.value0 instanceof Data_List_Types.Cons) {
              $tco_done = true;
              return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0.value0, new CatQueue(v.value0.value1, v.value1)));
          };
          throw new Error("Failed pattern match at Data.CatQueue (line 83, column 1 - line 83, column 63): " + [ v.constructor.name ]);
      };
      while (!$tco_done) {
          $tco_result = $tco_loop($copy_v);
      };
      return $tco_result;
  };
  var snoc = function (v) {
      return function (a) {
          return new CatQueue(v.value0, new Data_List_Types.Cons(a, v.value1));
      };
  };
  var $$null = function (v) {
      if (v.value0 instanceof Data_List_Types.Nil && v.value1 instanceof Data_List_Types.Nil) {
          return true;
      };
      return false;
  };                                                                                                
  var empty = new CatQueue(Data_List_Types.Nil.value, Data_List_Types.Nil.value);
  exports["CatQueue"] = CatQueue;
  exports["empty"] = empty;
  exports["null"] = $$null;
  exports["snoc"] = snoc;
  exports["uncons"] = uncons;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Data.CatList"] = $PS["Data.CatList"] || {};
  var exports = $PS["Data.CatList"];
  var Data_CatQueue = $PS["Data.CatQueue"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Tuple = $PS["Data.Tuple"];                            
  var CatNil = (function () {
      function CatNil() {

      };
      CatNil.value = new CatNil();
      return CatNil;
  })();
  var CatCons = (function () {
      function CatCons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CatCons.create = function (value0) {
          return function (value1) {
              return new CatCons(value0, value1);
          };
      };
      return CatCons;
  })();
  var link = function (v) {
      return function (v1) {
          if (v instanceof CatNil) {
              return v1;
          };
          if (v1 instanceof CatNil) {
              return v;
          };
          if (v instanceof CatCons) {
              return new CatCons(v.value0, Data_CatQueue.snoc(v.value1)(v1));
          };
          throw new Error("Failed pattern match at Data.CatList (line 109, column 1 - line 109, column 54): " + [ v.constructor.name, v1.constructor.name ]);
      };
  };
  var foldr = function (k) {
      return function (b) {
          return function (q) {
              var foldl = function ($copy_v) {
                  return function ($copy_c) {
                      return function ($copy_v1) {
                          var $tco_var_v = $copy_v;
                          var $tco_var_c = $copy_c;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(v, c, v1) {
                              if (v1 instanceof Data_List_Types.Nil) {
                                  $tco_done = true;
                                  return c;
                              };
                              if (v1 instanceof Data_List_Types.Cons) {
                                  $tco_var_v = v;
                                  $tco_var_c = v(c)(v1.value0);
                                  $copy_v1 = v1.value1;
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.CatList (line 125, column 3 - line 125, column 59): " + [ v.constructor.name, c.constructor.name, v1.constructor.name ]);
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_v, $tco_var_c, $copy_v1);
                          };
                          return $tco_result;
                      };
                  };
              };
              var go = function ($copy_xs) {
                  return function ($copy_ys) {
                      var $tco_var_xs = $copy_xs;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(xs, ys) {
                          var v = Data_CatQueue.uncons(xs);
                          if (v instanceof Data_Maybe.Nothing) {
                              $tco_done = true;
                              return foldl(function (x) {
                                  return function (i) {
                                      return i(x);
                                  };
                              })(b)(ys);
                          };
                          if (v instanceof Data_Maybe.Just) {
                              $tco_var_xs = v.value0.value1;
                              $copy_ys = new Data_List_Types.Cons(k(v.value0.value0), ys);
                              return;
                          };
                          throw new Error("Failed pattern match at Data.CatList (line 121, column 14 - line 123, column 67): " + [ v.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_xs, $copy_ys);
                      };
                      return $tco_result;
                  };
              };
              return go(q)(Data_List_Types.Nil.value);
          };
      };
  };
  var uncons = function (v) {
      if (v instanceof CatNil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof CatCons) {
          return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0, (function () {
              var $44 = Data_CatQueue["null"](v.value1);
              if ($44) {
                  return CatNil.value;
              };
              return foldr(link)(CatNil.value)(v.value1);
          })()));
      };
      throw new Error("Failed pattern match at Data.CatList (line 100, column 1 - line 100, column 61): " + [ v.constructor.name ]);
  };
  var empty = CatNil.value;
  var append = link;
  var semigroupCatList = new Data_Semigroup.Semigroup(append);
  var snoc = function (cat) {
      return function (a) {
          return append(cat)(new CatCons(a, Data_CatQueue.empty));
      };
  };
  exports["CatNil"] = CatNil;
  exports["CatCons"] = CatCons;
  exports["empty"] = empty;
  exports["append"] = append;
  exports["snoc"] = snoc;
  exports["uncons"] = uncons;
  exports["semigroupCatList"] = semigroupCatList;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Control.Monad.Free"] = $PS["Control.Monad.Free"] || {};
  var exports = $PS["Control.Monad.Free"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_Rec_Class = $PS["Control.Monad.Rec.Class"];
  var Data_CatList = $PS["Data.CatList"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Free = (function () {
      function Free(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Free.create = function (value0) {
          return function (value1) {
              return new Free(value0, value1);
          };
      };
      return Free;
  })();
  var Return = (function () {
      function Return(value0) {
          this.value0 = value0;
      };
      Return.create = function (value0) {
          return new Return(value0);
      };
      return Return;
  })();
  var Bind = (function () {
      function Bind(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Bind.create = function (value0) {
          return function (value1) {
              return new Bind(value0, value1);
          };
      };
      return Bind;
  })();
  var toView = function ($copy_v) {
      var $tco_done = false;
      var $tco_result;
      function $tco_loop(v) {
          var runExpF = function (v2) {
              return v2;
          };
          var concatF = function (v2) {
              return function (r) {
                  return new Free(v2.value0, Data_Semigroup.append(Data_CatList.semigroupCatList)(v2.value1)(r));
              };
          };
          if (v.value0 instanceof Return) {
              var v2 = Data_CatList.uncons(v.value1);
              if (v2 instanceof Data_Maybe.Nothing) {
                  $tco_done = true;
                  return new Return(v.value0.value0);
              };
              if (v2 instanceof Data_Maybe.Just) {
                  $copy_v = concatF(runExpF(v2.value0.value0)(v.value0.value0))(v2.value0.value1);
                  return;
              };
              throw new Error("Failed pattern match at Control.Monad.Free (line 227, column 7 - line 231, column 64): " + [ v2.constructor.name ]);
          };
          if (v.value0 instanceof Bind) {
              $tco_done = true;
              return new Bind(v.value0.value0, function (a) {
                  return concatF(v.value0.value1(a))(v.value1);
              });
          };
          throw new Error("Failed pattern match at Control.Monad.Free (line 225, column 3 - line 233, column 56): " + [ v.value0.constructor.name ]);
      };
      while (!$tco_done) {
          $tco_result = $tco_loop($copy_v);
      };
      return $tco_result;
  };
  var resume$prime = function (k) {
      return function (j) {
          return function (f) {
              var v = toView(f);
              if (v instanceof Return) {
                  return j(v.value0);
              };
              if (v instanceof Bind) {
                  return k(v.value0)(v.value1);
              };
              throw new Error("Failed pattern match at Control.Monad.Free (line 213, column 17 - line 215, column 20): " + [ v.constructor.name ]);
          };
      };
  };
  var fromView = function (f) {
      return new Free(f, Data_CatList.empty);
  };
  var freeMonad = new Control_Monad.Monad(function () {
      return freeApplicative;
  }, function () {
      return freeBind;
  });
  var freeFunctor = new Data_Functor.Functor(function (k) {
      return function (f) {
          return Control_Bind.bindFlipped(freeBind)((function () {
              var $120 = Control_Applicative.pure(freeApplicative);
              return function ($121) {
                  return $120(k($121));
              };
          })())(f);
      };
  });
  var freeBind = new Control_Bind.Bind(function () {
      return freeApply;
  }, function (v) {
      return function (k) {
          return new Free(v.value0, Data_CatList.snoc(v.value1)(k));
      };
  });
  var freeApply = new Control_Apply.Apply(function () {
      return freeFunctor;
  }, Control_Monad.ap(freeMonad));
  var freeApplicative = new Control_Applicative.Applicative(function () {
      return freeApply;
  }, function ($122) {
      return fromView(Return.create($122));
  });
  var freeMonadRec = new Control_Monad_Rec_Class.MonadRec(function () {
      return freeMonad;
  }, function (k) {
      return function (a) {
          return Control_Bind.bind(freeBind)(k(a))(function (v) {
              if (v instanceof Control_Monad_Rec_Class.Loop) {
                  return Control_Monad_Rec_Class.tailRecM(freeMonadRec)(k)(v.value0);
              };
              if (v instanceof Control_Monad_Rec_Class.Done) {
                  return Control_Applicative.pure(freeApplicative)(v.value0);
              };
              throw new Error("Failed pattern match at Control.Monad.Free (line 86, column 26 - line 88, column 21): " + [ v.constructor.name ]);
          });
      };
  });
  var liftF = function (f) {
      return fromView(new Bind(f, (function () {
          var $123 = Control_Applicative.pure(freeApplicative);
          return function ($124) {
              return $123($124);
          };
      })()));
  };
  exports["liftF"] = liftF;
  exports["resume'"] = resume$prime;
  exports["freeFunctor"] = freeFunctor;
  exports["freeBind"] = freeBind;
  exports["freeApplicative"] = freeApplicative;
  exports["freeApply"] = freeApply;
  exports["freeMonad"] = freeMonad;
  exports["freeMonadRec"] = freeMonadRec;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Control.Monad.Reader"] = $PS["Control.Monad.Reader"] || {};
  var exports = $PS["Control.Monad.Reader"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Newtype = $PS["Data.Newtype"];                 
  var runReader = function (v) {
      var $2 = Data_Newtype.unwrap(Data_Identity.newtypeIdentity);
      return function ($3) {
          return $2(v($3));
      };
  };
  exports["runReader"] = runReader;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Control.Monad.Reader.Class"] = $PS["Control.Monad.Reader.Class"] || {};
  var exports = $PS["Control.Monad.Reader.Class"];       
  var MonadAsk = function (Monad0, ask) {
      this.Monad0 = Monad0;
      this.ask = ask;
  };
  var ask = function (dict) {
      return dict.ask;
  };
  exports["ask"] = ask;
  exports["MonadAsk"] = MonadAsk;
})(PS);
(function(exports) {
  "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Effect"] = $PS["Effect"] || {};
  var exports = $PS["Effect"];
  var $foreign = $PS["Effect"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];                
  var monadEffect = new Control_Monad.Monad(function () {
      return applicativeEffect;
  }, function () {
      return bindEffect;
  });
  var bindEffect = new Control_Bind.Bind(function () {
      return applyEffect;
  }, $foreign.bindE);
  var applyEffect = new Control_Apply.Apply(function () {
      return functorEffect;
  }, Control_Monad.ap(monadEffect));
  var applicativeEffect = new Control_Applicative.Applicative(function () {
      return applyEffect;
  }, $foreign.pureE);
  var functorEffect = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEffect));
  var semigroupEffect = function (dictSemigroup) {
      return new Data_Semigroup.Semigroup(Control_Apply.lift2(applyEffect)(Data_Semigroup.append(dictSemigroup)));
  };
  var monoidEffect = function (dictMonoid) {
      return new Data_Monoid.Monoid(function () {
          return semigroupEffect(dictMonoid.Semigroup0());
      }, $foreign.pureE(Data_Monoid.mempty(dictMonoid)));
  };
  exports["functorEffect"] = functorEffect;
  exports["applyEffect"] = applyEffect;
  exports["applicativeEffect"] = applicativeEffect;
  exports["bindEffect"] = bindEffect;
  exports["monadEffect"] = monadEffect;
  exports["semigroupEffect"] = semigroupEffect;
  exports["monoidEffect"] = monoidEffect;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Effect.Class"] = $PS["Effect.Class"] || {};
  var exports = $PS["Effect.Class"];
  var Control_Category = $PS["Control.Category"];
  var Effect = $PS["Effect"];                
  var MonadEffect = function (Monad0, liftEffect) {
      this.Monad0 = Monad0;
      this.liftEffect = liftEffect;
  };
  var monadEffectEffect = new MonadEffect(function () {
      return Effect.monadEffect;
  }, Control_Category.identity(Control_Category.categoryFn));
  var liftEffect = function (dict) {
      return dict.liftEffect;
  };
  exports["liftEffect"] = liftEffect;
  exports["MonadEffect"] = MonadEffect;
  exports["monadEffectEffect"] = monadEffectEffect;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Control.Monad.Reader.Trans"] = $PS["Control.Monad.Reader.Trans"] || {};
  var exports = $PS["Control.Monad.Reader.Trans"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_Reader_Class = $PS["Control.Monad.Reader.Class"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Effect_Class = $PS["Effect.Class"];                
  var ReaderT = function (x) {
      return x;
  };
  var runReaderT = function (v) {
      return v;
  };          
  var monadTransReaderT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
      return function ($67) {
          return ReaderT(Data_Function["const"]($67));
      };
  });
  var mapReaderT = function (f) {
      return function (v) {
          return function ($68) {
              return f(v($68));
          };
      };
  };
  var functorReaderT = function (dictFunctor) {
      return new Data_Functor.Functor((function () {
          var $69 = Data_Functor.map(dictFunctor);
          return function ($70) {
              return mapReaderT($69($70));
          };
      })());
  };
  var applyReaderT = function (dictApply) {
      return new Control_Apply.Apply(function () {
          return functorReaderT(dictApply.Functor0());
      }, function (v) {
          return function (v1) {
              return function (r) {
                  return Control_Apply.apply(dictApply)(v(r))(v1(r));
              };
          };
      });
  };
  var bindReaderT = function (dictBind) {
      return new Control_Bind.Bind(function () {
          return applyReaderT(dictBind.Apply0());
      }, function (v) {
          return function (k) {
              return function (r) {
                  return Control_Bind.bind(dictBind)(v(r))(function (a) {
                      var v1 = k(a);
                      return v1(r);
                  });
              };
          };
      });
  };
  var applicativeReaderT = function (dictApplicative) {
      return new Control_Applicative.Applicative(function () {
          return applyReaderT(dictApplicative.Apply0());
      }, (function () {
          var $74 = Control_Applicative.pure(dictApplicative);
          return function ($75) {
              return ReaderT(Data_Function["const"]($74($75)));
          };
      })());
  };
  var monadReaderT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeReaderT(dictMonad.Applicative0());
      }, function () {
          return bindReaderT(dictMonad.Bind1());
      });
  };
  var monadAskReaderT = function (dictMonad) {
      return new Control_Monad_Reader_Class.MonadAsk(function () {
          return monadReaderT(dictMonad);
      }, Control_Applicative.pure(dictMonad.Applicative0()));
  };
  var monadEffectReader = function (dictMonadEffect) {
      return new Effect_Class.MonadEffect(function () {
          return monadReaderT(dictMonadEffect.Monad0());
      }, (function () {
          var $77 = Control_Monad_Trans_Class.lift(monadTransReaderT)(dictMonadEffect.Monad0());
          var $78 = Effect_Class.liftEffect(dictMonadEffect);
          return function ($79) {
              return $77($78($79));
          };
      })());
  };
  exports["ReaderT"] = ReaderT;
  exports["runReaderT"] = runReaderT;
  exports["mapReaderT"] = mapReaderT;
  exports["functorReaderT"] = functorReaderT;
  exports["applyReaderT"] = applyReaderT;
  exports["applicativeReaderT"] = applicativeReaderT;
  exports["bindReaderT"] = bindReaderT;
  exports["monadReaderT"] = monadReaderT;
  exports["monadTransReaderT"] = monadTransReaderT;
  exports["monadEffectReader"] = monadEffectReader;
  exports["monadAskReaderT"] = monadAskReaderT;
})(PS);
(function(exports) {
  "use strict";

  exports.map_ = function (f) {
    return function (a) {
      return function () {
        return f(a());
      };
    };
  };

  exports.pure_ = function (a) {
    return function () {
      return a;
    };
  };

  exports.bind_ = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };

  exports.new = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.read = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports["modify'"] = function (f) {
    return function (ref) {
      return function () {
        var t = f(ref.value);
        ref.value = t.state;
        return t.value;
      };
    };
  };

  exports.write = function (a) {
    return function (ref) {
      return function () {
        return ref.value = a; // eslint-disable-line no-return-assign
      };
    };
  };
})(PS["Control.Monad.ST.Internal"] = PS["Control.Monad.ST.Internal"] || {});
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Control.Monad.ST.Internal"] = $PS["Control.Monad.ST.Internal"] || {};
  var exports = $PS["Control.Monad.ST.Internal"];
  var $foreign = $PS["Control.Monad.ST.Internal"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];          
  var modify = function (f) {
      return $foreign["modify'"](function (s) {
          var s$prime = f(s);
          return {
              state: s$prime,
              value: s$prime
          };
      });
  };
  var functorST = new Data_Functor.Functor($foreign.map_);
  var monadST = new Control_Monad.Monad(function () {
      return applicativeST;
  }, function () {
      return bindST;
  });
  var bindST = new Control_Bind.Bind(function () {
      return applyST;
  }, $foreign.bind_);
  var applyST = new Control_Apply.Apply(function () {
      return functorST;
  }, Control_Monad.ap(monadST));
  var applicativeST = new Control_Applicative.Applicative(function () {
      return applyST;
  }, $foreign.pure_);
  exports["modify"] = modify;
  exports["functorST"] = functorST;
  exports["applyST"] = applyST;
  exports["applicativeST"] = applicativeST;
  exports["bindST"] = bindST;
  exports["monadST"] = monadST;
  exports["new"] = $foreign["new"];
  exports["read"] = $foreign.read;
  exports["write"] = $foreign.write;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Control.Monad.State.Class"] = $PS["Control.Monad.State.Class"] || {};
  var exports = $PS["Control.Monad.State.Class"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];                
  var MonadState = function (Monad0, state) {
      this.Monad0 = Monad0;
      this.state = state;
  };
  var state = function (dict) {
      return dict.state;
  };
  var put = function (dictMonadState) {
      return function (s) {
          return state(dictMonadState)(function (v) {
              return new Data_Tuple.Tuple(Data_Unit.unit, s);
          });
      };
  };
  var modify_ = function (dictMonadState) {
      return function (f) {
          return state(dictMonadState)(function (s) {
              return new Data_Tuple.Tuple(Data_Unit.unit, f(s));
          });
      };
  };
  var get = function (dictMonadState) {
      return state(dictMonadState)(function (s) {
          return new Data_Tuple.Tuple(s, s);
      });
  };
  exports["state"] = state;
  exports["MonadState"] = MonadState;
  exports["get"] = get;
  exports["put"] = put;
  exports["modify_"] = modify_;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Control.Monad.State.Trans"] = $PS["Control.Monad.State.Trans"] || {};
  var exports = $PS["Control.Monad.State.Trans"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Tuple = $PS["Data.Tuple"];                    
  var StateT = function (x) {
      return x;
  };
  var runStateT = function (v) {
      return v;
  };         
  var monadTransStateT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
      return function (m) {
          return function (s) {
              return Control_Bind.bind(dictMonad.Bind1())(m)(function (v) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v, s));
              });
          };
      };
  });
  var functorStateT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              return function (s) {
                  return Data_Functor.map(dictFunctor)(function (v1) {
                      return new Data_Tuple.Tuple(f(v1.value0), v1.value1);
                  })(v(s));
              };
          };
      });
  };
  var evalStateT = function (dictFunctor) {
      return function (v) {
          return function (s) {
              return Data_Functor.map(dictFunctor)(Data_Tuple.fst)(v(s));
          };
      };
  };
  var monadStateT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeStateT(dictMonad);
      }, function () {
          return bindStateT(dictMonad);
      });
  };
  var bindStateT = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return applyStateT(dictMonad);
      }, function (v) {
          return function (f) {
              return function (s) {
                  return Control_Bind.bind(dictMonad.Bind1())(v(s))(function (v1) {
                      var v3 = f(v1.value0);
                      return v3(v1.value1);
                  });
              };
          };
      });
  };
  var applyStateT = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return functorStateT(((dictMonad.Bind1()).Apply0()).Functor0());
      }, Control_Monad.ap(monadStateT(dictMonad)));
  };
  var applicativeStateT = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return applyStateT(dictMonad);
      }, function (a) {
          return function (s) {
              return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(a, s));
          };
      });
  };
  var monadStateStateT = function (dictMonad) {
      return new Control_Monad_State_Class.MonadState(function () {
          return monadStateT(dictMonad);
      }, function (f) {
          return StateT((function () {
              var $114 = Control_Applicative.pure(dictMonad.Applicative0());
              return function ($115) {
                  return $114(f($115));
              };
          })());
      });
  };
  exports["StateT"] = StateT;
  exports["runStateT"] = runStateT;
  exports["evalStateT"] = evalStateT;
  exports["functorStateT"] = functorStateT;
  exports["applyStateT"] = applyStateT;
  exports["applicativeStateT"] = applicativeStateT;
  exports["bindStateT"] = bindStateT;
  exports["monadStateT"] = monadStateT;
  exports["monadTransStateT"] = monadTransStateT;
  exports["monadStateStateT"] = monadStateStateT;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Control.MonadPlus"] = $PS["Control.MonadPlus"] || {};
  var exports = $PS["Control.MonadPlus"];                          
  var MonadPlus = function (MonadZero0) {
      this.MonadZero0 = MonadZero0;
  };
  exports["MonadPlus"] = MonadPlus;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Control.Parallel.Class"] = $PS["Control.Parallel.Class"] || {};
  var exports = $PS["Control.Parallel.Class"];
  var Parallel = function (Applicative1, Monad0, parallel, sequential) {
      this.Applicative1 = Applicative1;
      this.Monad0 = Monad0;
      this.parallel = parallel;
      this.sequential = sequential;
  };
  var sequential = function (dict) {
      return dict.sequential;
  };
  var parallel = function (dict) {
      return dict.parallel;
  };
  exports["parallel"] = parallel;
  exports["sequential"] = sequential;
  exports["Parallel"] = Parallel;
})(PS);
(function(exports) {
  "use strict";

  function id(x) {
    return x;
  }

  exports.fromBoolean = id;
  exports.fromNumber = id;
  exports.fromString = id;
  exports.fromArray = id;
  exports.fromObject = id;

  exports.jsonNull = null;

  exports.stringify = function (j) {
    return JSON.stringify(j);
  };

  var objToString = Object.prototype.toString;

  function isArray(a) {
    return objToString.call(a) === "[object Array]";
  }

  exports._caseJson = function (isNull, isBool, isNum, isStr, isArr, isObj, j) {
    if (j == null) return isNull();
    else if (typeof j === "boolean") return isBool(j);
    else if (typeof j === "number") return isNum(j);
    else if (typeof j === "string") return isStr(j);
    else if (objToString.call(j) === "[object Array]")
      return isArr(j);
    else return isObj(j);
  };
})(PS["Data.Argonaut.Core"] = PS["Data.Argonaut.Core"] || {});
(function(exports) {
  "use strict";

  exports._copyST = function (m) {
    return function () {
      var r = {};
      for (var k in m) {
        if (hasOwnProperty.call(m, k)) {
          r[k] = m[k];
        }
      }
      return r;
    };
  };

  exports.empty = {};

  exports.runST = function (f) {
    return f();
  };

  exports._fmapObject = function (m0, f) {
    var m = {};
    for (var k in m0) {
      if (hasOwnProperty.call(m0, k)) {
        m[k] = f(m0[k]);
      }
    }
    return m;
  };

  exports._mapWithKey = function (m0, f) {
    var m = {};
    for (var k in m0) {
      if (hasOwnProperty.call(m0, k)) {
        m[k] = f(k)(m0[k]);
      }
    }
    return m;
  };

  exports._foldM = function (bind) {
    return function (f) {
      return function (mz) {
        return function (m) {
          var acc = mz;
          function g(k) {
            return function (z) {
              return f(z)(k)(m[k]);
            };
          }
          for (var k in m) {
            if (hasOwnProperty.call(m, k)) {
              acc = bind(acc)(g(k));
            }
          }
          return acc;
        };
      };
    };
  };

  exports._lookup = function (no, yes, k, m) {
    return k in m ? yes(m[k]) : no;
  };

  function toArrayWithKey(f) {
    return function (m) {
      var r = [];
      for (var k in m) {
        if (hasOwnProperty.call(m, k)) {
          r.push(f(k)(m[k]));
        }
      }
      return r;
    };
  }

  exports.toArrayWithKey = toArrayWithKey;
})(PS["Foreign.Object"] = PS["Foreign.Object"] || {});
(function(exports) {
  "use strict";

  exports.mapWithIndexArray = function (f) {
    return function (xs) {
      var l = xs.length;
      var result = Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(i)(xs[i]);
      }
      return result;
    };
  };
})(PS["Data.FunctorWithIndex"] = PS["Data.FunctorWithIndex"] || {});
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Data.FunctorWithIndex"] = $PS["Data.FunctorWithIndex"] || {};
  var exports = $PS["Data.FunctorWithIndex"];
  var $foreign = $PS["Data.FunctorWithIndex"];
  var Data_Functor = $PS["Data.Functor"];          
  var FunctorWithIndex = function (Functor0, mapWithIndex) {
      this.Functor0 = Functor0;
      this.mapWithIndex = mapWithIndex;
  };
  var mapWithIndex = function (dict) {
      return dict.mapWithIndex;
  }; 
  var functorWithIndexArray = new FunctorWithIndex(function () {
      return Data_Functor.functorArray;
  }, $foreign.mapWithIndexArray);
  exports["FunctorWithIndex"] = FunctorWithIndex;
  exports["mapWithIndex"] = mapWithIndex;
  exports["functorWithIndexArray"] = functorWithIndexArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Data.FoldableWithIndex"] = $PS["Data.FoldableWithIndex"] || {};
  var exports = $PS["Data.FoldableWithIndex"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_FunctorWithIndex = $PS["Data.FunctorWithIndex"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];      
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var FoldableWithIndex = function (Foldable0, foldMapWithIndex, foldlWithIndex, foldrWithIndex) {
      this.Foldable0 = Foldable0;
      this.foldMapWithIndex = foldMapWithIndex;
      this.foldlWithIndex = foldlWithIndex;
      this.foldrWithIndex = foldrWithIndex;
  };
  var foldrWithIndex = function (dict) {
      return dict.foldrWithIndex;
  };
  var foldlWithIndex = function (dict) {
      return dict.foldlWithIndex;
  };
  var foldMapWithIndexDefaultR = function (dictFoldableWithIndex) {
      return function (dictMonoid) {
          return function (f) {
              return foldrWithIndex(dictFoldableWithIndex)(function (i) {
                  return function (x) {
                      return function (acc) {
                          return Data_Semigroup.append(dictMonoid.Semigroup0())(f(i)(x))(acc);
                      };
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableWithIndexArray = new FoldableWithIndex(function () {
      return Data_Foldable.foldableArray;
  }, function (dictMonoid) {
      return foldMapWithIndexDefaultR(foldableWithIndexArray)(dictMonoid);
  }, function (f) {
      return function (z) {
          var $49 = Data_Foldable.foldl(Data_Foldable.foldableArray)(function (y) {
              return function (v) {
                  return f(v.value0)(y)(v.value1);
              };
          })(z);
          var $50 = Data_FunctorWithIndex.mapWithIndex(Data_FunctorWithIndex.functorWithIndexArray)(Tuple.create);
          return function ($51) {
              return $49($50($51));
          };
      };
  }, function (f) {
      return function (z) {
          var $52 = Data_Foldable.foldr(Data_Foldable.foldableArray)(function (v) {
              return function (y) {
                  return f(v.value0)(v.value1)(y);
              };
          })(z);
          var $53 = Data_FunctorWithIndex.mapWithIndex(Data_FunctorWithIndex.functorWithIndexArray)(Tuple.create);
          return function ($54) {
              return $52($53($54));
          };
      };
  });
  var foldMapWithIndex = function (dict) {
      return dict.foldMapWithIndex;
  };
  exports["FoldableWithIndex"] = FoldableWithIndex;
  exports["foldrWithIndex"] = foldrWithIndex;
  exports["foldlWithIndex"] = foldlWithIndex;
  exports["foldMapWithIndex"] = foldMapWithIndex;
  exports["foldMapWithIndexDefaultR"] = foldMapWithIndexDefaultR;
  exports["foldableWithIndexArray"] = foldableWithIndexArray;
})(PS);
(function(exports) {
  "use strict";

  exports.runFn4 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return fn(a, b, c, d);
          };
        };
      };
    };
  };
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Data.Function.Uncurried"] = $PS["Data.Function.Uncurried"] || {};
  var exports = $PS["Data.Function.Uncurried"];
  var $foreign = $PS["Data.Function.Uncurried"];
  exports["runFn4"] = $foreign.runFn4;
})(PS);
(function(exports) {
  "use strict";

  // jshint maxparams: 3

  exports.traverseArrayImpl = function () {
    function array1(a) {
      return [a];
    }

    function array2(a) {
      return function (b) {
        return [a, b];
      };
    }

    function array3(a) {
      return function (b) {
        return function (c) {
          return [a, b, c];
        };
      };
    }

    function concat2(xs) {
      return function (ys) {
        return xs.concat(ys);
      };
    }

    return function (apply) {
      return function (map) {
        return function (pure) {
          return function (f) {
            return function (array) {
              function go(bot, top) {
                switch (top - bot) {
                case 0: return pure([]);
                case 1: return map(array1)(f(array[bot]));
                case 2: return apply(map(array2)(f(array[bot])))(f(array[bot + 1]));
                case 3: return apply(apply(map(array3)(f(array[bot])))(f(array[bot + 1])))(f(array[bot + 2]));
                default:
                  // This slightly tricky pivot selection aims to produce two
                  // even-length partitions where possible.
                  var pivot = bot + Math.floor((top - bot) / 4) * 2;
                  return apply(map(concat2)(go(bot, pivot)))(go(pivot, top));
                }
              }
              return go(0, array.length);
            };
          };
        };
      };
    };
  }();
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Data.Traversable"] = $PS["Data.Traversable"] || {};
  var exports = $PS["Data.Traversable"];
  var $foreign = $PS["Data.Traversable"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];                                                      
  var Traversable = function (Foldable1, Functor0, sequence, traverse) {
      this.Foldable1 = Foldable1;
      this.Functor0 = Functor0;
      this.sequence = sequence;
      this.traverse = traverse;
  };
  var traverse = function (dict) {
      return dict.traverse;
  }; 
  var sequenceDefault = function (dictTraversable) {
      return function (dictApplicative) {
          return traverse(dictTraversable)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var traversableArray = new Traversable(function () {
      return Data_Foldable.foldableArray;
  }, function () {
      return Data_Functor.functorArray;
  }, function (dictApplicative) {
      return sequenceDefault(traversableArray)(dictApplicative);
  }, function (dictApplicative) {
      return $foreign.traverseArrayImpl(Control_Apply.apply(dictApplicative.Apply0()))(Data_Functor.map((dictApplicative.Apply0()).Functor0()))(Control_Applicative.pure(dictApplicative));
  });
  var sequence = function (dict) {
      return dict.sequence;
  };
  exports["Traversable"] = Traversable;
  exports["traverse"] = traverse;
  exports["sequence"] = sequence;
  exports["sequenceDefault"] = sequenceDefault;
  exports["traversableArray"] = traversableArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Data.TraversableWithIndex"] = $PS["Data.TraversableWithIndex"] || {};
  var exports = $PS["Data.TraversableWithIndex"];
  var Data_FoldableWithIndex = $PS["Data.FoldableWithIndex"];
  var Data_FunctorWithIndex = $PS["Data.FunctorWithIndex"];
  var Data_Traversable = $PS["Data.Traversable"];  
  var TraversableWithIndex = function (FoldableWithIndex1, FunctorWithIndex0, Traversable2, traverseWithIndex) {
      this.FoldableWithIndex1 = FoldableWithIndex1;
      this.FunctorWithIndex0 = FunctorWithIndex0;
      this.Traversable2 = Traversable2;
      this.traverseWithIndex = traverseWithIndex;
  };
  var traverseWithIndexDefault = function (dictTraversableWithIndex) {
      return function (dictApplicative) {
          return function (f) {
              var $19 = Data_Traversable.sequence(dictTraversableWithIndex.Traversable2())(dictApplicative);
              var $20 = Data_FunctorWithIndex.mapWithIndex(dictTraversableWithIndex.FunctorWithIndex0())(f);
              return function ($21) {
                  return $19($20($21));
              };
          };
      };
  };
  var traverseWithIndex = function (dict) {
      return dict.traverseWithIndex;
  }; 
  var traversableWithIndexArray = new TraversableWithIndex(function () {
      return Data_FoldableWithIndex.foldableWithIndexArray;
  }, function () {
      return Data_FunctorWithIndex.functorWithIndexArray;
  }, function () {
      return Data_Traversable.traversableArray;
  }, function (dictApplicative) {
      return traverseWithIndexDefault(traversableWithIndexArray)(dictApplicative);
  });
  exports["TraversableWithIndex"] = TraversableWithIndex;
  exports["traverseWithIndex"] = traverseWithIndex;
  exports["traverseWithIndexDefault"] = traverseWithIndexDefault;
  exports["traversableWithIndexArray"] = traversableWithIndexArray;
})(PS);
(function(exports) {
  "use strict";

  exports["new"] = function () {
    return {};
  };

  exports.poke = function (k) {
    return function (v) {
      return function (m) {
        return function () {
          m[k] = v;
          return m;
        };
      };
    };
  };

  exports["delete"] = function (k) {
    return function (m) {
      return function () {
        delete m[k];
        return m;
      };
    };
  };
})(PS["Foreign.Object.ST"] = PS["Foreign.Object.ST"] || {});
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Foreign.Object.ST"] = $PS["Foreign.Object.ST"] || {};
  var exports = $PS["Foreign.Object.ST"];
  var $foreign = $PS["Foreign.Object.ST"];
  exports["new"] = $foreign["new"];
  exports["poke"] = $foreign.poke;
  exports["delete"] = $foreign["delete"];
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Foreign.Object"] = $PS["Foreign.Object"] || {};
  var exports = $PS["Foreign.Object"];
  var $foreign = $PS["Foreign.Object"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad_ST_Internal = $PS["Control.Monad.ST.Internal"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_FoldableWithIndex = $PS["Data.FoldableWithIndex"];
  var Data_Function = $PS["Data.Function"];
  var Data_Function_Uncurried = $PS["Data.Function.Uncurried"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_FunctorWithIndex = $PS["Data.FunctorWithIndex"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_TraversableWithIndex = $PS["Data.TraversableWithIndex"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Foreign_Object_ST = $PS["Foreign.Object.ST"];        
  var values = $foreign.toArrayWithKey(function (v) {
      return function (v1) {
          return v1;
      };
  });                                                            
  var thawST = $foreign["_copyST"];
  var singleton = function (k) {
      return function (v) {
          return $foreign.runST(Control_Bind.bindFlipped(Control_Monad_ST_Internal.bindST)(Foreign_Object_ST.poke(k)(v))(Foreign_Object_ST["new"]));
      };
  };
  var mutate = function (f) {
      return function (m) {
          return $foreign.runST(function __do() {
              var v = thawST(m)();
              var v1 = f(v)();
              return v;
          });
      };
  };                                                                                                    
  var mapWithKey = function (f) {
      return function (m) {
          return $foreign["_mapWithKey"](m, f);
      };
  };
  var lookup = Data_Function_Uncurried.runFn4($foreign["_lookup"])(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
  var insert = function (k) {
      return function (v) {
          return mutate(Foreign_Object_ST.poke(k)(v));
      };
  };
  var functorObject = new Data_Functor.Functor(function (f) {
      return function (m) {
          return $foreign["_fmapObject"](m, f);
      };
  });
  var functorWithIndexObject = new Data_FunctorWithIndex.FunctorWithIndex(function () {
      return functorObject;
  }, mapWithKey);
  var fold = $foreign["_foldM"](Data_Function.applyFlipped);
  var foldMap = function (dictMonoid) {
      return function (f) {
          return fold(function (acc) {
              return function (k) {
                  return function (v) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(acc)(f(k)(v));
                  };
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  };
  var foldableObject = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return foldMap(dictMonoid)(Data_Function["const"](f));
      };
  }, function (f) {
      return fold(function (z) {
          return function (v) {
              return f(z);
          };
      });
  }, function (f) {
      return function (z) {
          return function (m) {
              return Data_Foldable.foldr(Data_Foldable.foldableArray)(f)(z)(values(m));
          };
      };
  });
  var foldableWithIndexObject = new Data_FoldableWithIndex.FoldableWithIndex(function () {
      return foldableObject;
  }, function (dictMonoid) {
      return foldMap(dictMonoid);
  }, function (f) {
      return fold(Data_Function.flip(f));
  }, function (f) {
      return function (z) {
          return function (m) {
              return Data_Foldable.foldr(Data_Foldable.foldableArray)(Data_Tuple.uncurry(f))(z)($foreign.toArrayWithKey(Data_Tuple.Tuple.create)(m));
          };
      };
  });
  var traversableWithIndexObject = new Data_TraversableWithIndex.TraversableWithIndex(function () {
      return foldableWithIndexObject;
  }, function () {
      return functorWithIndexObject;
  }, function () {
      return traversableObject;
  }, function (dictApplicative) {
      return function (f) {
          return function (ms) {
              return fold(function (acc) {
                  return function (k) {
                      return function (v) {
                          return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Function.flip(insert(k)))(acc))(f(k)(v));
                      };
                  };
              })(Control_Applicative.pure(dictApplicative)($foreign.empty))(ms);
          };
      };
  });
  var traversableObject = new Data_Traversable.Traversable(function () {
      return foldableObject;
  }, function () {
      return functorObject;
  }, function (dictApplicative) {
      return Data_Traversable.traverse(traversableObject)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
  }, function (dictApplicative) {
      var $52 = Data_TraversableWithIndex.traverseWithIndex(traversableWithIndexObject)(dictApplicative);
      return function ($53) {
          return $52(Data_Function["const"]($53));
      };
  });
  var $$delete = function (k) {
      return mutate(Foreign_Object_ST["delete"](k));
  };
  var alter = function (f) {
      return function (k) {
          return function (m) {
              var v = f(lookup(k)(m));
              if (v instanceof Data_Maybe.Nothing) {
                  return $$delete(k)(m);
              };
              if (v instanceof Data_Maybe.Just) {
                  return insert(k)(v.value0)(m);
              };
              throw new Error("Failed pattern match at Foreign.Object (line 206, column 15 - line 208, column 25): " + [ v.constructor.name ]);
          };
      };
  };
  exports["singleton"] = singleton;
  exports["insert"] = insert;
  exports["lookup"] = lookup;
  exports["alter"] = alter;
  exports["mapWithKey"] = mapWithKey;
  exports["values"] = values;
  exports["fold"] = fold;
  exports["foldMap"] = foldMap;
  exports["thawST"] = thawST;
  exports["functorObject"] = functorObject;
  exports["functorWithIndexObject"] = functorWithIndexObject;
  exports["foldableObject"] = foldableObject;
  exports["foldableWithIndexObject"] = foldableWithIndexObject;
  exports["traversableObject"] = traversableObject;
  exports["traversableWithIndexObject"] = traversableWithIndexObject;
  exports["empty"] = $foreign.empty;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Data.Argonaut.Core"] = $PS["Data.Argonaut.Core"] || {};
  var exports = $PS["Data.Argonaut.Core"];
  var $foreign = $PS["Data.Argonaut.Core"];
  var Data_Function = $PS["Data.Function"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Foreign_Object = $PS["Foreign.Object"];                
  var verbJsonType = function (def) {
      return function (f) {
          return function (g) {
              return g(def)(f);
          };
      };
  };
  var toJsonType = verbJsonType(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
  var jsonSingletonObject = function (key) {
      return function (val) {
          return $foreign.fromObject(Foreign_Object.singleton(key)(val));
      };
  };                                            
  var jsonEmptyObject = $foreign.fromObject(Foreign_Object.empty);
  var isJsonType = verbJsonType(false)(Data_Function["const"](true));
  var caseJsonString = function (d) {
      return function (f) {
          return function (j) {
              return $foreign["_caseJson"](Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), f, Data_Function["const"](d), Data_Function["const"](d), j);
          };
      };
  };                                        
  var toString = toJsonType(caseJsonString);
  var caseJsonObject = function (d) {
      return function (f) {
          return function (j) {
              return $foreign["_caseJson"](Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), f, j);
          };
      };
  };                                        
  var toObject = toJsonType(caseJsonObject);
  var caseJsonNumber = function (d) {
      return function (f) {
          return function (j) {
              return $foreign["_caseJson"](Data_Function["const"](d), Data_Function["const"](d), f, Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), j);
          };
      };
  };                                        
  var caseJsonNull = function (d) {
      return function (f) {
          return function (j) {
              return $foreign["_caseJson"](f, Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), j);
          };
      };
  };
  var isNull = isJsonType(caseJsonNull);      
  var caseJsonArray = function (d) {
      return function (f) {
          return function (j) {
              return $foreign["_caseJson"](Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), f, Data_Function["const"](d), j);
          };
      };
  };                                      
  var toArray = toJsonType(caseJsonArray);
  exports["caseJsonNull"] = caseJsonNull;
  exports["caseJsonNumber"] = caseJsonNumber;
  exports["caseJsonString"] = caseJsonString;
  exports["caseJsonArray"] = caseJsonArray;
  exports["caseJsonObject"] = caseJsonObject;
  exports["isNull"] = isNull;
  exports["toString"] = toString;
  exports["toArray"] = toArray;
  exports["toObject"] = toObject;
  exports["jsonEmptyObject"] = jsonEmptyObject;
  exports["jsonSingletonObject"] = jsonSingletonObject;
  exports["fromBoolean"] = $foreign.fromBoolean;
  exports["fromNumber"] = $foreign.fromNumber;
  exports["fromString"] = $foreign.fromString;
  exports["fromArray"] = $foreign.fromArray;
  exports["fromObject"] = $foreign.fromObject;
  exports["jsonNull"] = $foreign.jsonNull;
  exports["stringify"] = $foreign.stringify;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Data.Boolean"] = $PS["Data.Boolean"] || {};
  var exports = $PS["Data.Boolean"];
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS);
(function(exports) {
  "use strict";

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };

  exports.toNumber = function (n) {
    return n;
  };

  exports.fromStringAsImpl = function (just) {
    return function (nothing) {
      return function (radix) {
        var digits;
        if (radix < 11) {
          digits = "[0-" + (radix - 1).toString() + "]";
        } else if (radix === 11) {
          digits = "[0-9a]";
        } else {
          digits = "[0-9a-" + String.fromCharCode(86 + radix) + "]";
        }
        var pattern = new RegExp("^[\\+\\-]?" + digits + "+$", "i");

        return function (s) {
          /* jshint bitwise: false */
          if (pattern.test(s)) {
            var i = parseInt(s, radix);
            return (i | 0) === i ? just(i) : nothing;
          } else {
            return nothing;
          }
        };
      };
    };
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  "use strict";

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;

  exports.topChar = String.fromCharCode(65535);
  exports.bottomChar = String.fromCharCode(0);
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Data.Bounded"] = $PS["Data.Bounded"] || {};
  var exports = $PS["Data.Bounded"];
  var $foreign = $PS["Data.Bounded"];
  var Data_Ord = $PS["Data.Ord"];                  
  var Bounded = function (Ord0, bottom, top) {
      this.Ord0 = Ord0;
      this.bottom = bottom;
      this.top = top;
  };
  var top = function (dict) {
      return dict.top;
  };                                            
  var boundedInt = new Bounded(function () {
      return Data_Ord.ordInt;
  }, $foreign.bottomInt, $foreign.topInt);
  var boundedChar = new Bounded(function () {
      return Data_Ord.ordChar;
  }, $foreign.bottomChar, $foreign.topChar);
  var bottom = function (dict) {
      return dict.bottom;
  };
  exports["Bounded"] = Bounded;
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["boundedInt"] = boundedInt;
  exports["boundedChar"] = boundedChar;
})(PS);
(function(exports) {
  /* globals exports */
  "use strict";         

  exports.infinity = Infinity;

  exports.readInt = function (radix) {
    return function (n) {
      return parseInt(n, radix);
    };
  };
})(PS["Global"] = PS["Global"] || {});
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Global"] = $PS["Global"] || {};
  var exports = $PS["Global"];
  var $foreign = $PS["Global"];
  exports["infinity"] = $foreign.infinity;
  exports["readInt"] = $foreign.readInt;
})(PS);
(function(exports) {
  "use strict";          

  exports.floor = Math.floor;

  exports.round = Math.round;
})(PS["Math"] = PS["Math"] || {});
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Math"] = $PS["Math"] || {};
  var exports = $PS["Math"];
  var $foreign = $PS["Math"];
  exports["floor"] = $foreign.floor;
  exports["round"] = $foreign.round;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Data.Int"] = $PS["Data.Int"] || {};
  var exports = $PS["Data.Int"];
  var $foreign = $PS["Data.Int"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Global = $PS["Global"];
  var $$Math = $PS["Math"];
  var fromStringAs = $foreign.fromStringAsImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var fromString = fromStringAs(10);
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unsafeClamp = function (x) {
      if (x === Global.infinity) {
          return 0;
      };
      if (x === -Global.infinity) {
          return 0;
      };
      if (x >= $foreign.toNumber(Data_Bounded.top(Data_Bounded.boundedInt))) {
          return Data_Bounded.top(Data_Bounded.boundedInt);
      };
      if (x <= $foreign.toNumber(Data_Bounded.bottom(Data_Bounded.boundedInt))) {
          return Data_Bounded.bottom(Data_Bounded.boundedInt);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.fromMaybe(0)(fromNumber(x));
      };
      throw new Error("Failed pattern match at Data.Int (line 66, column 1 - line 66, column 29): " + [ x.constructor.name ]);
  };
  var round = function ($23) {
      return unsafeClamp($$Math.round($23));
  };
  var floor = function ($24) {
      return unsafeClamp($$Math.floor($24));
  };
  exports["fromNumber"] = fromNumber;
  exports["floor"] = floor;
  exports["round"] = round;
  exports["fromString"] = fromString;
  exports["fromStringAs"] = fromStringAs;
  exports["toNumber"] = $foreign.toNumber;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Data.Argonaut.Decode.Class"] = $PS["Data.Argonaut.Decode.Class"] || {};
  var exports = $PS["Data.Argonaut.Decode.Class"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Argonaut_Core = $PS["Data.Argonaut.Core"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Show = $PS["Data.Show"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_TraversableWithIndex = $PS["Data.TraversableWithIndex"];
  var Foreign_Object = $PS["Foreign.Object"];
  var DecodeJson = function (decodeJson) {
      this.decodeJson = decodeJson;
  };
  var decodeJsonString = new DecodeJson(Data_Argonaut_Core.caseJsonString(new Data_Either.Left("Value is not a String"))(Data_Either.Right.create));
  var decodeJsonNumber = new DecodeJson(Data_Argonaut_Core.caseJsonNumber(new Data_Either.Left("Value is not a Number"))(Data_Either.Right.create));                               
  var decodeJsonJson = new DecodeJson(Data_Either.Right.create);                                                                                       
  var decodeJson = function (dict) {
      return dict.decodeJson;
  }; 
  var decodeJsonInt = new DecodeJson(Control_Bind.composeKleisliFlipped(Data_Either.bindEither)((function () {
      var $62 = Data_Maybe.maybe(new Data_Either.Left("Value is not an integer"))(Data_Either.Right.create);
      return function ($63) {
          return $62(Data_Int.fromNumber($63));
      };
  })())(decodeJson(decodeJsonNumber)));
  var decodeJsonMaybe = function (dictDecodeJson) {
      return new DecodeJson(function (j) {
          if (Data_Argonaut_Core.isNull(j)) {
              return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Maybe.Nothing.value);
          };
          if (Data_Boolean.otherwise) {
              return Data_Functor.map(Data_Either.functorEither)(Data_Maybe.Just.create)(decodeJson(dictDecodeJson)(j));
          };
          throw new Error("Failed pattern match at Data.Argonaut.Decode.Class (line 30, column 1 - line 33, column 40): " + [ j.constructor.name ]);
      });
  };
  var decodeJObject = (function () {
      var $64 = Data_Maybe.maybe(new Data_Either.Left("Value is not an Object"))(Data_Either.Right.create);
      return function ($65) {
          return $64(Data_Argonaut_Core.toObject($65));
      };
  })();
  var decodeJArray = (function () {
      var $66 = Data_Maybe.maybe(new Data_Either.Left("Value is not an Array"))(Data_Either.Right.create);
      return function ($67) {
          return $66(Data_Argonaut_Core.toArray($67));
      };
  })();
  var decodeForeignObject = function (dictDecodeJson) {
      return new DecodeJson((function () {
          var $91 = Data_Bifunctor.lmap(Data_Either.bifunctorEither)(function (v) {
              return "Couldn't decode ForeignObject: " + v;
          });
          var $92 = Control_Bind.composeKleisliFlipped(Data_Either.bindEither)(Data_Traversable.traverse(Foreign_Object.traversableObject)(Data_Either.applicativeEither)(decodeJson(dictDecodeJson)))(decodeJObject);
          return function ($93) {
              return $91($92($93));
          };
      })());
  };
  var decodeArray = function (dictDecodeJson) {
      return new DecodeJson((function () {
          var msg = function (i) {
              return function (m) {
                  return "Failed at index " + (Data_Show.show(Data_Show.showInt)(i) + ("): " + m));
              };
          };
          var f = function (i) {
              var $94 = Data_Bifunctor.lmap(Data_Either.bifunctorEither)(msg(i));
              var $95 = decodeJson(dictDecodeJson);
              return function ($96) {
                  return $94($95($96));
              };
          };
          var $97 = Data_Bifunctor.lmap(Data_Either.bifunctorEither)(function (v) {
              return "Couldn't decode Array (" + v;
          });
          var $98 = Control_Bind.composeKleisliFlipped(Data_Either.bindEither)(Data_TraversableWithIndex.traverseWithIndex(Data_TraversableWithIndex.traversableWithIndexArray)(Data_Either.applicativeEither)(f))(decodeJArray);
          return function ($99) {
              return $97($98($99));
          };
      })());
  };
  exports["decodeJson"] = decodeJson;
  exports["DecodeJson"] = DecodeJson;
  exports["decodeJArray"] = decodeJArray;
  exports["decodeJObject"] = decodeJObject;
  exports["decodeJsonMaybe"] = decodeJsonMaybe;
  exports["decodeJsonNumber"] = decodeJsonNumber;
  exports["decodeJsonInt"] = decodeJsonInt;
  exports["decodeJsonString"] = decodeJsonString;
  exports["decodeJsonJson"] = decodeJsonJson;
  exports["decodeForeignObject"] = decodeForeignObject;
  exports["decodeArray"] = decodeArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Data.Argonaut.Decode.Combinators"] = $PS["Data.Argonaut.Decode.Combinators"] || {};
  var exports = $PS["Data.Argonaut.Decode.Combinators"];
  var Data_Argonaut_Decode_Class = $PS["Data.Argonaut.Decode.Class"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Either = $PS["Data.Either"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Show = $PS["Data.Show"];
  var Foreign_Object = $PS["Foreign.Object"];                
  var elaborateFailure = function (s) {
      return function (e) {
          var msg = function (m) {
              return "Failed to decode key '" + (s + ("': " + m));
          };
          return Data_Bifunctor.lmap(Data_Either.bifunctorEither)(msg)(e);
      };
  };
  var getField = function (dictDecodeJson) {
      return function (o) {
          return function (s) {
              return Data_Maybe.maybe(Data_Either.Left.create("Expected field " + Data_Show.show(Data_Show.showString)(s)))((function () {
                  var $9 = elaborateFailure(s);
                  var $10 = Data_Argonaut_Decode_Class.decodeJson(dictDecodeJson);
                  return function ($11) {
                      return $9($10($11));
                  };
              })())(Foreign_Object.lookup(s)(o));
          };
      };
  };
  exports["getField"] = getField;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Data.Argonaut.Encode.Class"] = $PS["Data.Argonaut.Encode.Class"] || {};
  var exports = $PS["Data.Argonaut.Encode.Class"];
  var Control_Category = $PS["Control.Category"];
  var Data_Argonaut_Core = $PS["Data.Argonaut.Core"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Maybe = $PS["Data.Maybe"];
  var EncodeJson = function (encodeJson) {
      this.encodeJson = encodeJson;
  };                                                                                       
  var encodeJsonJson = new EncodeJson(Control_Category.identity(Control_Category.categoryFn));
  var encodeJsonJString = new EncodeJson(Data_Argonaut_Core.fromString);
  var encodeJsonJBoolean = new EncodeJson(Data_Argonaut_Core.fromBoolean);
  var encodeJsonInt = new EncodeJson(function ($40) {
      return Data_Argonaut_Core.fromNumber(Data_Int.toNumber($40));
  });
  var encodeJson = function (dict) {
      return dict.encodeJson;
  };
  var encodeJsonArray = function (dictEncodeJson) {
      return new EncodeJson(function (json) {
          return Data_Argonaut_Core.fromArray(Data_Functor.map(Data_Functor.functorArray)(encodeJson(dictEncodeJson))(json));
      });
  };
  var encodeJsonMaybe = function (dictEncodeJson) {
      return new EncodeJson(function (v) {
          if (v instanceof Data_Maybe.Nothing) {
              return Data_Argonaut_Core.jsonNull;
          };
          if (v instanceof Data_Maybe.Just) {
              return encodeJson(dictEncodeJson)(v.value0);
          };
          throw new Error("Failed pattern match at Data.Argonaut.Encode.Class (line 29, column 1 - line 31, column 37): " + [ v.constructor.name ]);
      });
  };
  exports["encodeJson"] = encodeJson;
  exports["EncodeJson"] = EncodeJson;
  exports["encodeJsonMaybe"] = encodeJsonMaybe;
  exports["encodeJsonJBoolean"] = encodeJsonJBoolean;
  exports["encodeJsonInt"] = encodeJsonInt;
  exports["encodeJsonJString"] = encodeJsonJString;
  exports["encodeJsonJson"] = encodeJsonJson;
  exports["encodeJsonArray"] = encodeJsonArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Data.Argonaut.Encode.Combinators"] = $PS["Data.Argonaut.Encode.Combinators"] || {};
  var exports = $PS["Data.Argonaut.Encode.Combinators"];
  var Data_Argonaut_Core = $PS["Data.Argonaut.Core"];
  var Data_Argonaut_Encode_Class = $PS["Data.Argonaut.Encode.Class"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Foreign_Object = $PS["Foreign.Object"];                
  var extend = function (dictEncodeJson) {
      return function (v) {
          var $11 = Data_Argonaut_Core.caseJsonObject(Data_Argonaut_Core.jsonSingletonObject(v.value0)(v.value1))((function () {
              var $14 = Foreign_Object.insert(v.value0)(v.value1);
              return function ($15) {
                  return Data_Argonaut_Core.fromObject($14($15));
              };
          })());
          var $12 = Data_Argonaut_Encode_Class.encodeJson(dictEncodeJson);
          return function ($13) {
              return $11($12($13));
          };
      };
  };
  var assoc = function (dictEncodeJson) {
      return function (k) {
          var $16 = Data_Tuple.Tuple.create(k);
          var $17 = Data_Argonaut_Encode_Class.encodeJson(dictEncodeJson);
          return function ($18) {
              return $16($17($18));
          };
      };
  };
  exports["assoc"] = assoc;
  exports["extend"] = extend;
})(PS);
(function(exports) {
  "use strict";

  exports._jsonParser = function (fail, succ, s) {
    try {
      return succ(JSON.parse(s));
    }
    catch (e) {
      return fail(e.message);
    }
  };
})(PS["Data.Argonaut.Parser"] = PS["Data.Argonaut.Parser"] || {});
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Data.Argonaut.Parser"] = $PS["Data.Argonaut.Parser"] || {};
  var exports = $PS["Data.Argonaut.Parser"];
  var $foreign = $PS["Data.Argonaut.Parser"];
  var Data_Either = $PS["Data.Either"];                
  var jsonParser = function (j) {
      return $foreign["_jsonParser"](Data_Either.Left.create, Data_Either.Right.create, j);
  };
  exports["jsonParser"] = jsonParser;
})(PS);
(function(exports) {
  "use strict";

  //------------------------------------------------------------------------------
  // Array creation --------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.range = function (start) {
    return function (end) {
      var step = start > end ? -1 : 1;
      var result = new Array(step * (end - start) + 1);
      var i = start, n = 0;
      while (i !== end) {
        result[n++] = i;
        i += step;
      }
      result[n] = i;
      return result;
    };
  };

  var replicateFill = function (count) {
    return function (value) {
      if (count < 1) {
        return [];
      }
      var result = new Array(count);
      return result.fill(value);
    };
  };

  var replicatePolyfill = function (count) {
    return function (value) {
      var result = [];
      var n = 0;
      for (var i = 0; i < count; i++) {
        result[n++] = value;
      }
      return result;
    };
  };

  // In browsers that have Array.prototype.fill we use it, as it's faster.
  exports.replicate = typeof Array.prototype.fill === "function" ? replicateFill : replicatePolyfill;

  exports.fromFoldableImpl = (function () {
    function Cons(head, tail) {
      this.head = head;
      this.tail = tail;
    }
    var emptyList = {};

    function curryCons(head) {
      return function (tail) {
        return new Cons(head, tail);
      };
    }

    function listToArray(list) {
      var result = [];
      var count = 0;
      var xs = list;
      while (xs !== emptyList) {
        result[count++] = xs.head;
        xs = xs.tail;
      }
      return result;
    }

    return function (foldr) {
      return function (xs) {
        return listToArray(foldr(curryCons)(emptyList)(xs));
      };
    };
  })();

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Extending arrays ------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.cons = function (e) {
    return function (l) {
      return [e].concat(l);
    };
  };

  exports.snoc = function (l) {
    return function (e) {
      var l1 = l.slice();
      l1.push(e);
      return l1;
    };
  };

  //------------------------------------------------------------------------------
  // Non-indexed reads -----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports["uncons'"] = function (empty) {
    return function (next) {
      return function (xs) {
        return xs.length === 0 ? empty({}) : next(xs[0])(xs.slice(1));
      };
    };
  };

  //------------------------------------------------------------------------------
  // Indexed operations ----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.indexImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
        };
      };
    };
  };

  //------------------------------------------------------------------------------
  // Transformations -------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.reverse = function (l) {
    return l.slice().reverse();
  };

  exports.concat = function (xss) {
    if (xss.length <= 10000) {
      // This method is faster, but it crashes on big arrays.
      // So we use it when can and fallback to simple variant otherwise.
      return Array.prototype.concat.apply([], xss);
    }

    var result = [];
    for (var i = 0, l = xss.length; i < l; i++) {
      var xs = xss[i];
      for (var j = 0, m = xs.length; j < m; j++) {
        result.push(xs[j]);
      }
    }
    return result;
  };

  exports.filter = function (f) {
    return function (xs) {
      return xs.filter(f);
    };
  };

  //------------------------------------------------------------------------------
  // Sorting ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.sortImpl = function (f) {
    return function (l) {
      return l.slice().sort(function (x, y) {
        return f(x)(y);
      });
    };
  };

  //------------------------------------------------------------------------------
  // Subarrays -------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.slice = function (s) {
    return function (e) {
      return function (l) {
        return l.slice(s, e);
      };
    };
  };

  exports.take = function (n) {
    return function (l) {
      return n < 1 ? [] : l.slice(0, n);
    };
  };

  exports.drop = function (n) {
    return function (l) {
      return n < 1 ? l : l.slice(n);
    };
  };

  //------------------------------------------------------------------------------
  // Zipping ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.zipWith = function (f) {
    return function (xs) {
      return function (ys) {
        var l = xs.length < ys.length ? xs.length : ys.length;
        var result = new Array(l);
        for (var i = 0; i < l; i++) {
          result[i] = f(xs[i])(ys[i]);
        }
        return result;
      };
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  "use strict";

  exports.empty = function () {
    return [];
  };

  exports.pushAll = function (as) {
    return function (xs) {
      return function () {
        return xs.push.apply(xs, as);
      };
    };
  };
})(PS["Data.Array.ST"] = PS["Data.Array.ST"] || {});
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Data.Array.ST"] = $PS["Data.Array.ST"] || {};
  var exports = $PS["Data.Array.ST"];
  var $foreign = $PS["Data.Array.ST"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Monad_ST_Internal = $PS["Control.Monad.ST.Internal"];
  var unsafeFreeze = (function () {
      var $13 = Control_Applicative.pure(Control_Monad_ST_Internal.applicativeST);
      return function ($14) {
          return $13($14);
      };
  })();
  var push = function (a) {
      return $foreign.pushAll([ a ]);
  };
  exports["push"] = push;
  exports["unsafeFreeze"] = unsafeFreeze;
  exports["empty"] = $foreign.empty;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Data.Array.ST.Iterator"] = $PS["Data.Array.ST.Iterator"] || {};
  var exports = $PS["Data.Array.ST.Iterator"];
  var Control_Monad_ST_Internal = $PS["Control.Monad.ST.Internal"];
  var Data_Array_ST = $PS["Data.Array.ST"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Maybe = $PS["Data.Maybe"];                
  var Iterator = (function () {
      function Iterator(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Iterator.create = function (value0) {
          return function (value1) {
              return new Iterator(value0, value1);
          };
      };
      return Iterator;
  })();
  var peek = function (v) {
      return function __do() {
          var v1 = Control_Monad_ST_Internal.read(v.value1)();
          return v.value0(v1);
      };
  };
  var next = function (v) {
      return function __do() {
          var v1 = Control_Monad_ST_Internal.read(v.value1)();
          var v2 = Control_Monad_ST_Internal.modify(function (v2) {
              return v2 + 1 | 0;
          })(v.value1)();
          return v.value0(v1);
      };
  };
  var pushWhile = function (p) {
      return function (iter) {
          return function (array) {
              return function __do() {
                  var v = Control_Monad_ST_Internal["new"](false)();
                  while (Data_Functor.map(Control_Monad_ST_Internal.functorST)(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean))(Control_Monad_ST_Internal.read(v))()) {
                      (function __do() {
                          var v1 = peek(iter)();
                          if (v1 instanceof Data_Maybe.Just && p(v1.value0)) {
                              var v2 = Data_Array_ST.push(v1.value0)(array)();
                              return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(next(iter))();
                          };
                          return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Control_Monad_ST_Internal.write(true)(v))();
                      })();
                  };
                  return {};
              };
          };
      };
  };                                                    
  var iterator = function (f) {
      return Data_Functor.map(Control_Monad_ST_Internal.functorST)(Iterator.create(f))(Control_Monad_ST_Internal["new"](0));
  };
  var iterate = function (iter) {
      return function (f) {
          return function __do() {
              var v = Control_Monad_ST_Internal["new"](false)();
              while (Data_Functor.map(Control_Monad_ST_Internal.functorST)(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean))(Control_Monad_ST_Internal.read(v))()) {
                  (function __do() {
                      var v1 = next(iter)();
                      if (v1 instanceof Data_Maybe.Just) {
                          return f(v1.value0)();
                      };
                      if (v1 instanceof Data_Maybe.Nothing) {
                          return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Control_Monad_ST_Internal.write(true)(v))();
                      };
                      throw new Error("Failed pattern match at Data.Array.ST.Iterator (line 42, column 5 - line 44, column 47): " + [ v1.constructor.name ]);
                  })();
              };
              return {};
          };
      };
  };
  exports["iterator"] = iterator;
  exports["iterate"] = iterate;
  exports["next"] = next;
  exports["peek"] = peek;
  exports["pushWhile"] = pushWhile;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Data.Array"] = $PS["Data.Array"] || {};
  var exports = $PS["Data.Array"];
  var $foreign = $PS["Data.Array"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad_ST_Internal = $PS["Control.Monad.ST.Internal"];
  var Data_Array_ST = $PS["Data.Array.ST"];
  var Data_Array_ST_Iterator = $PS["Data.Array.ST.Iterator"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var zip = $foreign.zipWith(Data_Tuple.Tuple.create);
  var uncons = $foreign["uncons'"](Data_Function["const"](Data_Maybe.Nothing.value))(function (x) {
      return function (xs) {
          return new Data_Maybe.Just({
              head: x,
              tail: xs
          });
      };
  });
  var sortBy = function (comp) {
      return function (xs) {
          var comp$prime = function (x) {
              return function (y) {
                  var v = comp(x)(y);
                  if (v instanceof Data_Ordering.GT) {
                      return 1;
                  };
                  if (v instanceof Data_Ordering.EQ) {
                      return 0;
                  };
                  if (v instanceof Data_Ordering.LT) {
                      return -1 | 0;
                  };
                  throw new Error("Failed pattern match at Data.Array (line 702, column 15 - line 705, column 13): " + [ v.constructor.name ]);
              };
          };
          return $foreign.sortImpl(comp$prime)(xs);
      };
  };
  var sort = function (dictOrd) {
      return function (xs) {
          return sortBy(Data_Ord.compare(dictOrd))(xs);
      };
  };
  var singleton = function (a) {
      return [ a ];
  };
  var $$null = function (xs) {
      return $foreign.length(xs) === 0;
  };
  var mapWithIndex = function (f) {
      return function (xs) {
          return $foreign.zipWith(f)($foreign.range(0)($foreign.length(xs) - 1 | 0))(xs);
      };
  };                                                                                     
  var init = function (xs) {
      if ($$null(xs)) {
          return Data_Maybe.Nothing.value;
      };
      if (Data_Boolean.otherwise) {
          return new Data_Maybe.Just($foreign.slice(0)($foreign.length(xs) - 1 | 0)(xs));
      };
      throw new Error("Failed pattern match at Data.Array (line 323, column 1 - line 323, column 45): " + [ xs.constructor.name ]);
  };
  var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var last = function (xs) {
      return index(xs)($foreign.length(xs) - 1 | 0);
  };
  var unsnoc = function (xs) {
      return Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
          return function (v1) {
              return {
                  init: v,
                  last: v1
              };
          };
      })(init(xs)))(last(xs));
  };
  var head = function (xs) {
      return index(xs)(0);
  };
  var groupBy = function (op) {
      return function (xs) {
          return (function __do() {
              var v = Data_Array_ST.empty();
              var v1 = Data_Array_ST_Iterator.iterator(function (v1) {
                  return index(xs)(v1);
              })();
              Data_Array_ST_Iterator.iterate(v1)(function (x) {
                  return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(function __do() {
                      var v2 = Data_Array_ST.empty();
                      var v3 = Data_Array_ST.push(x)(v2)();
                      Data_Array_ST_Iterator.pushWhile(op(x))(v1)(v2)();
                      var v4 = Data_Array_ST.unsafeFreeze(v2)();
                      return Data_Array_ST.push(v4)(v)();
                  });
              })();
              return Data_Array_ST.unsafeFreeze(v)();
          })();
      };
  };
  var fromFoldable = function (dictFoldable) {
      return $foreign.fromFoldableImpl(Data_Foldable.foldr(dictFoldable));
  };
  var foldM = function (dictMonad) {
      return function (f) {
          return function (a) {
              return $foreign["uncons'"](function (v) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(a);
              })(function (b) {
                  return function (bs) {
                      return Control_Bind.bind(dictMonad.Bind1())(f(a)(b))(function (a$prime) {
                          return foldM(dictMonad)(f)(a$prime)(bs);
                      });
                  };
              });
          };
      };
  };
  var concatMap = Data_Function.flip(Control_Bind.bind(Control_Bind.bindArray));
  var mapMaybe = function (f) {
      return concatMap((function () {
          var $123 = Data_Maybe.maybe([  ])(singleton);
          return function ($124) {
              return $123(f($124));
          };
      })());
  };
  var filterA = function (dictApplicative) {
      return function (p) {
          var $125 = Data_Functor.map((dictApplicative.Apply0()).Functor0())(mapMaybe(function (v) {
              if (v.value1) {
                  return new Data_Maybe.Just(v.value0);
              };
              return Data_Maybe.Nothing.value;
          }));
          var $126 = Data_Traversable.traverse(Data_Traversable.traversableArray)(dictApplicative)(function (x) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Tuple.Tuple.create(x))(p(x));
          });
          return function ($127) {
              return $125($126($127));
          };
      };
  };
  var catMaybes = mapMaybe(Control_Category.identity(Control_Category.categoryFn));
  exports["fromFoldable"] = fromFoldable;
  exports["singleton"] = singleton;
  exports["null"] = $$null;
  exports["head"] = head;
  exports["last"] = last;
  exports["init"] = init;
  exports["uncons"] = uncons;
  exports["unsnoc"] = unsnoc;
  exports["index"] = index;
  exports["concatMap"] = concatMap;
  exports["filterA"] = filterA;
  exports["mapMaybe"] = mapMaybe;
  exports["catMaybes"] = catMaybes;
  exports["mapWithIndex"] = mapWithIndex;
  exports["sort"] = sort;
  exports["sortBy"] = sortBy;
  exports["groupBy"] = groupBy;
  exports["zip"] = zip;
  exports["foldM"] = foldM;
  exports["range"] = $foreign.range;
  exports["replicate"] = $foreign.replicate;
  exports["length"] = $foreign.length;
  exports["cons"] = $foreign.cons;
  exports["snoc"] = $foreign.snoc;
  exports["reverse"] = $foreign.reverse;
  exports["filter"] = $foreign.filter;
  exports["slice"] = $foreign.slice;
  exports["take"] = $foreign.take;
  exports["drop"] = $foreign.drop;
})(PS);
(function(exports) {
  "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Unsafe.Coerce"] = $PS["Unsafe.Coerce"] || {};
  var exports = $PS["Unsafe.Coerce"];
  var $foreign = $PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Data.Array.NonEmpty"] = $PS["Data.Array.NonEmpty"] || {};
  var exports = $PS["Data.Array.NonEmpty"];
  var Data_Array = $PS["Data.Array"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];         
  var unsafeFromArray = Unsafe_Coerce.unsafeCoerce;
  var toArray = Unsafe_Coerce.unsafeCoerce;
  var fromArray = function (xs) {
      if (Data_Array.length(xs) > 0) {
          return new Data_Maybe.Just(unsafeFromArray(xs));
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at Data.Array.NonEmpty (line 134, column 1 - line 134, column 58): " + [ xs.constructor.name ]);
  };
  var adaptMaybe = function (f) {
      var $64 = Data_Maybe.fromJust();
      return function ($65) {
          return $64(f(toArray($65)));
      };
  };                                     
  var uncons = adaptMaybe(Data_Array.uncons);
  var adaptAny = function (f) {
      return function ($67) {
          return f(toArray($67));
      };
  };                                     
  var length = adaptAny(Data_Array.length);
  exports["fromArray"] = fromArray;
  exports["toArray"] = toArray;
  exports["length"] = length;
  exports["uncons"] = uncons;
})(PS);
(function(exports) {
  "use strict";

  exports.intSub = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x - y | 0;
    };
  };
})(PS["Data.Ring"] = PS["Data.Ring"] || {});
(function(exports) {
  "use strict";

  exports.intAdd = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x + y | 0;
    };
  };

  exports.intMul = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x * y | 0;
    };
  };
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Data.Semiring"] = $PS["Data.Semiring"] || {};
  var exports = $PS["Data.Semiring"];
  var $foreign = $PS["Data.Semiring"];
  var Semiring = function (add, mul, one, zero) {
      this.add = add;
      this.mul = mul;
      this.one = one;
      this.zero = zero;
  };
  var zero = function (dict) {
      return dict.zero;
  };                                                                            
  var semiringInt = new Semiring($foreign.intAdd, $foreign.intMul, 1, 0);
  var one = function (dict) {
      return dict.one;
  };
  var mul = function (dict) {
      return dict.mul;
  };
  var add = function (dict) {
      return dict.add;
  };
  exports["Semiring"] = Semiring;
  exports["add"] = add;
  exports["zero"] = zero;
  exports["mul"] = mul;
  exports["one"] = one;
  exports["semiringInt"] = semiringInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Data.Ring"] = $PS["Data.Ring"] || {};
  var exports = $PS["Data.Ring"];
  var $foreign = $PS["Data.Ring"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Ring = function (Semiring0, sub) {
      this.Semiring0 = Semiring0;
      this.sub = sub;
  };
  var sub = function (dict) {
      return dict.sub;
  };                  
  var ringInt = new Ring(function () {
      return Data_Semiring.semiringInt;
  }, $foreign.intSub);
  exports["Ring"] = Ring;
  exports["sub"] = sub;
  exports["ringInt"] = ringInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Data.CommutativeRing"] = $PS["Data.CommutativeRing"] || {};
  var exports = $PS["Data.CommutativeRing"];
  var Data_Ring = $PS["Data.Ring"];
  var CommutativeRing = function (Ring0) {
      this.Ring0 = Ring0;
  }; 
  var commutativeRingInt = new CommutativeRing(function () {
      return Data_Ring.ringInt;
  });
  exports["CommutativeRing"] = CommutativeRing;
  exports["commutativeRingInt"] = commutativeRingInt;
})(PS);
(function(exports) {
  "use strict";

  exports.toCharCode = function (c) {
    return c.charCodeAt(0);
  };

  exports.fromCharCode = function (c) {
    return String.fromCharCode(c);
  };
})(PS["Data.Enum"] = PS["Data.Enum"] || {});
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Data.Enum"] = $PS["Data.Enum"] || {};
  var exports = $PS["Data.Enum"];
  var $foreign = $PS["Data.Enum"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Enum = function (Ord0, pred, succ) {
      this.Ord0 = Ord0;
      this.pred = pred;
      this.succ = succ;
  };
  var BoundedEnum = function (Bounded0, Enum1, cardinality, fromEnum, toEnum) {
      this.Bounded0 = Bounded0;
      this.Enum1 = Enum1;
      this.cardinality = cardinality;
      this.fromEnum = fromEnum;
      this.toEnum = toEnum;
  };
  var toEnum = function (dict) {
      return dict.toEnum;
  };
  var succ = function (dict) {
      return dict.succ;
  }; 
  var pred = function (dict) {
      return dict.pred;
  };              
  var fromEnum = function (dict) {
      return dict.fromEnum;
  };
  var toEnumWithDefaults = function (dictBoundedEnum) {
      return function (low) {
          return function (high) {
              return function (x) {
                  var v = toEnum(dictBoundedEnum)(x);
                  if (v instanceof Data_Maybe.Just) {
                      return v.value0;
                  };
                  if (v instanceof Data_Maybe.Nothing) {
                      var $54 = x < fromEnum(dictBoundedEnum)(Data_Bounded.bottom(dictBoundedEnum.Bounded0()));
                      if ($54) {
                          return low;
                      };
                      return high;
                  };
                  throw new Error("Failed pattern match at Data.Enum (line 158, column 33 - line 160, column 62): " + [ v.constructor.name ]);
              };
          };
      };
  };
  var defaultSucc = function (toEnum$prime) {
      return function (fromEnum$prime) {
          return function (a) {
              return toEnum$prime(fromEnum$prime(a) + 1 | 0);
          };
      };
  };
  var defaultPred = function (toEnum$prime) {
      return function (fromEnum$prime) {
          return function (a) {
              return toEnum$prime(fromEnum$prime(a) - 1 | 0);
          };
      };
  };
  var charToEnum = function (v) {
      if (v >= Data_Bounded.bottom(Data_Bounded.boundedInt) && v <= Data_Bounded.top(Data_Bounded.boundedInt)) {
          return new Data_Maybe.Just($foreign.fromCharCode(v));
      };
      return Data_Maybe.Nothing.value;
  };
  var enumChar = new Enum(function () {
      return Data_Ord.ordChar;
  }, defaultPred(charToEnum)($foreign.toCharCode), defaultSucc(charToEnum)($foreign.toCharCode));
  var cardinality = function (dict) {
      return dict.cardinality;
  }; 
  var boundedEnumChar = new BoundedEnum(function () {
      return Data_Bounded.boundedChar;
  }, function () {
      return enumChar;
  }, $foreign.toCharCode(Data_Bounded.top(Data_Bounded.boundedChar)) - $foreign.toCharCode(Data_Bounded.bottom(Data_Bounded.boundedChar)) | 0, $foreign.toCharCode, charToEnum);
  exports["Enum"] = Enum;
  exports["succ"] = succ;
  exports["pred"] = pred;
  exports["BoundedEnum"] = BoundedEnum;
  exports["cardinality"] = cardinality;
  exports["toEnum"] = toEnum;
  exports["fromEnum"] = fromEnum;
  exports["toEnumWithDefaults"] = toEnumWithDefaults;
  exports["defaultSucc"] = defaultSucc;
  exports["defaultPred"] = defaultPred;
  exports["enumChar"] = enumChar;
  exports["boundedEnumChar"] = boundedEnumChar;
})(PS);
(function(exports) {
  "use strict";

  exports.intDegree = function (x) {
    return Math.min(Math.abs(x), 2147483647);
  };

  // See the Euclidean definition in
  // https://en.m.wikipedia.org/wiki/Modulo_operation.
  exports.intDiv = function (x) {
    return function (y) {
      if (y === 0) return 0;
      return y > 0 ? Math.floor(x / y) : -Math.floor(x / -y);
    };
  };

  exports.intMod = function (x) {
    return function (y) {
      if (y === 0) return 0;
      var yy = Math.abs(y);
      return ((x % yy) + yy) % yy;
    };
  };
})(PS["Data.EuclideanRing"] = PS["Data.EuclideanRing"] || {});
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Data.EuclideanRing"] = $PS["Data.EuclideanRing"] || {};
  var exports = $PS["Data.EuclideanRing"];
  var $foreign = $PS["Data.EuclideanRing"];
  var Data_CommutativeRing = $PS["Data.CommutativeRing"];  
  var EuclideanRing = function (CommutativeRing0, degree, div, mod) {
      this.CommutativeRing0 = CommutativeRing0;
      this.degree = degree;
      this.div = div;
      this.mod = mod;
  };
  var mod = function (dict) {
      return dict.mod;
  }; 
  var euclideanRingInt = new EuclideanRing(function () {
      return Data_CommutativeRing.commutativeRingInt;
  }, $foreign.intDegree, $foreign.intDiv, $foreign.intMod);
  var div = function (dict) {
      return dict.div;
  };
  var degree = function (dict) {
      return dict.degree;
  };
  exports["EuclideanRing"] = EuclideanRing;
  exports["degree"] = degree;
  exports["div"] = div;
  exports["mod"] = mod;
  exports["euclideanRingInt"] = euclideanRingInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Data.Exists"] = $PS["Data.Exists"] || {};
  var exports = $PS["Data.Exists"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var runExists = Unsafe_Coerce.unsafeCoerce;
  var mkExists = Unsafe_Coerce.unsafeCoerce;
  exports["mkExists"] = mkExists;
  exports["runExists"] = runExists;
})(PS);
(function(exports) {
  "use strict";

  exports.defer = function (thunk) {
    var v = null;
    return function() {
      if (thunk === undefined) return v;

      v = thunk();
      thunk = undefined; // eslint-disable-line no-param-reassign
      return v;
    };
  };

  exports.force = function (l) {
    return l();
  };
})(PS["Data.Lazy"] = PS["Data.Lazy"] || {});
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Data.Lazy"] = $PS["Data.Lazy"] || {};
  var exports = $PS["Data.Lazy"];
  var $foreign = $PS["Data.Lazy"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Functor = $PS["Data.Functor"];
  var functorLazy = new Data_Functor.Functor(function (f) {
      return function (l) {
          return $foreign.defer(function (v) {
              return f($foreign.force(l));
          });
      };
  });
  var applyLazy = new Control_Apply.Apply(function () {
      return functorLazy;
  }, function (f) {
      return function (x) {
          return $foreign.defer(function (v) {
              return $foreign.force(f)($foreign.force(x));
          });
      };
  });
  var bindLazy = new Control_Bind.Bind(function () {
      return applyLazy;
  }, function (l) {
      return function (f) {
          return $foreign.defer(function (v) {
              return $foreign.force(f($foreign.force(l)));
          });
      };
  });
  exports["functorLazy"] = functorLazy;
  exports["applyLazy"] = applyLazy;
  exports["bindLazy"] = bindLazy;
  exports["defer"] = $foreign.defer;
  exports["force"] = $foreign.force;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Data.Function.Memoize"] = $PS["Data.Function.Memoize"] || {};
  var exports = $PS["Data.Function.Memoize"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Lazy = $PS["Data.Lazy"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Tuple = $PS["Data.Tuple"];              
  var NatTrie = (function () {
      function NatTrie(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      NatTrie.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new NatTrie(value0, value1, value2);
              };
          };
      };
      return NatTrie;
  })();
  var Tabulate = function (tabulate) {
      this.tabulate = tabulate;
  }; 
  var tabulateNat = new Tabulate((function () {
      var tabulateImpl = function (f) {
          var walk = function (v) {
              return function (v1) {
                  if (v instanceof Data_List_Types.Nil) {
                      return v1.value0;
                  };
                  if (v instanceof Data_List_Types.Cons && !v.value0) {
                      return Control_Bind.bind(Data_Lazy.bindLazy)(v1.value1)(walk(v.value1));
                  };
                  if (v instanceof Data_List_Types.Cons && v.value0) {
                      return Control_Bind.bind(Data_Lazy.bindLazy)(v1.value2)(walk(v.value1));
                  };
                  throw new Error("Failed pattern match at Data.Function.Memoize (line 137, column 11 - line 137, column 64): " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
          var build = function (n) {
              return new NatTrie(Data_Lazy.defer(function (v) {
                  return f(n);
              }), Data_Lazy.defer(function (v) {
                  return build(n * 2 | 0);
              }), Data_Lazy.defer(function (v) {
                  return build((n * 2 | 0) + 1 | 0);
              }));
          };
          var trie = build(0);
          var bits = (function () {
              var bits$prime = function ($copy_acc) {
                  return function ($copy_v) {
                      var $tco_var_acc = $copy_acc;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(acc, v) {
                          if (v === 0) {
                              $tco_done = true;
                              return acc;
                          };
                          $tco_var_acc = new Data_List_Types.Cons((v & 1) !== 0, acc);
                          $copy_v = v >>> 1;
                          return;
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_acc, $copy_v);
                      };
                      return $tco_result;
                  };
              };
              return bits$prime(Data_List_Types.Nil.value);
          })();
          var go = function (n) {
              return walk(bits(n))(trie);
          };
          return go;
      };
      return tabulateImpl;
  })());
  var tabulate = function (dict) {
      return dict.tabulate;
  };
  var tabulateTuple = function (dictTabulate) {
      return function (dictTabulate1) {
          return new Tabulate(function (f) {
              var f$prime = tabulate(dictTabulate)(function (a) {
                  return tabulate(dictTabulate1)(function (b) {
                      return f(new Data_Tuple.Tuple(a, b));
                  });
              });
              return function (v) {
                  return Control_Bind.bind(Data_Lazy.bindLazy)(f$prime(v.value0))(function (v1) {
                      return v1(v.value1);
                  });
              };
          });
      };
  }; 
  var memoize = function (dictTabulate) {
      return function (f) {
          var f1 = tabulate(dictTabulate)(f);
          return function ($109) {
              return Data_Lazy.force(f1($109));
          };
      };
  };
  var memoize2 = function (dictTabulate) {
      return function (dictTabulate1) {
          return function (f) {
              var f1 = memoize(tabulateTuple(dictTabulate)(dictTabulate1))(Data_Tuple.uncurry(f));
              return Data_Tuple.curry(f1);
          };
      };
  };
  exports["Tabulate"] = Tabulate;
  exports["tabulate"] = tabulate;
  exports["memoize"] = memoize;
  exports["memoize2"] = memoize2;
  exports["tabulateTuple"] = tabulateTuple;
  exports["tabulateNat"] = tabulateNat;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Data.List.NonEmpty"] = $PS["Data.List.NonEmpty"] || {};
  var exports = $PS["Data.List.NonEmpty"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_NonEmpty = $PS["Data.NonEmpty"];
  var singleton = (function () {
      var $168 = Data_NonEmpty.singleton(Data_List_Types.plusList);
      return function ($169) {
          return Data_List_Types.NonEmptyList($168($169));
      };
  })();
  exports["singleton"] = singleton;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Data.Map.Internal"] = $PS["Data.Map.Internal"] || {};
  var exports = $PS["Data.Map.Internal"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];                    
  var Leaf = (function () {
      function Leaf() {

      };
      Leaf.value = new Leaf();
      return Leaf;
  })();
  var Two = (function () {
      function Two(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Two.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Two(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Two;
  })();
  var Three = (function () {
      function Three(value0, value1, value2, value3, value4, value5, value6) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
          this.value6 = value6;
      };
      Three.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return function (value6) {
                                  return new Three(value0, value1, value2, value3, value4, value5, value6);
                              };
                          };
                      };
                  };
              };
          };
      };
      return Three;
  })();
  var TwoLeft = (function () {
      function TwoLeft(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoLeft(value0, value1, value2);
              };
          };
      };
      return TwoLeft;
  })();
  var TwoRight = (function () {
      function TwoRight(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoRight(value0, value1, value2);
              };
          };
      };
      return TwoRight;
  })();
  var ThreeLeft = (function () {
      function ThreeLeft(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeLeft(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeLeft;
  })();
  var ThreeMiddle = (function () {
      function ThreeMiddle(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeMiddle.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeMiddle(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeMiddle;
  })();
  var ThreeRight = (function () {
      function ThreeRight(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeRight(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeRight;
  })();
  var KickUp = (function () {
      function KickUp(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      KickUp.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new KickUp(value0, value1, value2, value3);
                  };
              };
          };
      };
      return KickUp;
  })();
  var lookup = function (dictOrd) {
      return function (k) {
          var comp = Data_Ord.compare(dictOrd);
          var go = function ($copy_v) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v) {
                  if (v instanceof Leaf) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Two) {
                      var v2 = comp(k)(v.value1);
                      if (v2 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      if (v2 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  if (v instanceof Three) {
                      var v3 = comp(k)(v.value1);
                      if (v3 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      var v4 = comp(k)(v.value4);
                      if (v4 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value5);
                      };
                      if (v3 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      if (v4 instanceof Data_Ordering.GT) {
                          $copy_v = v.value6;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 200, column 5 - line 200, column 22): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_v);
              };
              return $tco_result;
          };
          return go;
      };
  };
  var member = function (dictOrd) {
      return function (k) {
          return function (m) {
              return Data_Maybe.isJust(lookup(dictOrd)(k)(m));
          };
      };
  };
  var isEmpty = function (v) {
      if (v instanceof Leaf) {
          return true;
      };
      return false;
  }; 
  var fromZipper = function ($copy_dictOrd) {
      return function ($copy_v) {
          return function ($copy_tree) {
              var $tco_var_dictOrd = $copy_dictOrd;
              var $tco_var_v = $copy_v;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(dictOrd, v, tree) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return tree;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (v.value0 instanceof TwoLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(tree, v.value0.value0, v.value0.value1, v.value0.value2);
                          return;
                      };
                      if (v.value0 instanceof TwoRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(v.value0.value0, v.value0.value1, v.value0.value2, tree);
                          return;
                      };
                      if (v.value0 instanceof ThreeLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(tree, v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeMiddle) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, tree, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5, tree);
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 418, column 3 - line 423, column 88): " + [ v.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 415, column 1 - line 415, column 80): " + [ v.constructor.name, tree.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_dictOrd, $tco_var_v, $copy_tree);
              };
              return $tco_result;
          };
      };
  };
  var insert = function (dictOrd) {
      return function (k) {
          return function (v) {
              var up = function ($copy_v1) {
                  return function ($copy_v2) {
                      var $tco_var_v1 = $copy_v1;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(v1, v2) {
                          if (v1 instanceof Data_List_Types.Nil) {
                              $tco_done = true;
                              return new Two(v2.value0, v2.value1, v2.value2, v2.value3);
                          };
                          if (v1 instanceof Data_List_Types.Cons) {
                              if (v1.value0 instanceof TwoLeft) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v2.value0, v2.value1, v2.value2, v2.value3, v1.value0.value0, v1.value0.value1, v1.value0.value2));
                              };
                              if (v1.value0 instanceof TwoRight) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0, v2.value1, v2.value2, v2.value3));
                              };
                              if (v1.value0 instanceof ThreeLeft) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v2.value0, v2.value1, v2.value2, v2.value3), v1.value0.value0, v1.value0.value1, new Two(v1.value0.value2, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeMiddle) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0), v2.value1, v2.value2, new Two(v2.value3, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeRight) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v1.value0.value3), v1.value0.value4, v1.value0.value5, new Two(v2.value0, v2.value1, v2.value2, v2.value3));
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.Map.Internal (line 454, column 5 - line 459, column 108): " + [ v1.value0.constructor.name, v2.constructor.name ]);
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 451, column 3 - line 451, column 56): " + [ v1.constructor.name, v2.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_v1, $copy_v2);
                      };
                      return $tco_result;
                  };
              };
              var comp = Data_Ord.compare(dictOrd);
              var down = function ($copy_ctx) {
                  return function ($copy_v1) {
                      var $tco_var_ctx = $copy_ctx;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(ctx, v1) {
                          if (v1 instanceof Leaf) {
                              $tco_done = true;
                              return up(ctx)(new KickUp(Leaf.value, k, v, Leaf.value));
                          };
                          if (v1 instanceof Two) {
                              var v2 = comp(k)(v1.value1);
                              if (v2 instanceof Data_Ordering.EQ) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(ctx)(new Two(v1.value0, k, v, v1.value3));
                              };
                              if (v2 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(v1.value1, v1.value2, v1.value3), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(v1.value0, v1.value1, v1.value2), ctx);
                              $copy_v1 = v1.value3;
                              return;
                          };
                          if (v1 instanceof Three) {
                              var v3 = comp(k)(v1.value1);
                              if (v3 instanceof Data_Ordering.EQ) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, k, v, v1.value3, v1.value4, v1.value5, v1.value6));
                              };
                              var v4 = comp(k)(v1.value4);
                              if (v4 instanceof Data_Ordering.EQ) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, v1.value1, v1.value2, v1.value3, k, v, v1.value6));
                              };
                              if (v3 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(v1.value1, v1.value2, v1.value3, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              if (v3 instanceof Data_Ordering.GT && v4 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(v1.value0, v1.value1, v1.value2, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value3;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(v1.value0, v1.value1, v1.value2, v1.value3, v1.value4, v1.value5), ctx);
                              $copy_v1 = v1.value6;
                              return;
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 434, column 3 - line 434, column 55): " + [ ctx.constructor.name, v1.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_ctx, $copy_v1);
                      };
                      return $tco_result;
                  };
              };
              return down(Data_List_Types.Nil.value);
          };
      };
  };
  var empty = Leaf.value;
  exports["empty"] = empty;
  exports["isEmpty"] = isEmpty;
  exports["insert"] = insert;
  exports["lookup"] = lookup;
  exports["member"] = member;
})(PS);
(function(exports) {
  "use strict";

  exports["null"] = null;

  exports.nullable = function (a, r, f) {
    return a == null ? r : f(a);
  };

  exports.notNull = function (x) {
    return x;
  };
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Data.Nullable"] = $PS["Data.Nullable"] || {};
  var exports = $PS["Data.Nullable"];
  var $foreign = $PS["Data.Nullable"];
  var Data_Maybe = $PS["Data.Maybe"];              
  var toNullable = Data_Maybe.maybe($foreign["null"])($foreign.notNull);
  var toMaybe = function (n) {
      return $foreign.nullable(n, Data_Maybe.Nothing.value, Data_Maybe.Just.create);
  };
  exports["toMaybe"] = toMaybe;
  exports["toNullable"] = toNullable;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Data.Posix.Signal"] = $PS["Data.Posix.Signal"] || {};
  var exports = $PS["Data.Posix.Signal"];
  var Data_Maybe = $PS["Data.Maybe"];              
  var SIGABRT = (function () {
      function SIGABRT() {

      };
      SIGABRT.value = new SIGABRT();
      return SIGABRT;
  })();
  var SIGALRM = (function () {
      function SIGALRM() {

      };
      SIGALRM.value = new SIGALRM();
      return SIGALRM;
  })();
  var SIGBUS = (function () {
      function SIGBUS() {

      };
      SIGBUS.value = new SIGBUS();
      return SIGBUS;
  })();
  var SIGCHLD = (function () {
      function SIGCHLD() {

      };
      SIGCHLD.value = new SIGCHLD();
      return SIGCHLD;
  })();
  var SIGCLD = (function () {
      function SIGCLD() {

      };
      SIGCLD.value = new SIGCLD();
      return SIGCLD;
  })();
  var SIGCONT = (function () {
      function SIGCONT() {

      };
      SIGCONT.value = new SIGCONT();
      return SIGCONT;
  })();
  var SIGEMT = (function () {
      function SIGEMT() {

      };
      SIGEMT.value = new SIGEMT();
      return SIGEMT;
  })();
  var SIGFPE = (function () {
      function SIGFPE() {

      };
      SIGFPE.value = new SIGFPE();
      return SIGFPE;
  })();
  var SIGHUP = (function () {
      function SIGHUP() {

      };
      SIGHUP.value = new SIGHUP();
      return SIGHUP;
  })();
  var SIGILL = (function () {
      function SIGILL() {

      };
      SIGILL.value = new SIGILL();
      return SIGILL;
  })();
  var SIGINFO = (function () {
      function SIGINFO() {

      };
      SIGINFO.value = new SIGINFO();
      return SIGINFO;
  })();
  var SIGINT = (function () {
      function SIGINT() {

      };
      SIGINT.value = new SIGINT();
      return SIGINT;
  })();
  var SIGIO = (function () {
      function SIGIO() {

      };
      SIGIO.value = new SIGIO();
      return SIGIO;
  })();
  var SIGIOT = (function () {
      function SIGIOT() {

      };
      SIGIOT.value = new SIGIOT();
      return SIGIOT;
  })();
  var SIGKILL = (function () {
      function SIGKILL() {

      };
      SIGKILL.value = new SIGKILL();
      return SIGKILL;
  })();
  var SIGLOST = (function () {
      function SIGLOST() {

      };
      SIGLOST.value = new SIGLOST();
      return SIGLOST;
  })();
  var SIGPIPE = (function () {
      function SIGPIPE() {

      };
      SIGPIPE.value = new SIGPIPE();
      return SIGPIPE;
  })();
  var SIGPOLL = (function () {
      function SIGPOLL() {

      };
      SIGPOLL.value = new SIGPOLL();
      return SIGPOLL;
  })();
  var SIGPROF = (function () {
      function SIGPROF() {

      };
      SIGPROF.value = new SIGPROF();
      return SIGPROF;
  })();
  var SIGPWR = (function () {
      function SIGPWR() {

      };
      SIGPWR.value = new SIGPWR();
      return SIGPWR;
  })();
  var SIGQUIT = (function () {
      function SIGQUIT() {

      };
      SIGQUIT.value = new SIGQUIT();
      return SIGQUIT;
  })();
  var SIGSEGV = (function () {
      function SIGSEGV() {

      };
      SIGSEGV.value = new SIGSEGV();
      return SIGSEGV;
  })();
  var SIGSTKFLT = (function () {
      function SIGSTKFLT() {

      };
      SIGSTKFLT.value = new SIGSTKFLT();
      return SIGSTKFLT;
  })();
  var SIGSTOP = (function () {
      function SIGSTOP() {

      };
      SIGSTOP.value = new SIGSTOP();
      return SIGSTOP;
  })();
  var SIGSYS = (function () {
      function SIGSYS() {

      };
      SIGSYS.value = new SIGSYS();
      return SIGSYS;
  })();
  var SIGTERM = (function () {
      function SIGTERM() {

      };
      SIGTERM.value = new SIGTERM();
      return SIGTERM;
  })();
  var SIGTRAP = (function () {
      function SIGTRAP() {

      };
      SIGTRAP.value = new SIGTRAP();
      return SIGTRAP;
  })();
  var SIGTSTP = (function () {
      function SIGTSTP() {

      };
      SIGTSTP.value = new SIGTSTP();
      return SIGTSTP;
  })();
  var SIGTTIN = (function () {
      function SIGTTIN() {

      };
      SIGTTIN.value = new SIGTTIN();
      return SIGTTIN;
  })();
  var SIGTTOU = (function () {
      function SIGTTOU() {

      };
      SIGTTOU.value = new SIGTTOU();
      return SIGTTOU;
  })();
  var SIGUNUSED = (function () {
      function SIGUNUSED() {

      };
      SIGUNUSED.value = new SIGUNUSED();
      return SIGUNUSED;
  })();
  var SIGURG = (function () {
      function SIGURG() {

      };
      SIGURG.value = new SIGURG();
      return SIGURG;
  })();
  var SIGUSR1 = (function () {
      function SIGUSR1() {

      };
      SIGUSR1.value = new SIGUSR1();
      return SIGUSR1;
  })();
  var SIGUSR2 = (function () {
      function SIGUSR2() {

      };
      SIGUSR2.value = new SIGUSR2();
      return SIGUSR2;
  })();
  var SIGVTALRM = (function () {
      function SIGVTALRM() {

      };
      SIGVTALRM.value = new SIGVTALRM();
      return SIGVTALRM;
  })();
  var SIGWINCH = (function () {
      function SIGWINCH() {

      };
      SIGWINCH.value = new SIGWINCH();
      return SIGWINCH;
  })();
  var SIGXCPU = (function () {
      function SIGXCPU() {

      };
      SIGXCPU.value = new SIGXCPU();
      return SIGXCPU;
  })();
  var SIGXFSZ = (function () {
      function SIGXFSZ() {

      };
      SIGXFSZ.value = new SIGXFSZ();
      return SIGXFSZ;
  })();                                         
  var fromString = function (s) {
      if (s === "SIGABRT") {
          return new Data_Maybe.Just(SIGABRT.value);
      };
      if (s === "SIGALRM") {
          return new Data_Maybe.Just(SIGALRM.value);
      };
      if (s === "SIGBUS") {
          return new Data_Maybe.Just(SIGBUS.value);
      };
      if (s === "SIGCHLD") {
          return new Data_Maybe.Just(SIGCHLD.value);
      };
      if (s === "SIGCLD") {
          return new Data_Maybe.Just(SIGCLD.value);
      };
      if (s === "SIGCONT") {
          return new Data_Maybe.Just(SIGCONT.value);
      };
      if (s === "SIGEMT") {
          return new Data_Maybe.Just(SIGEMT.value);
      };
      if (s === "SIGFPE") {
          return new Data_Maybe.Just(SIGFPE.value);
      };
      if (s === "SIGHUP") {
          return new Data_Maybe.Just(SIGHUP.value);
      };
      if (s === "SIGILL") {
          return new Data_Maybe.Just(SIGILL.value);
      };
      if (s === "SIGINFO") {
          return new Data_Maybe.Just(SIGINFO.value);
      };
      if (s === "SIGINT") {
          return new Data_Maybe.Just(SIGINT.value);
      };
      if (s === "SIGIO") {
          return new Data_Maybe.Just(SIGIO.value);
      };
      if (s === "SIGIOT") {
          return new Data_Maybe.Just(SIGIOT.value);
      };
      if (s === "SIGKILL") {
          return new Data_Maybe.Just(SIGKILL.value);
      };
      if (s === "SIGLOST") {
          return new Data_Maybe.Just(SIGLOST.value);
      };
      if (s === "SIGPIPE") {
          return new Data_Maybe.Just(SIGPIPE.value);
      };
      if (s === "SIGPOLL") {
          return new Data_Maybe.Just(SIGPOLL.value);
      };
      if (s === "SIGPROF") {
          return new Data_Maybe.Just(SIGPROF.value);
      };
      if (s === "SIGPWR") {
          return new Data_Maybe.Just(SIGPWR.value);
      };
      if (s === "SIGQUIT") {
          return new Data_Maybe.Just(SIGQUIT.value);
      };
      if (s === "SIGSEGV") {
          return new Data_Maybe.Just(SIGSEGV.value);
      };
      if (s === "SIGSTKFLT") {
          return new Data_Maybe.Just(SIGSTKFLT.value);
      };
      if (s === "SIGSTOP") {
          return new Data_Maybe.Just(SIGSTOP.value);
      };
      if (s === "SIGSYS") {
          return new Data_Maybe.Just(SIGSYS.value);
      };
      if (s === "SIGTERM") {
          return new Data_Maybe.Just(SIGTERM.value);
      };
      if (s === "SIGTRAP") {
          return new Data_Maybe.Just(SIGTRAP.value);
      };
      if (s === "SIGTSTP") {
          return new Data_Maybe.Just(SIGTSTP.value);
      };
      if (s === "SIGTTIN") {
          return new Data_Maybe.Just(SIGTTIN.value);
      };
      if (s === "SIGTTOU") {
          return new Data_Maybe.Just(SIGTTOU.value);
      };
      if (s === "SIGUNUSED") {
          return new Data_Maybe.Just(SIGUNUSED.value);
      };
      if (s === "SIGURG") {
          return new Data_Maybe.Just(SIGURG.value);
      };
      if (s === "SIGUSR1") {
          return new Data_Maybe.Just(SIGUSR1.value);
      };
      if (s === "SIGUSR2") {
          return new Data_Maybe.Just(SIGUSR2.value);
      };
      if (s === "SIGVTALRM") {
          return new Data_Maybe.Just(SIGVTALRM.value);
      };
      if (s === "SIGWINCH") {
          return new Data_Maybe.Just(SIGWINCH.value);
      };
      if (s === "SIGXCPU") {
          return new Data_Maybe.Just(SIGXCPU.value);
      };
      if (s === "SIGXFSZ") {
          return new Data_Maybe.Just(SIGXFSZ.value);
      };
      return Data_Maybe.Nothing.value;
  };
  exports["SIGABRT"] = SIGABRT;
  exports["SIGALRM"] = SIGALRM;
  exports["SIGBUS"] = SIGBUS;
  exports["SIGCHLD"] = SIGCHLD;
  exports["SIGCLD"] = SIGCLD;
  exports["SIGCONT"] = SIGCONT;
  exports["SIGEMT"] = SIGEMT;
  exports["SIGFPE"] = SIGFPE;
  exports["SIGHUP"] = SIGHUP;
  exports["SIGILL"] = SIGILL;
  exports["SIGINFO"] = SIGINFO;
  exports["SIGINT"] = SIGINT;
  exports["SIGIO"] = SIGIO;
  exports["SIGIOT"] = SIGIOT;
  exports["SIGKILL"] = SIGKILL;
  exports["SIGLOST"] = SIGLOST;
  exports["SIGPIPE"] = SIGPIPE;
  exports["SIGPOLL"] = SIGPOLL;
  exports["SIGPROF"] = SIGPROF;
  exports["SIGPWR"] = SIGPWR;
  exports["SIGQUIT"] = SIGQUIT;
  exports["SIGSEGV"] = SIGSEGV;
  exports["SIGSTKFLT"] = SIGSTKFLT;
  exports["SIGSTOP"] = SIGSTOP;
  exports["SIGSYS"] = SIGSYS;
  exports["SIGTERM"] = SIGTERM;
  exports["SIGTRAP"] = SIGTRAP;
  exports["SIGTSTP"] = SIGTSTP;
  exports["SIGTTIN"] = SIGTTIN;
  exports["SIGTTOU"] = SIGTTOU;
  exports["SIGUNUSED"] = SIGUNUSED;
  exports["SIGURG"] = SIGURG;
  exports["SIGUSR1"] = SIGUSR1;
  exports["SIGUSR2"] = SIGUSR2;
  exports["SIGVTALRM"] = SIGVTALRM;
  exports["SIGWINCH"] = SIGWINCH;
  exports["SIGXCPU"] = SIGXCPU;
  exports["SIGXFSZ"] = SIGXFSZ;
  exports["fromString"] = fromString;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Data.Set"] = $PS["Data.Set"] || {};
  var exports = $PS["Data.Set"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var member = function (dictOrd) {
      return function (a) {
          return function (v) {
              return Data_Map_Internal.member(dictOrd)(a)(v);
          };
      };
  };
  var isEmpty = function (v) {
      return Data_Map_Internal.isEmpty(v);
  }; 
  var empty = Data_Map_Internal.empty;
  exports["empty"] = empty;
  exports["isEmpty"] = isEmpty;
  exports["member"] = member;
})(PS);
(function(exports) {
  "use strict";
  /* global Symbol */

  var hasArrayFrom = typeof Array.from === "function";
  var hasStringIterator =
    typeof Symbol !== "undefined" &&
    Symbol != null &&
    typeof Symbol.iterator !== "undefined" &&
    typeof String.prototype[Symbol.iterator] === "function";
  var hasFromCodePoint = typeof String.prototype.fromCodePoint === "function";
  var hasCodePointAt = typeof String.prototype.codePointAt === "function";

  exports._unsafeCodePointAt0 = function (fallback) {
    return hasCodePointAt
      ? function (str) { return str.codePointAt(0); }
      : fallback;
  };

  exports._codePointAt = function (fallback) {
    return function (Just) {
      return function (Nothing) {
        return function (unsafeCodePointAt0) {
          return function (index) {
            return function (str) {
              var length = str.length;
              if (index < 0 || index >= length) return Nothing;
              if (hasStringIterator) {
                var iter = str[Symbol.iterator]();
                for (var i = index;; --i) {
                  var o = iter.next();
                  if (o.done) return Nothing;
                  if (i === 0) return Just(unsafeCodePointAt0(o.value));
                }
              }
              return fallback(index)(str);
            };
          };
        };
      };
    };
  };

  exports._countPrefix = function (fallback) {
    return function (unsafeCodePointAt0) {
      if (hasStringIterator) {
        return function (pred) {
          return function (str) {
            var iter = str[Symbol.iterator]();
            for (var cpCount = 0; ; ++cpCount) {
              var o = iter.next();
              if (o.done) return cpCount;
              var cp = unsafeCodePointAt0(o.value);
              if (!pred(cp)) return cpCount;
            }
          };
        };
      }
      return fallback;
    };
  };

  exports._singleton = function (fallback) {
    return hasFromCodePoint ? String.fromCodePoint : fallback;
  };

  exports._take = function (fallback) {
    return function (n) {
      if (hasStringIterator) {
        return function (str) {
          var accum = "";
          var iter = str[Symbol.iterator]();
          for (var i = 0; i < n; ++i) {
            var o = iter.next();
            if (o.done) return accum;
            accum += o.value;
          }
          return accum;
        };
      }
      return fallback(n);
    };
  };

  exports._toCodePointArray = function (fallback) {
    return function (unsafeCodePointAt0) {
      if (hasArrayFrom) {
        return function (str) {
          return Array.from(str, unsafeCodePointAt0);
        };
      }
      return fallback;
    };
  };
})(PS["Data.String.CodePoints"] = PS["Data.String.CodePoints"] || {});
(function(exports) {
  "use strict";

  exports.fromCharArray = function (a) {
    return a.join("");
  };

  exports.toCharArray = function (s) {
    return s.split("");
  };

  exports.singleton = function (c) {
    return c;
  };

  exports.length = function (s) {
    return s.length;
  };

  exports._indexOf = function (just) {
    return function (nothing) {
      return function (x) {
        return function (s) {
          var i = s.indexOf(x);
          return i === -1 ? nothing : just(i);
        };
      };
    };
  };

  exports._lastIndexOf = function (just) {
    return function (nothing) {
      return function (x) {
        return function (s) {
          var i = s.lastIndexOf(x);
          return i === -1 ? nothing : just(i);
        };
      };
    };
  };

  exports.take = function (n) {
    return function (s) {
      return s.substr(0, n);
    };
  };

  exports.drop = function (n) {
    return function (s) {
      return s.substring(n);
    };
  };
})(PS["Data.String.CodeUnits"] = PS["Data.String.CodeUnits"] || {});
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Data.String.CodeUnits"] = $PS["Data.String.CodeUnits"] || {};
  var exports = $PS["Data.String.CodeUnits"];
  var $foreign = $PS["Data.String.CodeUnits"];
  var Data_Maybe = $PS["Data.Maybe"];                                                                 
  var lastIndexOf = $foreign["_lastIndexOf"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var indexOf = $foreign["_indexOf"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["indexOf"] = indexOf;
  exports["lastIndexOf"] = lastIndexOf;
  exports["singleton"] = $foreign.singleton;
  exports["fromCharArray"] = $foreign.fromCharArray;
  exports["toCharArray"] = $foreign.toCharArray;
  exports["length"] = $foreign.length;
  exports["take"] = $foreign.take;
  exports["drop"] = $foreign.drop;
})(PS);
(function(exports) {
  "use strict";

  exports.charAt = function (i) {
    return function (s) {
      if (i >= 0 && i < s.length) return s.charAt(i);
      throw new Error("Data.String.Unsafe.charAt: Invalid index.");
    };
  };
})(PS["Data.String.Unsafe"] = PS["Data.String.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Data.String.Unsafe"] = $PS["Data.String.Unsafe"] || {};
  var exports = $PS["Data.String.Unsafe"];
  var $foreign = $PS["Data.String.Unsafe"];
  exports["charAt"] = $foreign.charAt;
})(PS);
(function(exports) {
  "use strict";

  exports.unfoldrArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var maybe = f(value);
                if (isNothing(maybe)) return result;
                var tuple = fromJust(maybe);
                result.push(fst(tuple));
                value = snd(tuple);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable"] = PS["Data.Unfoldable"] || {});
(function(exports) {
  "use strict";

  exports.unfoldr1ArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var tuple = f(value);
                result.push(fst(tuple));
                var maybe = snd(tuple);
                if (isNothing(maybe)) return result;
                value = fromJust(maybe);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable1"] = PS["Data.Unfoldable1"] || {});
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Data.Unfoldable1"] = $PS["Data.Unfoldable1"] || {};
  var exports = $PS["Data.Unfoldable1"];
  var $foreign = $PS["Data.Unfoldable1"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var Unfoldable1 = function (unfoldr1) {
      this.unfoldr1 = unfoldr1;
  };
  var unfoldr1 = function (dict) {
      return dict.unfoldr1;
  };
  var unfoldable1Array = new Unfoldable1($foreign.unfoldr1ArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));
  exports["Unfoldable1"] = Unfoldable1;
  exports["unfoldr1"] = unfoldr1;
  exports["unfoldable1Array"] = unfoldable1Array;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Data.Unfoldable"] = $PS["Data.Unfoldable"] || {};
  var exports = $PS["Data.Unfoldable"];
  var $foreign = $PS["Data.Unfoldable"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable1 = $PS["Data.Unfoldable1"];  
  var Unfoldable = function (Unfoldable10, unfoldr) {
      this.Unfoldable10 = Unfoldable10;
      this.unfoldr = unfoldr;
  };
  var unfoldr = function (dict) {
      return dict.unfoldr;
  };
  var unfoldableArray = new Unfoldable(function () {
      return Data_Unfoldable1.unfoldable1Array;
  }, $foreign.unfoldrArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));
  exports["Unfoldable"] = Unfoldable;
  exports["unfoldr"] = unfoldr;
  exports["unfoldableArray"] = unfoldableArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Data.String.CodePoints"] = $PS["Data.String.CodePoints"] || {};
  var exports = $PS["Data.String.CodePoints"];
  var $foreign = $PS["Data.String.CodePoints"];
  var Data_Array = $PS["Data.Array"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_String_Unsafe = $PS["Data.String.Unsafe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];                
  var CodePoint = function (x) {
      return x;
  };
  var unsurrogate = function (lead) {
      return function (trail) {
          return (((lead - 55296 | 0) * 1024 | 0) + (trail - 56320 | 0) | 0) + 65536 | 0;
      };
  }; 
  var isTrail = function (cu) {
      return 56320 <= cu && cu <= 57343;
  };
  var isLead = function (cu) {
      return 55296 <= cu && cu <= 56319;
  };
  var uncons = function (s) {
      var v = Data_String_CodeUnits.length(s);
      if (v === 0) {
          return Data_Maybe.Nothing.value;
      };
      if (v === 1) {
          return new Data_Maybe.Just({
              head: Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s)),
              tail: ""
          });
      };
      var cu1 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(1)(s));
      var cu0 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s));
      var $21 = isLead(cu0) && isTrail(cu1);
      if ($21) {
          return new Data_Maybe.Just({
              head: unsurrogate(cu0)(cu1),
              tail: Data_String_CodeUnits.drop(2)(s)
          });
      };
      return new Data_Maybe.Just({
          head: cu0,
          tail: Data_String_CodeUnits.drop(1)(s)
      });
  };
  var unconsButWithTuple = function (s) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
          return new Data_Tuple.Tuple(v.head, v.tail);
      })(uncons(s));
  };
  var toCodePointArrayFallback = function (s) {
      return Data_Unfoldable.unfoldr(Data_Unfoldable.unfoldableArray)(unconsButWithTuple)(s);
  };
  var unsafeCodePointAt0Fallback = function (s) {
      var cu0 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s));
      var $25 = isLead(cu0) && Data_String_CodeUnits.length(s) > 1;
      if ($25) {
          var cu1 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(1)(s));
          var $26 = isTrail(cu1);
          if ($26) {
              return unsurrogate(cu0)(cu1);
          };
          return cu0;
      };
      return cu0;
  };
  var unsafeCodePointAt0 = $foreign["_unsafeCodePointAt0"](unsafeCodePointAt0Fallback);
  var toCodePointArray = $foreign["_toCodePointArray"](toCodePointArrayFallback)(unsafeCodePointAt0);
  var length = function ($52) {
      return Data_Array.length(toCodePointArray($52));
  };
  var lastIndexOf = function (p) {
      return function (s) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(function (i) {
              return length(Data_String_CodeUnits.take(i)(s));
          })(Data_String_CodeUnits.lastIndexOf(p)(s));
      };
  };
  var indexOf = function (p) {
      return function (s) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(function (i) {
              return length(Data_String_CodeUnits.take(i)(s));
          })(Data_String_CodeUnits.indexOf(p)(s));
      };
  };
  var fromCharCode = (function () {
      var $53 = Data_Enum.toEnumWithDefaults(Data_Enum.boundedEnumChar)(Data_Bounded.bottom(Data_Bounded.boundedChar))(Data_Bounded.top(Data_Bounded.boundedChar));
      return function ($54) {
          return Data_String_CodeUnits.singleton($53($54));
      };
  })();
  var singletonFallback = function (v) {
      if (v <= 65535) {
          return fromCharCode(v);
      };
      var lead = Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(v - 65536 | 0)(1024) + 55296 | 0;
      var trail = Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(v - 65536 | 0)(1024) + 56320 | 0;
      return fromCharCode(lead) + fromCharCode(trail);
  };                                                                          
  var singleton = $foreign["_singleton"](singletonFallback);
  var takeFallback = function (n) {
      return function (v) {
          if (n < 1) {
              return "";
          };
          var v1 = uncons(v);
          if (v1 instanceof Data_Maybe.Just) {
              return singleton(v1.value0.head) + takeFallback(n - 1 | 0)(v1.value0.tail);
          };
          return v;
      };
  };
  var take = $foreign["_take"](takeFallback);
  var eqCodePoint = new Data_Eq.Eq(function (x) {
      return function (y) {
          return x === y;
      };
  });
  var drop = function (n) {
      return function (s) {
          return Data_String_CodeUnits.drop(Data_String_CodeUnits.length(take(n)(s)))(s);
      };
  };
  var countTail = function ($copy_p) {
      return function ($copy_s) {
          return function ($copy_accum) {
              var $tco_var_p = $copy_p;
              var $tco_var_s = $copy_s;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(p, s, accum) {
                  var v = uncons(s);
                  if (v instanceof Data_Maybe.Just) {
                      var $39 = p(v.value0.head);
                      if ($39) {
                          $tco_var_p = p;
                          $tco_var_s = v.value0.tail;
                          $copy_accum = accum + 1 | 0;
                          return;
                      };
                      $tco_done = true;
                      return accum;
                  };
                  $tco_done = true;
                  return accum;
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_p, $tco_var_s, $copy_accum);
              };
              return $tco_result;
          };
      };
  };
  var countFallback = function (p) {
      return function (s) {
          return countTail(p)(s)(0);
      };
  };
  var countPrefix = $foreign["_countPrefix"](countFallback)(unsafeCodePointAt0);
  var takeWhile = function (p) {
      return function (s) {
          return take(countPrefix(p)(s))(s);
      };
  };
  var codePointFromChar = (function () {
      var $55 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar);
      return function ($56) {
          return CodePoint($55($56));
      };
  })();
  var codePointAtFallback = function ($copy_n) {
      return function ($copy_s) {
          var $tco_var_n = $copy_n;
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(n, s) {
              var v = uncons(s);
              if (v instanceof Data_Maybe.Just) {
                  var $44 = n === 0;
                  if ($44) {
                      $tco_done = true;
                      return new Data_Maybe.Just(v.value0.head);
                  };
                  $tco_var_n = n - 1 | 0;
                  $copy_s = v.value0.tail;
                  return;
              };
              $tco_done = true;
              return Data_Maybe.Nothing.value;
          };
          while (!$tco_done) {
              $tco_result = $tco_loop($tco_var_n, $copy_s);
          };
          return $tco_result;
      };
  };
  var codePointAt = function (v) {
      return function (v1) {
          if (v < 0) {
              return Data_Maybe.Nothing.value;
          };
          if (v === 0 && v1 === "") {
              return Data_Maybe.Nothing.value;
          };
          if (v === 0) {
              return new Data_Maybe.Just(unsafeCodePointAt0(v1));
          };
          return $foreign["_codePointAt"](codePointAtFallback)(Data_Maybe.Just.create)(Data_Maybe.Nothing.value)(unsafeCodePointAt0)(v)(v1);
      };
  };
  exports["codePointFromChar"] = codePointFromChar;
  exports["singleton"] = singleton;
  exports["toCodePointArray"] = toCodePointArray;
  exports["codePointAt"] = codePointAt;
  exports["uncons"] = uncons;
  exports["length"] = length;
  exports["countPrefix"] = countPrefix;
  exports["indexOf"] = indexOf;
  exports["lastIndexOf"] = lastIndexOf;
  exports["take"] = take;
  exports["takeWhile"] = takeWhile;
  exports["drop"] = drop;
  exports["eqCodePoint"] = eqCodePoint;
})(PS);
(function(exports) {
  "use strict";

  exports.split = function (sep) {
    return function (s) {
      return s.split(sep);
    };
  };

  exports.trim = function (s) {
    return s.trim();
  };

  exports.joinWith = function (s) {
    return function (xs) {
      return xs.join(s);
    };
  };
})(PS["Data.String.Common"] = PS["Data.String.Common"] || {});
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Data.String.Common"] = $PS["Data.String.Common"] || {};
  var exports = $PS["Data.String.Common"];
  var $foreign = $PS["Data.String.Common"];                
  var $$null = function (s) {
      return s === "";
  };
  exports["null"] = $$null;
  exports["split"] = $foreign.split;
  exports["trim"] = $foreign.trim;
  exports["joinWith"] = $foreign.joinWith;
})(PS);
(function(exports) {
  "use strict";

  exports["regex'"] = function (left) {
    return function (right) {
      return function (s1) {
        return function (s2) {
          try {
            return right(new RegExp(s1, s2));
          } catch (e) {
            return left(e.message);
          }
        };
      };
    };
  };

  exports.test = function (r) {
    return function (s) {
      var lastIndex = r.lastIndex;
      var result = r.test(s);
      r.lastIndex = lastIndex;
      return result;
    };
  };

  exports.replace = function (r) {
    return function (s1) {
      return function (s2) {
        return s2.replace(r, s1);
      };
    };
  };

  exports.split = function (r) {
    return function (s) {
      return s.split(r);
    };
  };
})(PS["Data.String.Regex"] = PS["Data.String.Regex"] || {});
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Data.String.Regex"] = $PS["Data.String.Regex"] || {};
  var exports = $PS["Data.String.Regex"];
  var $foreign = $PS["Data.String.Regex"];
  var Data_Either = $PS["Data.Either"];                                              
  var renderFlags = function (v) {
      return (function () {
          if (v.value0.global) {
              return "g";
          };
          return "";
      })() + ((function () {
          if (v.value0.ignoreCase) {
              return "i";
          };
          return "";
      })() + ((function () {
          if (v.value0.multiline) {
              return "m";
          };
          return "";
      })() + ((function () {
          if (v.value0.sticky) {
              return "y";
          };
          return "";
      })() + (function () {
          if (v.value0.unicode) {
              return "u";
          };
          return "";
      })())));
  };
  var regex = function (s) {
      return function (f) {
          return $foreign["regex'"](Data_Either.Left.create)(Data_Either.Right.create)(s)(renderFlags(f));
      };
  };
  exports["regex"] = regex;
  exports["renderFlags"] = renderFlags;
  exports["test"] = $foreign.test;
  exports["replace"] = $foreign.replace;
  exports["split"] = $foreign.split;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Data.String.Regex.Flags"] = $PS["Data.String.Regex.Flags"] || {};
  var exports = $PS["Data.String.Regex.Flags"];                      
  var RegexFlags = (function () {
      function RegexFlags(value0) {
          this.value0 = value0;
      };
      RegexFlags.create = function (value0) {
          return new RegexFlags(value0);
      };
      return RegexFlags;
  })();
  var noFlags = new RegexFlags({
      global: false,
      ignoreCase: false,
      multiline: false,
      sticky: false,
      unicode: false
  });
  var global = new RegexFlags({
      global: true,
      ignoreCase: false,
      multiline: false,
      sticky: false,
      unicode: false
  });
  exports["RegexFlags"] = RegexFlags;
  exports["noFlags"] = noFlags;
  exports["global"] = global;
})(PS);
(function(exports) {
  /* globals setImmediate, clearImmediate, setTimeout, clearTimeout */
  /* jshint -W083, -W098, -W003 */
  "use strict";

  var Aff = function () {
    // A unique value for empty.
    var EMPTY = {};

    /*

  An awkward approximation. We elide evidence we would otherwise need in PS for
  efficiency sake.

  data Aff eff a
    = Pure a
    | Throw Error
    | Catch (Aff eff a) (Error -> Aff eff a)
    | Sync (Eff eff a)
    | Async ((Either Error a -> Eff eff Unit) -> Eff eff (Canceler eff))
    | forall b. Bind (Aff eff b) (b -> Aff eff a)
    | forall b. Bracket (Aff eff b) (BracketConditions eff b) (b -> Aff eff a)
    | forall b. Fork Boolean (Aff eff b) ?(Fiber eff b -> a)
    | Sequential (ParAff aff a)

  */  
    var PURE    = "Pure";
    var THROW   = "Throw";
    var CATCH   = "Catch";
    var SYNC    = "Sync";
    var ASYNC   = "Async";
    var BIND    = "Bind";
    var BRACKET = "Bracket";
    var FORK    = "Fork";
    var SEQ     = "Sequential";

    /*

  data ParAff eff a
    = forall b. Map (b -> a) (ParAff eff b)
    | forall b. Apply (ParAff eff (b -> a)) (ParAff eff b)
    | Alt (ParAff eff a) (ParAff eff a)
    | ?Par (Aff eff a)

  */  
    var MAP   = "Map";
    var APPLY = "Apply";
    var ALT   = "Alt";

    // Various constructors used in interpretation
    var CONS      = "Cons";      // Cons-list, for stacks
    var RESUME    = "Resume";    // Continue indiscriminately
    var RELEASE   = "Release";   // Continue with bracket finalizers
    var FINALIZER = "Finalizer"; // A non-interruptible effect
    var FINALIZED = "Finalized"; // Marker for finalization
    var FORKED    = "Forked";    // Reference to a forked fiber, with resumption stack
    var FIBER     = "Fiber";     // Actual fiber reference
    var THUNK     = "Thunk";     // Primed effect, ready to invoke

    function Aff(tag, _1, _2, _3) {
      this.tag = tag;
      this._1  = _1;
      this._2  = _2;
      this._3  = _3;
    }

    function AffCtr(tag) {
      var fn = function (_1, _2, _3) {
        return new Aff(tag, _1, _2, _3);
      };
      fn.tag = tag;
      return fn;
    }

    function nonCanceler(error) {
      return new Aff(PURE, void 0);
    }

    function runEff(eff) {
      try {
        eff();
      } catch (error) {
        setTimeout(function () {
          throw error;
        }, 0);
      }
    }

    function runSync(left, right, eff) {
      try {
        return right(eff());
      } catch (error) {
        return left(error);
      }
    }

    function runAsync(left, eff, k) {
      try {
        return eff(k)();
      } catch (error) {
        k(left(error))();
        return nonCanceler;
      }
    }

    var Scheduler = function () {
      var limit    = 1024;
      var size     = 0;
      var ix       = 0;
      var queue    = new Array(limit);
      var draining = false;

      function drain() {
        var thunk;
        draining = true;
        while (size !== 0) {
          size--;
          thunk     = queue[ix];
          queue[ix] = void 0;
          ix        = (ix + 1) % limit;
          thunk();
        }
        draining = false;
      }

      return {
        isDraining: function () {
          return draining;
        },
        enqueue: function (cb) {
          var i, tmp;
          if (size === limit) {
            tmp = draining;
            drain();
            draining = tmp;
          }

          queue[(ix + size) % limit] = cb;
          size++;

          if (!draining) {
            drain();
          }
        }
      };
    }();

    function Supervisor(util) {
      var fibers  = {};
      var fiberId = 0;
      var count   = 0;

      return {
        register: function (fiber) {
          var fid = fiberId++;
          fiber.onComplete({
            rethrow: true,
            handler: function (result) {
              return function () {
                count--;
                delete fibers[fid];
              };
            }
          });
          fibers[fid] = fiber;
          count++;
        },
        isEmpty: function () {
          return count === 0;
        },
        killAll: function (killError, cb) {
          return function () {
            if (count === 0) {
              return cb();
            }

            var killCount = 0;
            var kills     = {};

            function kill(fid) {
              kills[fid] = fibers[fid].kill(killError, function (result) {
                return function () {
                  delete kills[fid];
                  killCount--;
                  if (util.isLeft(result) && util.fromLeft(result)) {
                    setTimeout(function () {
                      throw util.fromLeft(result);
                    }, 0);
                  }
                  if (killCount === 0) {
                    cb();
                  }
                };
              })();
            }

            for (var k in fibers) {
              if (fibers.hasOwnProperty(k)) {
                killCount++;
                kill(k);
              }
            }

            fibers  = {};
            fiberId = 0;
            count   = 0;

            return function (error) {
              return new Aff(SYNC, function () {
                for (var k in kills) {
                  if (kills.hasOwnProperty(k)) {
                    kills[k]();
                  }
                }
              });
            };
          };
        }
      };
    }

    // Fiber state machine
    var SUSPENDED   = 0; // Suspended, pending a join.
    var CONTINUE    = 1; // Interpret the next instruction.
    var STEP_BIND   = 2; // Apply the next bind.
    var STEP_RESULT = 3; // Handle potential failure from a result.
    var PENDING     = 4; // An async effect is running.
    var RETURN      = 5; // The current stack has returned.
    var COMPLETED   = 6; // The entire fiber has completed.

    function Fiber(util, supervisor, aff) {
      // Monotonically increasing tick, increased on each asynchronous turn.
      var runTick = 0;

      // The current branch of the state machine.
      var status = SUSPENDED;

      // The current point of interest for the state machine branch.
      var step      = aff;  // Successful step
      var fail      = null; // Failure step
      var interrupt = null; // Asynchronous interrupt

      // Stack of continuations for the current fiber.
      var bhead = null;
      var btail = null;

      // Stack of attempts and finalizers for error recovery. Every `Cons` is also
      // tagged with current `interrupt` state. We use this to track which items
      // should be ignored or evaluated as a result of a kill.
      var attempts = null;

      // A special state is needed for Bracket, because it cannot be killed. When
      // we enter a bracket acquisition or finalizer, we increment the counter,
      // and then decrement once complete.
      var bracketCount = 0;

      // Each join gets a new id so they can be revoked.
      var joinId  = 0;
      var joins   = null;
      var rethrow = true;

      // Each invocation of `run` requires a tick. When an asynchronous effect is
      // resolved, we must check that the local tick coincides with the fiber
      // tick before resuming. This prevents multiple async continuations from
      // accidentally resuming the same fiber. A common example may be invoking
      // the provided callback in `makeAff` more than once, but it may also be an
      // async effect resuming after the fiber was already cancelled.
      function run(localRunTick) {
        var tmp, result, attempt;
        while (true) {
          tmp       = null;
          result    = null;
          attempt   = null;

          switch (status) {
          case STEP_BIND:
            status = CONTINUE;
            step   = bhead(step);
            if (btail === null) {
              bhead = null;
            } else {
              bhead = btail._1;
              btail = btail._2;
            }
            break;

          case STEP_RESULT:
            if (util.isLeft(step)) {
              status = RETURN;
              fail   = step;
              step   = null;
            } else if (bhead === null) {
              status = RETURN;
            } else {
              status = STEP_BIND;
              step   = util.fromRight(step);
            }
            break;

          case CONTINUE:
            switch (step.tag) {
            case BIND:
              if (bhead) {
                btail = new Aff(CONS, bhead, btail);
              }
              bhead  = step._2;
              status = CONTINUE;
              step   = step._1;
              break;

            case PURE:
              if (bhead === null) {
                status = RETURN;
                step   = util.right(step._1);
              } else {
                status = STEP_BIND;
                step   = step._1;
              }
              break;

            case SYNC:
              status = STEP_RESULT;
              step   = runSync(util.left, util.right, step._1);
              break;

            case ASYNC:
              status = PENDING;
              step   = runAsync(util.left, step._1, function (result) {
                return function () {
                  if (runTick !== localRunTick) {
                    return;
                  }
                  runTick++;
                  Scheduler.enqueue(function () {
                    // It's possible to interrupt the fiber between enqueuing and
                    // resuming, so we need to check that the runTick is still
                    // valid.
                    if (runTick !== localRunTick + 1) {
                      return;
                    }
                    status = STEP_RESULT;
                    step   = result;
                    run(runTick);
                  });
                };
              });
              return;

            case THROW:
              status = RETURN;
              fail   = util.left(step._1);
              step   = null;
              break;

            // Enqueue the Catch so that we can call the error handler later on
            // in case of an exception.
            case CATCH:
              if (bhead === null) {
                attempts = new Aff(CONS, step, attempts, interrupt);
              } else {
                attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
              }
              bhead    = null;
              btail    = null;
              status   = CONTINUE;
              step     = step._1;
              break;

            // Enqueue the Bracket so that we can call the appropriate handlers
            // after resource acquisition.
            case BRACKET:
              bracketCount++;
              if (bhead === null) {
                attempts = new Aff(CONS, step, attempts, interrupt);
              } else {
                attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
              }
              bhead  = null;
              btail  = null;
              status = CONTINUE;
              step   = step._1;
              break;

            case FORK:
              status = STEP_RESULT;
              tmp    = Fiber(util, supervisor, step._2);
              if (supervisor) {
                supervisor.register(tmp);
              }
              if (step._1) {
                tmp.run();
              }
              step = util.right(tmp);
              break;

            case SEQ:
              status = CONTINUE;
              step   = sequential(util, supervisor, step._1);
              break;
            }
            break;

          case RETURN:
            bhead = null;
            btail = null;
            // If the current stack has returned, and we have no other stacks to
            // resume or finalizers to run, the fiber has halted and we can
            // invoke all join callbacks. Otherwise we need to resume.
            if (attempts === null) {
              status = COMPLETED;
              step   = interrupt || fail || step;
            } else {
              // The interrupt status for the enqueued item.
              tmp      = attempts._3;
              attempt  = attempts._1;
              attempts = attempts._2;

              switch (attempt.tag) {
              // We cannot recover from an unmasked interrupt. Otherwise we should
              // continue stepping, or run the exception handler if an exception
              // was raised.
              case CATCH:
                // We should compare the interrupt status as well because we
                // only want it to apply if there has been an interrupt since
                // enqueuing the catch.
                if (interrupt && interrupt !== tmp && bracketCount === 0) {
                  status = RETURN;
                } else if (fail) {
                  status = CONTINUE;
                  step   = attempt._2(util.fromLeft(fail));
                  fail   = null;
                }
                break;

              // We cannot resume from an unmasked interrupt or exception.
              case RESUME:
                // As with Catch, we only want to ignore in the case of an
                // interrupt since enqueing the item.
                if (interrupt && interrupt !== tmp && bracketCount === 0 || fail) {
                  status = RETURN;
                } else {
                  bhead  = attempt._1;
                  btail  = attempt._2;
                  status = STEP_BIND;
                  step   = util.fromRight(step);
                }
                break;

              // If we have a bracket, we should enqueue the handlers,
              // and continue with the success branch only if the fiber has
              // not been interrupted. If the bracket acquisition failed, we
              // should not run either.
              case BRACKET:
                bracketCount--;
                if (fail === null) {
                  result   = util.fromRight(step);
                  // We need to enqueue the Release with the same interrupt
                  // status as the Bracket that is initiating it.
                  attempts = new Aff(CONS, new Aff(RELEASE, attempt._2, result), attempts, tmp);
                  // We should only coninue as long as the interrupt status has not changed or
                  // we are currently within a non-interruptable finalizer.
                  if (interrupt === tmp || bracketCount > 0) {
                    status = CONTINUE;
                    step   = attempt._3(result);
                  }
                }
                break;

              // Enqueue the appropriate handler. We increase the bracket count
              // because it should not be cancelled.
              case RELEASE:
                attempts = new Aff(CONS, new Aff(FINALIZED, step, fail), attempts, interrupt);
                status   = CONTINUE;
                // It has only been killed if the interrupt status has changed
                // since we enqueued the item, and the bracket count is 0. If the
                // bracket count is non-zero then we are in a masked state so it's
                // impossible to be killed.
                if (interrupt && interrupt !== tmp && bracketCount === 0) {
                  step = attempt._1.killed(util.fromLeft(interrupt))(attempt._2);
                } else if (fail) {
                  step = attempt._1.failed(util.fromLeft(fail))(attempt._2);
                } else {
                  step = attempt._1.completed(util.fromRight(step))(attempt._2);
                }
                fail = null;
                bracketCount++;
                break;

              case FINALIZER:
                bracketCount++;
                attempts = new Aff(CONS, new Aff(FINALIZED, step, fail), attempts, interrupt);
                status   = CONTINUE;
                step     = attempt._1;
                break;

              case FINALIZED:
                bracketCount--;
                status = RETURN;
                step   = attempt._1;
                fail   = attempt._2;
                break;
              }
            }
            break;

          case COMPLETED:
            for (var k in joins) {
              if (joins.hasOwnProperty(k)) {
                rethrow = rethrow && joins[k].rethrow;
                runEff(joins[k].handler(step));
              }
            }
            joins = null;
            // If we have an interrupt and a fail, then the thread threw while
            // running finalizers. This should always rethrow in a fresh stack.
            if (interrupt && fail) {
              setTimeout(function () {
                throw util.fromLeft(fail);
              }, 0);
            // If we have an unhandled exception, and no other fiber has joined
            // then we need to throw the exception in a fresh stack.
            } else if (util.isLeft(step) && rethrow) {
              setTimeout(function () {
                // Guard on reathrow because a completely synchronous fiber can
                // still have an observer which was added after-the-fact.
                if (rethrow) {
                  throw util.fromLeft(step);
                }
              }, 0);
            }
            return;
          case SUSPENDED:
            status = CONTINUE;
            break;
          case PENDING: return;
          }
        }
      }

      function onComplete(join) {
        return function () {
          if (status === COMPLETED) {
            rethrow = rethrow && join.rethrow;
            join.handler(step)();
            return function () {};
          }

          var jid    = joinId++;
          joins      = joins || {};
          joins[jid] = join;

          return function() {
            if (joins !== null) {
              delete joins[jid];
            }
          };
        };
      }

      function kill(error, cb) {
        return function () {
          if (status === COMPLETED) {
            cb(util.right(void 0))();
            return function () {};
          }

          var canceler = onComplete({
            rethrow: false,
            handler: function (/* unused */) {
              return cb(util.right(void 0));
            }
          })();

          switch (status) {
          case SUSPENDED:
            interrupt = util.left(error);
            status    = COMPLETED;
            step      = interrupt;
            run(runTick);
            break;
          case PENDING:
            if (interrupt === null) {
              interrupt = util.left(error);
            }
            if (bracketCount === 0) {
              if (status === PENDING) {
                attempts = new Aff(CONS, new Aff(FINALIZER, step(error)), attempts, interrupt);
              }
              status   = RETURN;
              step     = null;
              fail     = null;
              run(++runTick);
            }
            break;
          default:
            if (interrupt === null) {
              interrupt = util.left(error);
            }
            if (bracketCount === 0) {
              status = RETURN;
              step   = null;
              fail   = null;
            }
          }

          return canceler;
        };
      }

      function join(cb) {
        return function () {
          var canceler = onComplete({
            rethrow: false,
            handler: cb
          })();
          if (status === SUSPENDED) {
            run(runTick);
          }
          return canceler;
        };
      }

      return {
        kill: kill,
        join: join,
        onComplete: onComplete,
        isSuspended: function () {
          return status === SUSPENDED;
        },
        run: function () {
          if (status === SUSPENDED) {
            if (!Scheduler.isDraining()) {
              Scheduler.enqueue(function () {
                run(runTick);
              });
            } else {
              run(runTick);
            }
          }
        }
      };
    }

    function runPar(util, supervisor, par, cb) {
      // Table of all forked fibers.
      var fiberId   = 0;
      var fibers    = {};

      // Table of currently running cancelers, as a product of `Alt` behavior.
      var killId    = 0;
      var kills     = {};

      // Error used for early cancelation on Alt branches.
      var early     = new Error("[ParAff] Early exit");

      // Error used to kill the entire tree.
      var interrupt = null;

      // The root pointer of the tree.
      var root      = EMPTY;

      // Walks a tree, invoking all the cancelers. Returns the table of pending
      // cancellation fibers.
      function kill(error, par, cb) {
        var step  = par;
        var head  = null;
        var tail  = null;
        var count = 0;
        var kills = {};
        var tmp, kid;

        loop: while (true) {
          tmp = null;

          switch (step.tag) {
          case FORKED:
            if (step._3 === EMPTY) {
              tmp = fibers[step._1];
              kills[count++] = tmp.kill(error, function (result) {
                return function () {
                  count--;
                  if (count === 0) {
                    cb(result)();
                  }
                };
              });
            }
            // Terminal case.
            if (head === null) {
              break loop;
            }
            // Go down the right side of the tree.
            step = head._2;
            if (tail === null) {
              head = null;
            } else {
              head = tail._1;
              tail = tail._2;
            }
            break;
          case MAP:
            step = step._2;
            break;
          case APPLY:
          case ALT:
            if (head) {
              tail = new Aff(CONS, head, tail);
            }
            head = step;
            step = step._1;
            break;
          }
        }

        if (count === 0) {
          cb(util.right(void 0))();
        } else {
          // Run the cancelation effects. We alias `count` because it's mutable.
          kid = 0;
          tmp = count;
          for (; kid < tmp; kid++) {
            kills[kid] = kills[kid]();
          }
        }

        return kills;
      }

      // When a fiber resolves, we need to bubble back up the tree with the
      // result, computing the applicative nodes.
      function join(result, head, tail) {
        var fail, step, lhs, rhs, tmp, kid;

        if (util.isLeft(result)) {
          fail = result;
          step = null;
        } else {
          step = result;
          fail = null;
        }

        loop: while (true) {
          lhs = null;
          rhs = null;
          tmp = null;
          kid = null;

          // We should never continue if the entire tree has been interrupted.
          if (interrupt !== null) {
            return;
          }

          // We've made it all the way to the root of the tree, which means
          // the tree has fully evaluated.
          if (head === null) {
            cb(fail || step)();
            return;
          }

          // The tree has already been computed, so we shouldn't try to do it
          // again. This should never happen.
          // TODO: Remove this?
          if (head._3 !== EMPTY) {
            return;
          }

          switch (head.tag) {
          case MAP:
            if (fail === null) {
              head._3 = util.right(head._1(util.fromRight(step)));
              step    = head._3;
            } else {
              head._3 = fail;
            }
            break;
          case APPLY:
            lhs = head._1._3;
            rhs = head._2._3;
            // If we have a failure we should kill the other side because we
            // can't possible yield a result anymore.
            if (fail) {
              head._3 = fail;
              tmp     = true;
              kid     = killId++;

              kills[kid] = kill(early, fail === lhs ? head._2 : head._1, function (/* unused */) {
                return function () {
                  delete kills[kid];
                  if (tmp) {
                    tmp = false;
                  } else if (tail === null) {
                    join(fail, null, null);
                  } else {
                    join(fail, tail._1, tail._2);
                  }
                };
              });

              if (tmp) {
                tmp = false;
                return;
              }
            } else if (lhs === EMPTY || rhs === EMPTY) {
              // We can only proceed if both sides have resolved.
              return;
            } else {
              step    = util.right(util.fromRight(lhs)(util.fromRight(rhs)));
              head._3 = step;
            }
            break;
          case ALT:
            lhs = head._1._3;
            rhs = head._2._3;
            // We can only proceed if both have resolved or we have a success
            if (lhs === EMPTY && util.isLeft(rhs) || rhs === EMPTY && util.isLeft(lhs)) {
              return;
            }
            // If both sides resolve with an error, we should continue with the
            // first error
            if (lhs !== EMPTY && util.isLeft(lhs) && rhs !== EMPTY && util.isLeft(rhs)) {
              fail    = step === lhs ? rhs : lhs;
              step    = null;
              head._3 = fail;
            } else {
              head._3 = step;
              tmp     = true;
              kid     = killId++;
              // Once a side has resolved, we need to cancel the side that is still
              // pending before we can continue.
              kills[kid] = kill(early, step === lhs ? head._2 : head._1, function (/* unused */) {
                return function () {
                  delete kills[kid];
                  if (tmp) {
                    tmp = false;
                  } else if (tail === null) {
                    join(step, null, null);
                  } else {
                    join(step, tail._1, tail._2);
                  }
                };
              });

              if (tmp) {
                tmp = false;
                return;
              }
            }
            break;
          }

          if (tail === null) {
            head = null;
          } else {
            head = tail._1;
            tail = tail._2;
          }
        }
      }

      function resolve(fiber) {
        return function (result) {
          return function () {
            delete fibers[fiber._1];
            fiber._3 = result;
            join(result, fiber._2._1, fiber._2._2);
          };
        };
      }

      // Walks the applicative tree, substituting non-applicative nodes with
      // `FORKED` nodes. In this tree, all applicative nodes use the `_3` slot
      // as a mutable slot for memoization. In an unresolved state, the `_3`
      // slot is `EMPTY`. In the cases of `ALT` and `APPLY`, we always walk
      // the left side first, because both operations are left-associative. As
      // we `RETURN` from those branches, we then walk the right side.
      function run() {
        var status = CONTINUE;
        var step   = par;
        var head   = null;
        var tail   = null;
        var tmp, fid;

        loop: while (true) {
          tmp = null;
          fid = null;

          switch (status) {
          case CONTINUE:
            switch (step.tag) {
            case MAP:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(MAP, step._1, EMPTY, EMPTY);
              step = step._2;
              break;
            case APPLY:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(APPLY, EMPTY, step._2, EMPTY);
              step = step._1;
              break;
            case ALT:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(ALT, EMPTY, step._2, EMPTY);
              step = step._1;
              break;
            default:
              // When we hit a leaf value, we suspend the stack in the `FORKED`.
              // When the fiber resolves, it can bubble back up the tree.
              fid    = fiberId++;
              status = RETURN;
              tmp    = step;
              step   = new Aff(FORKED, fid, new Aff(CONS, head, tail), EMPTY);
              tmp    = Fiber(util, supervisor, tmp);
              tmp.onComplete({
                rethrow: false,
                handler: resolve(step)
              })();
              fibers[fid] = tmp;
              if (supervisor) {
                supervisor.register(tmp);
              }
            }
            break;
          case RETURN:
            // Terminal case, we are back at the root.
            if (head === null) {
              break loop;
            }
            // If we are done with the right side, we need to continue down the
            // left. Otherwise we should continue up the stack.
            if (head._1 === EMPTY) {
              head._1 = step;
              status  = CONTINUE;
              step    = head._2;
              head._2 = EMPTY;
            } else {
              head._2 = step;
              step    = head;
              if (tail === null) {
                head  = null;
              } else {
                head  = tail._1;
                tail  = tail._2;
              }
            }
          }
        }

        // Keep a reference to the tree root so it can be cancelled.
        root = step;

        for (fid = 0; fid < fiberId; fid++) {
          fibers[fid].run();
        }
      }

      // Cancels the entire tree. If there are already subtrees being canceled,
      // we need to first cancel those joins. We will then add fresh joins for
      // all pending branches including those that were in the process of being
      // canceled.
      function cancel(error, cb) {
        interrupt = util.left(error);
        var innerKills;
        for (var kid in kills) {
          if (kills.hasOwnProperty(kid)) {
            innerKills = kills[kid];
            for (kid in innerKills) {
              if (innerKills.hasOwnProperty(kid)) {
                innerKills[kid]();
              }
            }
          }
        }

        kills = null;
        var newKills = kill(error, root, cb);

        return function (killError) {
          return new Aff(ASYNC, function (killCb) {
            return function () {
              for (var kid in newKills) {
                if (newKills.hasOwnProperty(kid)) {
                  newKills[kid]();
                }
              }
              return nonCanceler;
            };
          });
        };
      }

      run();

      return function (killError) {
        return new Aff(ASYNC, function (killCb) {
          return function () {
            return cancel(killError, killCb);
          };
        });
      };
    }

    function sequential(util, supervisor, par) {
      return new Aff(ASYNC, function (cb) {
        return function () {
          return runPar(util, supervisor, par, cb);
        };
      });
    }

    Aff.EMPTY       = EMPTY;
    Aff.Pure        = AffCtr(PURE);
    Aff.Throw       = AffCtr(THROW);
    Aff.Catch       = AffCtr(CATCH);
    Aff.Sync        = AffCtr(SYNC);
    Aff.Async       = AffCtr(ASYNC);
    Aff.Bind        = AffCtr(BIND);
    Aff.Bracket     = AffCtr(BRACKET);
    Aff.Fork        = AffCtr(FORK);
    Aff.Seq         = AffCtr(SEQ);
    Aff.ParMap      = AffCtr(MAP);
    Aff.ParApply    = AffCtr(APPLY);
    Aff.ParAlt      = AffCtr(ALT);
    Aff.Fiber       = Fiber;
    Aff.Supervisor  = Supervisor;
    Aff.Scheduler   = Scheduler;
    Aff.nonCanceler = nonCanceler;

    return Aff;
  }();

  exports._pure = Aff.Pure;

  exports._throwError = Aff.Throw;

  exports._catchError = function (aff) {
    return function (k) {
      return Aff.Catch(aff, k);
    };
  };

  exports._map = function (f) {
    return function (aff) {
      if (aff.tag === Aff.Pure.tag) {
        return Aff.Pure(f(aff._1));
      } else {
        return Aff.Bind(aff, function (value) {
          return Aff.Pure(f(value));
        });
      }
    };
  };

  exports._bind = function (aff) {
    return function (k) {
      return Aff.Bind(aff, k);
    };
  };

  exports._liftEffect = Aff.Sync;

  exports._parAffMap = function (f) {
    return function (aff) {
      return Aff.ParMap(f, aff);
    };
  };

  exports._parAffApply = function (aff1) {
    return function (aff2) {
      return Aff.ParApply(aff1, aff2);
    };
  };

  exports._parAffAlt = function (aff1) {
    return function (aff2) {
      return Aff.ParAlt(aff1, aff2);
    };
  };

  exports.makeAff = Aff.Async;

  exports._makeFiber = function (util, aff) {
    return function () {
      return Aff.Fiber(util, null, aff);
    };
  };

  exports._delay = function () {
    function setDelay(n, k) {
      if (n === 0 && typeof setImmediate !== "undefined") {
        return setImmediate(k);
      } else {
        return setTimeout(k, n);
      }
    }

    function clearDelay(n, t) {
      if (n === 0 && typeof clearImmediate !== "undefined") {
        return clearImmediate(t);
      } else {
        return clearTimeout(t);
      }
    }

    return function (right, ms) {
      return Aff.Async(function (cb) {
        return function () {
          var timer = setDelay(ms, cb(right()));
          return function () {
            return Aff.Sync(function () {
              return right(clearDelay(ms, timer));
            });
          };
        };
      });
    };
  }();

  exports._sequential = Aff.Seq;
})(PS["Effect.Aff"] = PS["Effect.Aff"] || {});
(function(exports) {
  "use strict";

  // module Partial.Unsafe

  exports.unsafePartial = function (f) {
    return f();
  };
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
  "use strict";

  // module Partial

  exports.crashWith = function () {
    return function (msg) {
      throw new Error(msg);
    };
  };
})(PS["Partial"] = PS["Partial"] || {});
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Partial"] = $PS["Partial"] || {};
  var exports = $PS["Partial"];
  var $foreign = $PS["Partial"];
  exports["crashWith"] = $foreign.crashWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Partial.Unsafe"] = $PS["Partial.Unsafe"] || {};
  var exports = $PS["Partial.Unsafe"];
  var $foreign = $PS["Partial.Unsafe"];
  var Partial = $PS["Partial"];
  var unsafeCrashWith = function (msg) {
      return $foreign.unsafePartial(function (dictPartial) {
          return Partial.crashWith(dictPartial)(msg);
      });
  };
  exports["unsafeCrashWith"] = unsafeCrashWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Effect.Aff"] = $PS["Effect.Aff"] || {};
  var exports = $PS["Effect.Aff"];
  var $foreign = $PS["Effect.Aff"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Parallel_Class = $PS["Control.Parallel.Class"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Class = $PS["Effect.Class"];
  var Partial_Unsafe = $PS["Partial.Unsafe"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var functorParAff = new Data_Functor.Functor($foreign["_parAffMap"]);
  var functorAff = new Data_Functor.Functor($foreign["_map"]);
  var ffiUtil = (function () {
      var unsafeFromRight = function (v) {
          if (v instanceof Data_Either.Right) {
              return v.value0;
          };
          if (v instanceof Data_Either.Left) {
              return Partial_Unsafe.unsafeCrashWith("unsafeFromRight: Left");
          };
          throw new Error("Failed pattern match at Effect.Aff (line 400, column 21 - line 402, column 54): " + [ v.constructor.name ]);
      };
      var unsafeFromLeft = function (v) {
          if (v instanceof Data_Either.Left) {
              return v.value0;
          };
          if (v instanceof Data_Either.Right) {
              return Partial_Unsafe.unsafeCrashWith("unsafeFromLeft: Right");
          };
          throw new Error("Failed pattern match at Effect.Aff (line 395, column 20 - line 397, column 54): " + [ v.constructor.name ]);
      };
      var isLeft = function (v) {
          if (v instanceof Data_Either.Left) {
              return true;
          };
          if (v instanceof Data_Either.Right) {
              return false;
          };
          throw new Error("Failed pattern match at Effect.Aff (line 390, column 12 - line 392, column 20): " + [ v.constructor.name ]);
      };
      return {
          isLeft: isLeft,
          fromLeft: unsafeFromLeft,
          fromRight: unsafeFromRight,
          left: Data_Either.Left.create,
          right: Data_Either.Right.create
      };
  })();
  var makeFiber = function (aff) {
      return $foreign["_makeFiber"](ffiUtil, aff);
  };
  var launchAff = function (aff) {
      return function __do() {
          var v = makeFiber(aff)();
          v.run();
          return v;
      };
  };
  var launchAff_ = (function () {
      var $49 = Data_Functor["void"](Effect.functorEffect);
      return function ($50) {
          return $49(launchAff($50));
      };
  })();                              
  var delay = function (v) {
      return $foreign["_delay"](Data_Either.Right.create, v);
  };
  var applyParAff = new Control_Apply.Apply(function () {
      return functorParAff;
  }, $foreign["_parAffApply"]);
  var monadAff = new Control_Monad.Monad(function () {
      return applicativeAff;
  }, function () {
      return bindAff;
  });
  var bindAff = new Control_Bind.Bind(function () {
      return applyAff;
  }, $foreign["_bind"]);
  var applyAff = new Control_Apply.Apply(function () {
      return functorAff;
  }, Control_Monad.ap(monadAff));
  var applicativeAff = new Control_Applicative.Applicative(function () {
      return applyAff;
  }, $foreign["_pure"]);
  var monadEffectAff = new Effect_Class.MonadEffect(function () {
      return monadAff;
  }, $foreign["_liftEffect"]);
  var monadThrowAff = new Control_Monad_Error_Class.MonadThrow(function () {
      return monadAff;
  }, $foreign["_throwError"]);
  var monadErrorAff = new Control_Monad_Error_Class.MonadError(function () {
      return monadThrowAff;
  }, $foreign["_catchError"]);
  var attempt = Control_Monad_Error_Class["try"](monadErrorAff);
  var runAff = function (k) {
      return function (aff) {
          return launchAff(Control_Bind.bindFlipped(bindAff)((function () {
              var $55 = Effect_Class.liftEffect(monadEffectAff);
              return function ($56) {
                  return $55(k($56));
              };
          })())(Control_Monad_Error_Class["try"](monadErrorAff)(aff)));
      };
  };
  var parallelAff = new Control_Parallel_Class.Parallel(function () {
      return applicativeParAff;
  }, function () {
      return monadAff;
  }, Unsafe_Coerce.unsafeCoerce, $foreign["_sequential"]);
  var applicativeParAff = new Control_Applicative.Applicative(function () {
      return applyParAff;
  }, (function () {
      var $59 = Control_Parallel_Class.parallel(parallelAff);
      var $60 = Control_Applicative.pure(applicativeAff);
      return function ($61) {
          return $59($60($61));
      };
  })());
  var nonCanceler = Data_Function["const"](Control_Applicative.pure(applicativeAff)(Data_Unit.unit));
  var altParAff = new Control_Alt.Alt(function () {
      return functorParAff;
  }, $foreign["_parAffAlt"]);
  exports["launchAff"] = launchAff;
  exports["launchAff_"] = launchAff_;
  exports["runAff"] = runAff;
  exports["attempt"] = attempt;
  exports["delay"] = delay;
  exports["nonCanceler"] = nonCanceler;
  exports["functorAff"] = functorAff;
  exports["applyAff"] = applyAff;
  exports["applicativeAff"] = applicativeAff;
  exports["bindAff"] = bindAff;
  exports["monadAff"] = monadAff;
  exports["monadThrowAff"] = monadThrowAff;
  exports["monadErrorAff"] = monadErrorAff;
  exports["monadEffectAff"] = monadEffectAff;
  exports["functorParAff"] = functorParAff;
  exports["applyParAff"] = applyParAff;
  exports["applicativeParAff"] = applicativeParAff;
  exports["altParAff"] = altParAff;
  exports["parallelAff"] = parallelAff;
  exports["makeAff"] = $foreign.makeAff;
})(PS);
(function(exports) {
  "use strict";

  exports.log = function (s) {
    return function () {
      console.log(s);
      return {};
    };
  };

  exports.error = function (s) {
    return function () {
      console.error(s);
      return {};
    };
  };
})(PS["Effect.Console"] = PS["Effect.Console"] || {});
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Effect.Console"] = $PS["Effect.Console"] || {};
  var exports = $PS["Effect.Console"];
  var $foreign = $PS["Effect.Console"];
  exports["log"] = $foreign.log;
  exports["error"] = $foreign.error;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Effect.Class.Console"] = $PS["Effect.Class.Console"] || {};
  var exports = $PS["Effect.Class.Console"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Console = $PS["Effect.Console"];
  var log = function (dictMonadEffect) {
      var $26 = Effect_Class.liftEffect(dictMonadEffect);
      return function ($27) {
          return $26(Effect_Console.log($27));
      };
  };
  exports["log"] = log;
})(PS);
(function(exports) {
  "use strict";

  exports.showErrorImpl = function (err) {
    return err.stack || err.toString();
  };

  exports.error = function (msg) {
    return new Error(msg);
  };

  exports.throwException = function (e) {
    return function () {
      throw e;
    };
  };

  exports.catchException = function (c) {
    return function (t) {
      return function () {
        try {
          return t();
        } catch (e) {
          if (e instanceof Error || Object.prototype.toString.call(e) === "[object Error]") {
            return c(e)();
          } else {
            return c(new Error(e.toString()))();
          }
        }
      };
    };
  };
})(PS["Effect.Exception"] = PS["Effect.Exception"] || {});
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Effect.Exception"] = $PS["Effect.Exception"] || {};
  var exports = $PS["Effect.Exception"];
  var $foreign = $PS["Effect.Exception"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Show = $PS["Data.Show"];
  var Effect = $PS["Effect"];                
  var $$try = function (action) {
      return $foreign.catchException((function () {
          var $0 = Control_Applicative.pure(Effect.applicativeEffect);
          return function ($1) {
              return $0(Data_Either.Left.create($1));
          };
      })())(Data_Functor.map(Effect.functorEffect)(Data_Either.Right.create)(action));
  };
  var $$throw = function ($2) {
      return $foreign.throwException($foreign.error($2));
  };                                                                               
  var showError = new Data_Show.Show($foreign.showErrorImpl);
  exports["throw"] = $$throw;
  exports["try"] = $$try;
  exports["showError"] = showError;
  exports["error"] = $foreign.error;
  exports["throwException"] = $foreign.throwException;
  exports["catchException"] = $foreign.catchException;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafePerformEffect = function (f) {
    return f();
  };
})(PS["Effect.Unsafe"] = PS["Effect.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Effect.Unsafe"] = $PS["Effect.Unsafe"] || {};
  var exports = $PS["Effect.Unsafe"];
  var $foreign = $PS["Effect.Unsafe"];
  exports["unsafePerformEffect"] = $foreign.unsafePerformEffect;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Effect.Exception.Unsafe"] = $PS["Effect.Exception.Unsafe"] || {};
  var exports = $PS["Effect.Exception.Unsafe"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Effect_Unsafe = $PS["Effect.Unsafe"];                
  var unsafeThrowException = function ($0) {
      return Effect_Unsafe.unsafePerformEffect(Effect_Exception.throwException($0));
  };
  var unsafeThrow = function ($1) {
      return unsafeThrowException(Effect_Exception.error($1));
  };
  exports["unsafeThrowException"] = unsafeThrowException;
  exports["unsafeThrow"] = unsafeThrow;
})(PS);
(function(exports) {
  "use strict";

  exports.random = Math.random;
})(PS["Effect.Random"] = PS["Effect.Random"] || {});
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Effect.Random"] = $PS["Effect.Random"] || {};
  var exports = $PS["Effect.Random"];
  var $foreign = $PS["Effect.Random"];
  var Data_Int = $PS["Data.Int"];
  var randomInt = function (low) {
      return function (high) {
          return function __do() {
              var v = $foreign.random();
              var asNumber = ((Data_Int.toNumber(high) - Data_Int.toNumber(low)) + 1) * v + Data_Int.toNumber(low);
              return Data_Int.floor(asNumber);
          };
      };
  };
  exports["randomInt"] = randomInt;
})(PS);
(function(exports) {
  "use strict";

  exports.new = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.read = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports["modify'"] = function (f) {
    return function (ref) {
      return function () {
        var t = f(ref.value);
        ref.value = t.state;
        return t.value;
      };
    };
  };

  exports.write = function (val) {
    return function (ref) {
      return function () {
        ref.value = val;
        return {};
      };
    };
  };
})(PS["Effect.Ref"] = PS["Effect.Ref"] || {});
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Effect.Ref"] = $PS["Effect.Ref"] || {};
  var exports = $PS["Effect.Ref"];
  var $foreign = $PS["Effect.Ref"];
  var Data_Functor = $PS["Data.Functor"];
  var Effect = $PS["Effect"];                
  var modify = function (f) {
      return $foreign["modify'"](function (s) {
          var s$prime = f(s);
          return {
              state: s$prime,
              value: s$prime
          };
      });
  };
  var modify_ = function (f) {
      return function (s) {
          return Data_Functor["void"](Effect.functorEffect)(modify(f)(s));
      };
  };
  exports["modify"] = modify;
  exports["modify_"] = modify_;
  exports["new"] = $foreign["new"];
  exports["read"] = $foreign.read;
  exports["write"] = $foreign.write;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["ExitCodes"] = $PS["ExitCodes"] || {};
  var exports = $PS["ExitCodes"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];        
  var Success = (function () {
      function Success() {

      };
      Success.value = new Success();
      return Success;
  })();
  var $$Error = (function () {
      function $$Error() {

      };
      $$Error.value = new $$Error();
      return $$Error;
  })();
  var MisuseOfShellBuiltins = (function () {
      function MisuseOfShellBuiltins() {

      };
      MisuseOfShellBuiltins.value = new MisuseOfShellBuiltins();
      return MisuseOfShellBuiltins;
  })();
  var CLIUsageError = (function () {
      function CLIUsageError() {

      };
      CLIUsageError.value = new CLIUsageError();
      return CLIUsageError;
  })();
  var DataFormatError = (function () {
      function DataFormatError() {

      };
      DataFormatError.value = new DataFormatError();
      return DataFormatError;
  })();
  var CannotOpenInput = (function () {
      function CannotOpenInput() {

      };
      CannotOpenInput.value = new CannotOpenInput();
      return CannotOpenInput;
  })();
  var AddresseeUnknown = (function () {
      function AddresseeUnknown() {

      };
      AddresseeUnknown.value = new AddresseeUnknown();
      return AddresseeUnknown;
  })();
  var HostNameUnknown = (function () {
      function HostNameUnknown() {

      };
      HostNameUnknown.value = new HostNameUnknown();
      return HostNameUnknown;
  })();
  var ServiceUnavailable = (function () {
      function ServiceUnavailable() {

      };
      ServiceUnavailable.value = new ServiceUnavailable();
      return ServiceUnavailable;
  })();
  var InternalSoftwareError = (function () {
      function InternalSoftwareError() {

      };
      InternalSoftwareError.value = new InternalSoftwareError();
      return InternalSoftwareError;
  })();
  var SystemError = (function () {
      function SystemError() {

      };
      SystemError.value = new SystemError();
      return SystemError;
  })();
  var CriticalOSFileMissing = (function () {
      function CriticalOSFileMissing() {

      };
      CriticalOSFileMissing.value = new CriticalOSFileMissing();
      return CriticalOSFileMissing;
  })();
  var CannotCreateOutputFile = (function () {
      function CannotCreateOutputFile() {

      };
      CannotCreateOutputFile.value = new CannotCreateOutputFile();
      return CannotCreateOutputFile;
  })();
  var IOError = (function () {
      function IOError() {

      };
      IOError.value = new IOError();
      return IOError;
  })();
  var TemporaryFailure = (function () {
      function TemporaryFailure() {

      };
      TemporaryFailure.value = new TemporaryFailure();
      return TemporaryFailure;
  })();
  var RemoteError = (function () {
      function RemoteError() {

      };
      RemoteError.value = new RemoteError();
      return RemoteError;
  })();
  var PermissionDenied = (function () {
      function PermissionDenied() {

      };
      PermissionDenied.value = new PermissionDenied();
      return PermissionDenied;
  })();
  var ConfigurationError = (function () {
      function ConfigurationError() {

      };
      ConfigurationError.value = new ConfigurationError();
      return ConfigurationError;
  })();
  var CannotExecute = (function () {
      function CannotExecute() {

      };
      CannotExecute.value = new CannotExecute();
      return CannotExecute;
  })();
  var CommandNotFound = (function () {
      function CommandNotFound() {

      };
      CommandNotFound.value = new CommandNotFound();
      return CommandNotFound;
  })();
  var InvalidExitArgument = (function () {
      function InvalidExitArgument() {

      };
      InvalidExitArgument.value = new InvalidExitArgument();
      return InvalidExitArgument;
  })();
  var SIGHUP = (function () {
      function SIGHUP() {

      };
      SIGHUP.value = new SIGHUP();
      return SIGHUP;
  })();
  var SIGINT = (function () {
      function SIGINT() {

      };
      SIGINT.value = new SIGINT();
      return SIGINT;
  })();
  var SIGQUIT = (function () {
      function SIGQUIT() {

      };
      SIGQUIT.value = new SIGQUIT();
      return SIGQUIT;
  })();
  var SIGILL = (function () {
      function SIGILL() {

      };
      SIGILL.value = new SIGILL();
      return SIGILL;
  })();
  var SIGABRT = (function () {
      function SIGABRT() {

      };
      SIGABRT.value = new SIGABRT();
      return SIGABRT;
  })();
  var SIGFPE = (function () {
      function SIGFPE() {

      };
      SIGFPE.value = new SIGFPE();
      return SIGFPE;
  })();
  var SIGKILL = (function () {
      function SIGKILL() {

      };
      SIGKILL.value = new SIGKILL();
      return SIGKILL;
  })();
  var SIGSEGV = (function () {
      function SIGSEGV() {

      };
      SIGSEGV.value = new SIGSEGV();
      return SIGSEGV;
  })();
  var SIGPIPE = (function () {
      function SIGPIPE() {

      };
      SIGPIPE.value = new SIGPIPE();
      return SIGPIPE;
  })();
  var SIGALRM = (function () {
      function SIGALRM() {

      };
      SIGALRM.value = new SIGALRM();
      return SIGALRM;
  })();
  var SIGTERM = (function () {
      function SIGTERM() {

      };
      SIGTERM.value = new SIGTERM();
      return SIGTERM;
  })();
  var eqExitCode = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Success && y instanceof Success) {
              return true;
          };
          if (x instanceof $$Error && y instanceof $$Error) {
              return true;
          };
          if (x instanceof MisuseOfShellBuiltins && y instanceof MisuseOfShellBuiltins) {
              return true;
          };
          if (x instanceof CLIUsageError && y instanceof CLIUsageError) {
              return true;
          };
          if (x instanceof DataFormatError && y instanceof DataFormatError) {
              return true;
          };
          if (x instanceof CannotOpenInput && y instanceof CannotOpenInput) {
              return true;
          };
          if (x instanceof AddresseeUnknown && y instanceof AddresseeUnknown) {
              return true;
          };
          if (x instanceof HostNameUnknown && y instanceof HostNameUnknown) {
              return true;
          };
          if (x instanceof ServiceUnavailable && y instanceof ServiceUnavailable) {
              return true;
          };
          if (x instanceof InternalSoftwareError && y instanceof InternalSoftwareError) {
              return true;
          };
          if (x instanceof SystemError && y instanceof SystemError) {
              return true;
          };
          if (x instanceof CriticalOSFileMissing && y instanceof CriticalOSFileMissing) {
              return true;
          };
          if (x instanceof CannotCreateOutputFile && y instanceof CannotCreateOutputFile) {
              return true;
          };
          if (x instanceof IOError && y instanceof IOError) {
              return true;
          };
          if (x instanceof TemporaryFailure && y instanceof TemporaryFailure) {
              return true;
          };
          if (x instanceof RemoteError && y instanceof RemoteError) {
              return true;
          };
          if (x instanceof PermissionDenied && y instanceof PermissionDenied) {
              return true;
          };
          if (x instanceof ConfigurationError && y instanceof ConfigurationError) {
              return true;
          };
          if (x instanceof CannotExecute && y instanceof CannotExecute) {
              return true;
          };
          if (x instanceof CommandNotFound && y instanceof CommandNotFound) {
              return true;
          };
          if (x instanceof InvalidExitArgument && y instanceof InvalidExitArgument) {
              return true;
          };
          if (x instanceof SIGHUP && y instanceof SIGHUP) {
              return true;
          };
          if (x instanceof SIGINT && y instanceof SIGINT) {
              return true;
          };
          if (x instanceof SIGQUIT && y instanceof SIGQUIT) {
              return true;
          };
          if (x instanceof SIGILL && y instanceof SIGILL) {
              return true;
          };
          if (x instanceof SIGABRT && y instanceof SIGABRT) {
              return true;
          };
          if (x instanceof SIGFPE && y instanceof SIGFPE) {
              return true;
          };
          if (x instanceof SIGKILL && y instanceof SIGKILL) {
              return true;
          };
          if (x instanceof SIGSEGV && y instanceof SIGSEGV) {
              return true;
          };
          if (x instanceof SIGPIPE && y instanceof SIGPIPE) {
              return true;
          };
          if (x instanceof SIGALRM && y instanceof SIGALRM) {
              return true;
          };
          if (x instanceof SIGTERM && y instanceof SIGTERM) {
              return true;
          };
          return false;
      };
  });
  var ordExitCode = new Data_Ord.Ord(function () {
      return eqExitCode;
  }, function (x) {
      return function (y) {
          if (x instanceof Success && y instanceof Success) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof Success) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Success) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof $$Error && y instanceof $$Error) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof $$Error) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof $$Error) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof MisuseOfShellBuiltins && y instanceof MisuseOfShellBuiltins) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof MisuseOfShellBuiltins) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof MisuseOfShellBuiltins) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof CLIUsageError && y instanceof CLIUsageError) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof CLIUsageError) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof CLIUsageError) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof DataFormatError && y instanceof DataFormatError) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof DataFormatError) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof DataFormatError) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof CannotOpenInput && y instanceof CannotOpenInput) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof CannotOpenInput) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof CannotOpenInput) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof AddresseeUnknown && y instanceof AddresseeUnknown) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof AddresseeUnknown) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof AddresseeUnknown) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof HostNameUnknown && y instanceof HostNameUnknown) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof HostNameUnknown) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof HostNameUnknown) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof ServiceUnavailable && y instanceof ServiceUnavailable) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof ServiceUnavailable) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof ServiceUnavailable) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof InternalSoftwareError && y instanceof InternalSoftwareError) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof InternalSoftwareError) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof InternalSoftwareError) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof SystemError && y instanceof SystemError) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof SystemError) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof SystemError) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof CriticalOSFileMissing && y instanceof CriticalOSFileMissing) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof CriticalOSFileMissing) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof CriticalOSFileMissing) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof CannotCreateOutputFile && y instanceof CannotCreateOutputFile) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof CannotCreateOutputFile) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof CannotCreateOutputFile) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof IOError && y instanceof IOError) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof IOError) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof IOError) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof TemporaryFailure && y instanceof TemporaryFailure) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof TemporaryFailure) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof TemporaryFailure) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof RemoteError && y instanceof RemoteError) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof RemoteError) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof RemoteError) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof PermissionDenied && y instanceof PermissionDenied) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof PermissionDenied) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof PermissionDenied) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof ConfigurationError && y instanceof ConfigurationError) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof ConfigurationError) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof ConfigurationError) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof CannotExecute && y instanceof CannotExecute) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof CannotExecute) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof CannotExecute) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof CommandNotFound && y instanceof CommandNotFound) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof CommandNotFound) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof CommandNotFound) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof InvalidExitArgument && y instanceof InvalidExitArgument) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof InvalidExitArgument) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof InvalidExitArgument) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof SIGHUP && y instanceof SIGHUP) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof SIGHUP) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof SIGHUP) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof SIGINT && y instanceof SIGINT) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof SIGINT) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof SIGINT) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof SIGQUIT && y instanceof SIGQUIT) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof SIGQUIT) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof SIGQUIT) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof SIGILL && y instanceof SIGILL) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof SIGILL) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof SIGILL) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof SIGABRT && y instanceof SIGABRT) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof SIGABRT) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof SIGABRT) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof SIGFPE && y instanceof SIGFPE) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof SIGFPE) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof SIGFPE) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof SIGKILL && y instanceof SIGKILL) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof SIGKILL) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof SIGKILL) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof SIGSEGV && y instanceof SIGSEGV) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof SIGSEGV) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof SIGSEGV) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof SIGPIPE && y instanceof SIGPIPE) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof SIGPIPE) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof SIGPIPE) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof SIGALRM && y instanceof SIGALRM) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof SIGALRM) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof SIGALRM) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof SIGTERM && y instanceof SIGTERM) {
              return Data_Ordering.EQ.value;
          };
          throw new Error("Failed pattern match at ExitCodes (line 47, column 1 - line 47, column 44): " + [ x.constructor.name, y.constructor.name ]);
      };
  });
  var enumExitCode = new Data_Enum.Enum(function () {
      return ordExitCode;
  }, function (v) {
      if (v instanceof Success) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof $$Error) {
          return new Data_Maybe.Just(Success.value);
      };
      if (v instanceof MisuseOfShellBuiltins) {
          return new Data_Maybe.Just($$Error.value);
      };
      if (v instanceof CLIUsageError) {
          return new Data_Maybe.Just(MisuseOfShellBuiltins.value);
      };
      if (v instanceof DataFormatError) {
          return new Data_Maybe.Just(CLIUsageError.value);
      };
      if (v instanceof CannotOpenInput) {
          return new Data_Maybe.Just(DataFormatError.value);
      };
      if (v instanceof AddresseeUnknown) {
          return new Data_Maybe.Just(CannotOpenInput.value);
      };
      if (v instanceof HostNameUnknown) {
          return new Data_Maybe.Just(AddresseeUnknown.value);
      };
      if (v instanceof ServiceUnavailable) {
          return new Data_Maybe.Just(HostNameUnknown.value);
      };
      if (v instanceof InternalSoftwareError) {
          return new Data_Maybe.Just(ServiceUnavailable.value);
      };
      if (v instanceof SystemError) {
          return new Data_Maybe.Just(InternalSoftwareError.value);
      };
      if (v instanceof CriticalOSFileMissing) {
          return new Data_Maybe.Just(SystemError.value);
      };
      if (v instanceof CannotCreateOutputFile) {
          return new Data_Maybe.Just(CriticalOSFileMissing.value);
      };
      if (v instanceof IOError) {
          return new Data_Maybe.Just(CannotCreateOutputFile.value);
      };
      if (v instanceof TemporaryFailure) {
          return new Data_Maybe.Just(IOError.value);
      };
      if (v instanceof RemoteError) {
          return new Data_Maybe.Just(TemporaryFailure.value);
      };
      if (v instanceof PermissionDenied) {
          return new Data_Maybe.Just(RemoteError.value);
      };
      if (v instanceof ConfigurationError) {
          return new Data_Maybe.Just(PermissionDenied.value);
      };
      if (v instanceof CannotExecute) {
          return new Data_Maybe.Just(ConfigurationError.value);
      };
      if (v instanceof CommandNotFound) {
          return new Data_Maybe.Just(CannotExecute.value);
      };
      if (v instanceof InvalidExitArgument) {
          return new Data_Maybe.Just(CommandNotFound.value);
      };
      if (v instanceof SIGHUP) {
          return new Data_Maybe.Just(InvalidExitArgument.value);
      };
      if (v instanceof SIGINT) {
          return new Data_Maybe.Just(SIGHUP.value);
      };
      if (v instanceof SIGQUIT) {
          return new Data_Maybe.Just(SIGINT.value);
      };
      if (v instanceof SIGILL) {
          return new Data_Maybe.Just(SIGQUIT.value);
      };
      if (v instanceof SIGABRT) {
          return new Data_Maybe.Just(SIGILL.value);
      };
      if (v instanceof SIGFPE) {
          return new Data_Maybe.Just(SIGABRT.value);
      };
      if (v instanceof SIGKILL) {
          return new Data_Maybe.Just(SIGFPE.value);
      };
      if (v instanceof SIGSEGV) {
          return new Data_Maybe.Just(SIGKILL.value);
      };
      if (v instanceof SIGPIPE) {
          return new Data_Maybe.Just(SIGSEGV.value);
      };
      if (v instanceof SIGALRM) {
          return new Data_Maybe.Just(SIGPIPE.value);
      };
      if (v instanceof SIGTERM) {
          return new Data_Maybe.Just(SIGALRM.value);
      };
      throw new Error("Failed pattern match at ExitCodes (line 87, column 1 - line 151, column 30): " + [ v.constructor.name ]);
  }, function (v) {
      if (v instanceof Success) {
          return new Data_Maybe.Just($$Error.value);
      };
      if (v instanceof $$Error) {
          return new Data_Maybe.Just(MisuseOfShellBuiltins.value);
      };
      if (v instanceof MisuseOfShellBuiltins) {
          return new Data_Maybe.Just(CLIUsageError.value);
      };
      if (v instanceof CLIUsageError) {
          return new Data_Maybe.Just(DataFormatError.value);
      };
      if (v instanceof DataFormatError) {
          return new Data_Maybe.Just(CannotOpenInput.value);
      };
      if (v instanceof CannotOpenInput) {
          return new Data_Maybe.Just(AddresseeUnknown.value);
      };
      if (v instanceof AddresseeUnknown) {
          return new Data_Maybe.Just(HostNameUnknown.value);
      };
      if (v instanceof HostNameUnknown) {
          return new Data_Maybe.Just(ServiceUnavailable.value);
      };
      if (v instanceof ServiceUnavailable) {
          return new Data_Maybe.Just(InternalSoftwareError.value);
      };
      if (v instanceof InternalSoftwareError) {
          return new Data_Maybe.Just(SystemError.value);
      };
      if (v instanceof SystemError) {
          return new Data_Maybe.Just(CriticalOSFileMissing.value);
      };
      if (v instanceof CriticalOSFileMissing) {
          return new Data_Maybe.Just(CannotCreateOutputFile.value);
      };
      if (v instanceof CannotCreateOutputFile) {
          return new Data_Maybe.Just(IOError.value);
      };
      if (v instanceof IOError) {
          return new Data_Maybe.Just(TemporaryFailure.value);
      };
      if (v instanceof TemporaryFailure) {
          return new Data_Maybe.Just(RemoteError.value);
      };
      if (v instanceof RemoteError) {
          return new Data_Maybe.Just(PermissionDenied.value);
      };
      if (v instanceof PermissionDenied) {
          return new Data_Maybe.Just(ConfigurationError.value);
      };
      if (v instanceof ConfigurationError) {
          return new Data_Maybe.Just(CannotExecute.value);
      };
      if (v instanceof CannotExecute) {
          return new Data_Maybe.Just(CommandNotFound.value);
      };
      if (v instanceof CommandNotFound) {
          return new Data_Maybe.Just(InvalidExitArgument.value);
      };
      if (v instanceof InvalidExitArgument) {
          return new Data_Maybe.Just(SIGHUP.value);
      };
      if (v instanceof SIGHUP) {
          return new Data_Maybe.Just(SIGINT.value);
      };
      if (v instanceof SIGINT) {
          return new Data_Maybe.Just(SIGQUIT.value);
      };
      if (v instanceof SIGQUIT) {
          return new Data_Maybe.Just(SIGILL.value);
      };
      if (v instanceof SIGILL) {
          return new Data_Maybe.Just(SIGABRT.value);
      };
      if (v instanceof SIGABRT) {
          return new Data_Maybe.Just(SIGFPE.value);
      };
      if (v instanceof SIGFPE) {
          return new Data_Maybe.Just(SIGKILL.value);
      };
      if (v instanceof SIGKILL) {
          return new Data_Maybe.Just(SIGSEGV.value);
      };
      if (v instanceof SIGSEGV) {
          return new Data_Maybe.Just(SIGPIPE.value);
      };
      if (v instanceof SIGPIPE) {
          return new Data_Maybe.Just(SIGALRM.value);
      };
      if (v instanceof SIGALRM) {
          return new Data_Maybe.Just(SIGTERM.value);
      };
      if (v instanceof SIGTERM) {
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at ExitCodes (line 87, column 1 - line 151, column 30): " + [ v.constructor.name ]);
  });
  var boundedExitCode = new Data_Bounded.Bounded(function () {
      return ordExitCode;
  }, Success.value, SIGTERM.value);
  var boundedEnumExitCode = new Data_Enum.BoundedEnum(function () {
      return boundedExitCode;
  }, function () {
      return enumExitCode;
  }, 32, function (v) {
      if (v instanceof Success) {
          return 0;
      };
      if (v instanceof $$Error) {
          return 1;
      };
      if (v instanceof MisuseOfShellBuiltins) {
          return 2;
      };
      if (v instanceof CLIUsageError) {
          return 64;
      };
      if (v instanceof DataFormatError) {
          return 65;
      };
      if (v instanceof CannotOpenInput) {
          return 66;
      };
      if (v instanceof AddresseeUnknown) {
          return 67;
      };
      if (v instanceof HostNameUnknown) {
          return 68;
      };
      if (v instanceof ServiceUnavailable) {
          return 69;
      };
      if (v instanceof InternalSoftwareError) {
          return 70;
      };
      if (v instanceof SystemError) {
          return 71;
      };
      if (v instanceof CriticalOSFileMissing) {
          return 72;
      };
      if (v instanceof CannotCreateOutputFile) {
          return 73;
      };
      if (v instanceof IOError) {
          return 74;
      };
      if (v instanceof TemporaryFailure) {
          return 75;
      };
      if (v instanceof RemoteError) {
          return 76;
      };
      if (v instanceof PermissionDenied) {
          return 77;
      };
      if (v instanceof ConfigurationError) {
          return 78;
      };
      if (v instanceof CannotExecute) {
          return 126;
      };
      if (v instanceof CommandNotFound) {
          return 127;
      };
      if (v instanceof InvalidExitArgument) {
          return 128;
      };
      if (v instanceof SIGHUP) {
          return 128 + 1 | 0;
      };
      if (v instanceof SIGINT) {
          return 128 + 2 | 0;
      };
      if (v instanceof SIGQUIT) {
          return 128 + 3 | 0;
      };
      if (v instanceof SIGILL) {
          return 128 + 4 | 0;
      };
      if (v instanceof SIGABRT) {
          return 128 + 6 | 0;
      };
      if (v instanceof SIGFPE) {
          return 128 + 8 | 0;
      };
      if (v instanceof SIGKILL) {
          return 128 + 9 | 0;
      };
      if (v instanceof SIGSEGV) {
          return 128 + 11 | 0;
      };
      if (v instanceof SIGPIPE) {
          return 128 + 13 | 0;
      };
      if (v instanceof SIGALRM) {
          return 128 + 14 | 0;
      };
      if (v instanceof SIGTERM) {
          return 128 + 15 | 0;
      };
      throw new Error("Failed pattern match at ExitCodes (line 153, column 1 - line 219, column 30): " + [ v.constructor.name ]);
  }, function (v) {
      if (v === 0) {
          return new Data_Maybe.Just(Success.value);
      };
      if (v === 1) {
          return new Data_Maybe.Just($$Error.value);
      };
      if (v === 2) {
          return new Data_Maybe.Just(MisuseOfShellBuiltins.value);
      };
      if (v === 64) {
          return new Data_Maybe.Just(CLIUsageError.value);
      };
      if (v === 65) {
          return new Data_Maybe.Just(DataFormatError.value);
      };
      if (v === 66) {
          return new Data_Maybe.Just(CannotOpenInput.value);
      };
      if (v === 67) {
          return new Data_Maybe.Just(AddresseeUnknown.value);
      };
      if (v === 68) {
          return new Data_Maybe.Just(HostNameUnknown.value);
      };
      if (v === 69) {
          return new Data_Maybe.Just(ServiceUnavailable.value);
      };
      if (v === 70) {
          return new Data_Maybe.Just(InternalSoftwareError.value);
      };
      if (v === 71) {
          return new Data_Maybe.Just(SystemError.value);
      };
      if (v === 72) {
          return new Data_Maybe.Just(CriticalOSFileMissing.value);
      };
      if (v === 73) {
          return new Data_Maybe.Just(CannotCreateOutputFile.value);
      };
      if (v === 74) {
          return new Data_Maybe.Just(IOError.value);
      };
      if (v === 75) {
          return new Data_Maybe.Just(TemporaryFailure.value);
      };
      if (v === 76) {
          return new Data_Maybe.Just(RemoteError.value);
      };
      if (v === 77) {
          return new Data_Maybe.Just(PermissionDenied.value);
      };
      if (v === 78) {
          return new Data_Maybe.Just(ConfigurationError.value);
      };
      if (v === 126) {
          return new Data_Maybe.Just(CannotExecute.value);
      };
      if (v === 127) {
          return new Data_Maybe.Just(CommandNotFound.value);
      };
      if (v === 128) {
          return new Data_Maybe.Just(InvalidExitArgument.value);
      };
      if (v === 129) {
          return new Data_Maybe.Just(SIGHUP.value);
      };
      if (v === 130) {
          return new Data_Maybe.Just(SIGINT.value);
      };
      if (v === 131) {
          return new Data_Maybe.Just(SIGQUIT.value);
      };
      if (v === 132) {
          return new Data_Maybe.Just(SIGILL.value);
      };
      if (v === 134) {
          return new Data_Maybe.Just(SIGABRT.value);
      };
      if (v === 136) {
          return new Data_Maybe.Just(SIGFPE.value);
      };
      if (v === 137) {
          return new Data_Maybe.Just(SIGKILL.value);
      };
      if (v === 139) {
          return new Data_Maybe.Just(SIGSEGV.value);
      };
      if (v === 141) {
          return new Data_Maybe.Just(SIGPIPE.value);
      };
      if (v === 142) {
          return new Data_Maybe.Just(SIGALRM.value);
      };
      if (v === 143) {
          return new Data_Maybe.Just(SIGTERM.value);
      };
      return Data_Maybe.Nothing.value;
  });
  exports["Success"] = Success;
  exports["Error"] = $$Error;
  exports["MisuseOfShellBuiltins"] = MisuseOfShellBuiltins;
  exports["CLIUsageError"] = CLIUsageError;
  exports["DataFormatError"] = DataFormatError;
  exports["CannotOpenInput"] = CannotOpenInput;
  exports["AddresseeUnknown"] = AddresseeUnknown;
  exports["HostNameUnknown"] = HostNameUnknown;
  exports["ServiceUnavailable"] = ServiceUnavailable;
  exports["InternalSoftwareError"] = InternalSoftwareError;
  exports["SystemError"] = SystemError;
  exports["CriticalOSFileMissing"] = CriticalOSFileMissing;
  exports["CannotCreateOutputFile"] = CannotCreateOutputFile;
  exports["IOError"] = IOError;
  exports["TemporaryFailure"] = TemporaryFailure;
  exports["RemoteError"] = RemoteError;
  exports["PermissionDenied"] = PermissionDenied;
  exports["ConfigurationError"] = ConfigurationError;
  exports["CannotExecute"] = CannotExecute;
  exports["CommandNotFound"] = CommandNotFound;
  exports["InvalidExitArgument"] = InvalidExitArgument;
  exports["SIGHUP"] = SIGHUP;
  exports["SIGINT"] = SIGINT;
  exports["SIGQUIT"] = SIGQUIT;
  exports["SIGILL"] = SIGILL;
  exports["SIGABRT"] = SIGABRT;
  exports["SIGFPE"] = SIGFPE;
  exports["SIGKILL"] = SIGKILL;
  exports["SIGSEGV"] = SIGSEGV;
  exports["SIGPIPE"] = SIGPIPE;
  exports["SIGALRM"] = SIGALRM;
  exports["SIGTERM"] = SIGTERM;
  exports["eqExitCode"] = eqExitCode;
  exports["ordExitCode"] = ordExitCode;
  exports["boundedExitCode"] = boundedExitCode;
  exports["enumExitCode"] = enumExitCode;
  exports["boundedEnumExitCode"] = boundedEnumExitCode;
})(PS);
(function(exports) {
  
  var gaze =require("gaze"); 

  exports.gaze = function(globs, cb){
    gaze(globs, function(err, watcher) {
      // Files have all started watching
      // watcher === this

      // Get all watched files
      var watched = watcher.watched();

      watcher.on('changed', function(filepath) {
        cb(filepath)();
      });

      watcher.on('added', function(filepath) {
        cb(filepath)();
      });
    });
  };
})(PS["Main"] = PS["Main"] || {});
(function(exports) {
  "use strict";

  exports.process = process;

  exports.exit = function (code) {
    return function () {
      process.exit(code);
    };
  };
})(PS["Node.Process"] = PS["Node.Process"] || {});
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Node.Platform"] = $PS["Node.Platform"] || {};
  var exports = $PS["Node.Platform"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Maybe = $PS["Data.Maybe"];              
  var AIX = (function () {
      function AIX() {

      };
      AIX.value = new AIX();
      return AIX;
  })();
  var Darwin = (function () {
      function Darwin() {

      };
      Darwin.value = new Darwin();
      return Darwin;
  })();
  var FreeBSD = (function () {
      function FreeBSD() {

      };
      FreeBSD.value = new FreeBSD();
      return FreeBSD;
  })();
  var Linux = (function () {
      function Linux() {

      };
      Linux.value = new Linux();
      return Linux;
  })();
  var OpenBSD = (function () {
      function OpenBSD() {

      };
      OpenBSD.value = new OpenBSD();
      return OpenBSD;
  })();
  var SunOS = (function () {
      function SunOS() {

      };
      SunOS.value = new SunOS();
      return SunOS;
  })();
  var Win32 = (function () {
      function Win32() {

      };
      Win32.value = new Win32();
      return Win32;
  })();
  var Android = (function () {
      function Android() {

      };
      Android.value = new Android();
      return Android;
  })();
  var fromString = function (v) {
      if (v === "aix") {
          return new Data_Maybe.Just(AIX.value);
      };
      if (v === "darwin") {
          return new Data_Maybe.Just(Darwin.value);
      };
      if (v === "freebsd") {
          return new Data_Maybe.Just(FreeBSD.value);
      };
      if (v === "linux") {
          return new Data_Maybe.Just(Linux.value);
      };
      if (v === "openbsd") {
          return new Data_Maybe.Just(OpenBSD.value);
      };
      if (v === "sunos") {
          return new Data_Maybe.Just(SunOS.value);
      };
      if (v === "win32") {
          return new Data_Maybe.Just(Win32.value);
      };
      if (v === "android") {
          return new Data_Maybe.Just(Android.value);
      };
      return Data_Maybe.Nothing.value;
  };
  var eqPlatform = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof AIX && y instanceof AIX) {
              return true;
          };
          if (x instanceof Darwin && y instanceof Darwin) {
              return true;
          };
          if (x instanceof FreeBSD && y instanceof FreeBSD) {
              return true;
          };
          if (x instanceof Linux && y instanceof Linux) {
              return true;
          };
          if (x instanceof OpenBSD && y instanceof OpenBSD) {
              return true;
          };
          if (x instanceof SunOS && y instanceof SunOS) {
              return true;
          };
          if (x instanceof Win32 && y instanceof Win32) {
              return true;
          };
          if (x instanceof Android && y instanceof Android) {
              return true;
          };
          return false;
      };
  });
  exports["AIX"] = AIX;
  exports["Darwin"] = Darwin;
  exports["FreeBSD"] = FreeBSD;
  exports["Linux"] = Linux;
  exports["OpenBSD"] = OpenBSD;
  exports["SunOS"] = SunOS;
  exports["Win32"] = Win32;
  exports["Android"] = Android;
  exports["fromString"] = fromString;
  exports["eqPlatform"] = eqPlatform;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Node.Process"] = $PS["Node.Process"] || {};
  var exports = $PS["Node.Process"];
  var $foreign = $PS["Node.Process"];
  var Node_Platform = $PS["Node.Platform"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];       
  var stdout = $foreign.process.stdout;           
  var stderr = $foreign.process.stderr;
  var platformStr = $foreign.process.platform;
  var platform = Node_Platform.fromString(platformStr);
  var mkEffect = Unsafe_Coerce.unsafeCoerce;
  var cwd = $foreign.process.cwd;
  var argv = mkEffect(function (v) {
      return $foreign.process.argv;
  });
  exports["argv"] = argv;
  exports["cwd"] = cwd;
  exports["platform"] = platform;
  exports["stdout"] = stdout;
  exports["stderr"] = stderr;
  exports["exit"] = $foreign.exit;
})(PS);
(function(exports) {
  
  var net =require("net"); 

  exports.send = function(cmd){
    return function(port){
      return function(cb){
        return function(err){
          return function(){
            var sock = net.createConnection({port: port})
              , result = ""
            sock.on('data', function (data) {
              result += data
            })
            .on('end', function () {
              cb(result)()
            })
            .on('connect', function () {
              sock.setEncoding('utf8');
              sock.write(cmd + "\n")
            })
            .on('error', function (e) {
              err(e)()
            })
          }
        }
      }
    }
  }
})(PS["PscIde"] = PS["PscIde"] || {});
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["PscIde.Command"] = $PS["PscIde.Command"] || {};
  var exports = $PS["PscIde.Command"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Argonaut_Core = $PS["Data.Argonaut.Core"];
  var Data_Argonaut_Decode_Class = $PS["Data.Argonaut.Decode.Class"];
  var Data_Argonaut_Decode_Combinators = $PS["Data.Argonaut.Decode.Combinators"];
  var Data_Argonaut_Encode_Class = $PS["Data.Argonaut.Encode.Class"];
  var Data_Argonaut_Encode_Combinators = $PS["Data.Argonaut.Encode.Combinators"];
  var Data_Argonaut_Parser = $PS["Data.Argonaut.Parser"];
  var Data_Either = $PS["Data.Either"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Show = $PS["Data.Show"];                                  
  var Package = (function () {
      function Package() {

      };
      Package.value = new Package();
      return Package;
  })();
  var Ident = (function () {
      function Ident() {

      };
      Ident.value = new Ident();
      return Ident;
  })();
  var NSValue = (function () {
      function NSValue() {

      };
      NSValue.value = new NSValue();
      return NSValue;
  })();
  var NSType = (function () {
      function NSType() {

      };
      NSType.value = new NSType();
      return NSType;
  })();
  var NSKind = (function () {
      function NSKind() {

      };
      NSKind.value = new NSKind();
      return NSKind;
  })();
  var Message = function (x) {
      return x;
  };
  var Flex = (function () {
      function Flex(value0) {
          this.value0 = value0;
      };
      Flex.create = function (value0) {
          return new Flex(value0);
      };
      return Flex;
  })();
  var Distance = (function () {
      function Distance(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Distance.create = function (value0) {
          return function (value1) {
              return new Distance(value0, value1);
          };
      };
      return Distance;
  })();
  var LoadedModules = (function () {
      function LoadedModules() {

      };
      LoadedModules.value = new LoadedModules();
      return LoadedModules;
  })();
  var Imports = (function () {
      function Imports(value0) {
          this.value0 = value0;
      };
      Imports.create = function (value0) {
          return new Imports(value0);
      };
      return Imports;
  })();
  var AvailableModules = (function () {
      function AvailableModules() {

      };
      AvailableModules.value = new AvailableModules();
      return AvailableModules;
  })();
  var AddImplicitImport = (function () {
      function AddImplicitImport(value0) {
          this.value0 = value0;
      };
      AddImplicitImport.create = function (value0) {
          return new AddImplicitImport(value0);
      };
      return AddImplicitImport;
  })();
  var AddQualifiedImport = (function () {
      function AddQualifiedImport(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      AddQualifiedImport.create = function (value0) {
          return function (value1) {
              return new AddQualifiedImport(value0, value1);
          };
      };
      return AddQualifiedImport;
  })();
  var AddImport = (function () {
      function AddImport(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      AddImport.create = function (value0) {
          return function (value1) {
              return new AddImport(value0, value1);
          };
      };
      return AddImport;
  })();
  var ExactFilter = (function () {
      function ExactFilter(value0) {
          this.value0 = value0;
      };
      ExactFilter.create = function (value0) {
          return new ExactFilter(value0);
      };
      return ExactFilter;
  })();
  var PrefixFilter = (function () {
      function PrefixFilter(value0) {
          this.value0 = value0;
      };
      PrefixFilter.create = function (value0) {
          return new PrefixFilter(value0);
      };
      return PrefixFilter;
  })();
  var ModuleFilter = (function () {
      function ModuleFilter(value0) {
          this.value0 = value0;
      };
      ModuleFilter.create = function (value0) {
          return new ModuleFilter(value0);
      };
      return ModuleFilter;
  })();
  var DependencyFilter = (function () {
      function DependencyFilter(value0) {
          this.value0 = value0;
      };
      DependencyFilter.create = function (value0) {
          return new DependencyFilter(value0);
      };
      return DependencyFilter;
  })();
  var JS = (function () {
      function JS() {

      };
      JS.value = new JS();
      return JS;
  })();
  var JSSourceMap = (function () {
      function JSSourceMap() {

      };
      JSSourceMap.value = new JSSourceMap();
      return JSSourceMap;
  })();
  var CoreFn = (function () {
      function CoreFn() {

      };
      CoreFn.value = new CoreFn();
      return CoreFn;
  })();
  var Other = (function () {
      function Other(value0) {
          this.value0 = value0;
      };
      Other.create = function (value0) {
          return new Other(value0);
      };
      return Other;
  })();
  var Cwd = (function () {
      function Cwd() {

      };
      Cwd.value = new Cwd();
      return Cwd;
  })();
  var Ls = (function () {
      function Ls(value0) {
          this.value0 = value0;
      };
      Ls.create = function (value0) {
          return new Ls(value0);
      };
      return Ls;
  })();
  var Quit = (function () {
      function Quit() {

      };
      Quit.value = new Quit();
      return Quit;
  })();
  var Reset = (function () {
      function Reset() {

      };
      Reset.value = new Reset();
      return Reset;
  })();
  var Load = (function () {
      function Load(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Load.create = function (value0) {
          return function (value1) {
              return new Load(value0, value1);
          };
      };
      return Load;
  })();
  var Complete = (function () {
      function Complete(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Complete.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Complete(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Complete;
  })();
  var Pursuit = (function () {
      function Pursuit(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Pursuit.create = function (value0) {
          return function (value1) {
              return new Pursuit(value0, value1);
          };
      };
      return Pursuit;
  })();
  var Type = (function () {
      function Type(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Type.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Type(value0, value1, value2);
              };
          };
      };
      return Type;
  })();
  var AddClause = (function () {
      function AddClause(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      AddClause.create = function (value0) {
          return function (value1) {
              return new AddClause(value0, value1);
          };
      };
      return AddClause;
  })();
  var CaseSplit = (function () {
      function CaseSplit(value0, value1, value2, value3, value4) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
      };
      CaseSplit.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return new CaseSplit(value0, value1, value2, value3, value4);
                      };
                  };
              };
          };
      };
      return CaseSplit;
  })();
  var ImportCmd = (function () {
      function ImportCmd(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      ImportCmd.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new ImportCmd(value0, value1, value2, value3);
                  };
              };
          };
      };
      return ImportCmd;
  })();
  var RebuildCmd = (function () {
      function RebuildCmd(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      RebuildCmd.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new RebuildCmd(value0, value1, value2);
              };
          };
      };
      return RebuildCmd;
  })();
  var Usages = (function () {
      function Usages(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Usages.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Usages(value0, value1, value2);
              };
          };
      };
      return Usages;
  })();
  var unwrapResponse = function (dictDecodeJson) {
      return function (dictDecodeJson1) {
          return function (s) {
              return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Parser.jsonParser(s))(function (v) {
                  return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeForeignObject(Data_Argonaut_Decode_Class.decodeJsonJson))(v))(function (v1) {
                      return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonString)(v1)("resultType"))(function (v2) {
                          if (v2 === "success") {
                              return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(dictDecodeJson1)(v1)("result"))(function (v3) {
                                  return Control_Applicative.pure(Data_Either.applicativeEither)(new Data_Either.Right(v3));
                              });
                          };
                          return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(dictDecodeJson)(v1)("result"))(function (v3) {
                              return Control_Applicative.pure(Data_Either.applicativeEither)(new Data_Either.Left(v3));
                          });
                      });
                  });
              });
          };
      };
  };
  var showPursuitType = new Data_Show.Show(function (v) {
      if (v instanceof Package) {
          return "package";
      };
      if (v instanceof Ident) {
          return "completion";
      };
      throw new Error("Failed pattern match at PscIde.Command (line 19, column 1 - line 21, column 30): " + [ v.constructor.name ]);
  });
  var jsonSingletonObject$prime = function (dictEncodeJson) {
      return function (s) {
          return function (o) {
              return Data_Argonaut_Core.jsonSingletonObject(s)(Data_Argonaut_Encode_Class.encodeJson(dictEncodeJson)(o));
          };
      };
  };
  var filterWrapper = function (dictEncodeJson) {
      return function (f) {
          return function (q) {
              return Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJString)("filter")(f))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(dictEncodeJson)("params")(q))(Data_Argonaut_Core.jsonEmptyObject));
          };
      };
  };
  var encodePursuitType = new Data_Argonaut_Encode_Class.EncodeJson((function () {
      var $188 = Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonJString);
      var $189 = Data_Show.show(showPursuitType);
      return function ($190) {
          return $188($189($190));
      };
  })());
  var encodeNamespace = new Data_Argonaut_Encode_Class.EncodeJson(function (v) {
      if (v instanceof NSValue) {
          return Data_Argonaut_Core.fromString("value");
      };
      if (v instanceof NSType) {
          return Data_Argonaut_Core.fromString("type");
      };
      if (v instanceof NSKind) {
          return Data_Argonaut_Core.fromString("kind");
      };
      throw new Error("Failed pattern match at PscIde.Command (line 202, column 1 - line 205, column 40): " + [ v.constructor.name ]);
  });
  var encodeMaybeNull = function (dictEncodeJson) {
      return Data_Maybe.maybe(Data_Argonaut_Core.jsonNull)(Data_Argonaut_Encode_Class.encodeJson(dictEncodeJson));
  };
  var encodeMatcher = new Data_Argonaut_Encode_Class.EncodeJson(function (v) {
      if (v instanceof Flex) {
          return Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJString)("matcher")("flex"))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("params")(jsonSingletonObject$prime(Data_Argonaut_Encode_Class.encodeJsonJString)("search")(v.value0)))(Data_Argonaut_Core.jsonEmptyObject));
      };
      if (v instanceof Distance) {
          return Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJString)("matcher")("distance"))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("params")(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJString)("search")(v.value0))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonInt)("maximumDistance")(v.value1))(Data_Argonaut_Core.jsonEmptyObject))))(Data_Argonaut_Core.jsonEmptyObject));
      };
      throw new Error("Failed pattern match at PscIde.Command (line 30, column 1 - line 42, column 23): " + [ v.constructor.name ]);
  });
  var encodeImportCommand = new Data_Argonaut_Encode_Class.EncodeJson(function (v) {
      if (v instanceof AddImplicitImport) {
          return Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJString)("importCommand")("addImplicitImport"))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("module")(Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonJString)(v.value0)))(Data_Argonaut_Core.jsonEmptyObject));
      };
      if (v instanceof AddQualifiedImport) {
          return Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJString)("importCommand")("addQualifiedImport"))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("module")(Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonJString)(v.value0)))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("qualifier")(Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonJString)(v.value1)))(Data_Argonaut_Core.jsonEmptyObject)));
      };
      if (v instanceof AddImport) {
          return Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJString)("importCommand")("addImport"))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("identifier")(Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonJString)(v.value0)))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("qualifier")(Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonMaybe(Data_Argonaut_Encode_Class.encodeJsonJString))(v.value1)))(Data_Argonaut_Core.jsonEmptyObject)));
      };
      throw new Error("Failed pattern match at PscIde.Command (line 186, column 1 - line 200, column 23): " + [ v.constructor.name ]);
  });
  var encodeFilter = new Data_Argonaut_Encode_Class.EncodeJson(function (v) {
      if (v instanceof ExactFilter) {
          return filterWrapper(Data_Argonaut_Encode_Class.encodeJsonJson)("exact")(jsonSingletonObject$prime(Data_Argonaut_Encode_Class.encodeJsonJString)("search")(v.value0));
      };
      if (v instanceof PrefixFilter) {
          return filterWrapper(Data_Argonaut_Encode_Class.encodeJsonJson)("prefix")(jsonSingletonObject$prime(Data_Argonaut_Encode_Class.encodeJsonJString)("search")(v.value0));
      };
      if (v instanceof ModuleFilter) {
          return filterWrapper(Data_Argonaut_Encode_Class.encodeJsonJson)("modules")(jsonSingletonObject$prime(Data_Argonaut_Encode_Class.encodeJsonArray(Data_Argonaut_Encode_Class.encodeJsonJString))("modules")(v.value0));
      };
      if (v instanceof DependencyFilter) {
          return filterWrapper(Data_Argonaut_Encode_Class.encodeJsonJson)("dependencies")(jsonSingletonObject$prime(Data_Argonaut_Encode_Class.encodeJsonArray(Data_Argonaut_Encode_Class.encodeJsonJString))("modules")(v.value0));
      };
      throw new Error("Failed pattern match at PscIde.Command (line 59, column 1 - line 67, column 71): " + [ v.constructor.name ]);
  });
  var encodeCompletionOptions = new Data_Argonaut_Encode_Class.EncodeJson(function (v) {
      return Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("maxResults")(encodeMaybeNull(Data_Argonaut_Encode_Class.encodeJsonInt)(v.maxResults)))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("groupReexports")(Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonJBoolean)(v.groupReexports)))(Data_Argonaut_Core.jsonEmptyObject));
  });
  var encodeCodegenTarget = new Data_Argonaut_Encode_Class.EncodeJson(function (v) {
      if (v instanceof JS) {
          return Data_Argonaut_Core.fromString("js");
      };
      if (v instanceof JSSourceMap) {
          return Data_Argonaut_Core.fromString("sourcemaps");
      };
      if (v instanceof CoreFn) {
          return Data_Argonaut_Core.fromString("corefn");
      };
      if (v instanceof Other) {
          return Data_Argonaut_Core.fromString(v.value0);
      };
      throw new Error("Failed pattern match at PscIde.Command (line 207, column 1 - line 211, column 38): " + [ v.constructor.name ]);
  });
  var decodeMessage = new Data_Argonaut_Decode_Class.DecodeJson(function (json) {
      return Data_Maybe.maybe(new Data_Either.Left("Message not string"))(function ($191) {
          return Data_Either.Right.create(Message($191));
      })(Data_Argonaut_Core.toString(json));
  });
  var commandWrapper = function (dictEncodeJson) {
      return function (s) {
          return function (o) {
              return Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJString)("command")(s))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(dictEncodeJson)("params")(o))(Data_Argonaut_Core.jsonEmptyObject));
          };
      };
  };
  var encodeCommand = new Data_Argonaut_Encode_Class.EncodeJson(function (v) {
      if (v instanceof Cwd) {
          return jsonSingletonObject$prime(Data_Argonaut_Encode_Class.encodeJsonJString)("command")("cwd");
      };
      if (v instanceof Ls && v.value0 instanceof LoadedModules) {
          return commandWrapper(Data_Argonaut_Encode_Class.encodeJsonJson)("list")(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJString)("type")("loadedModules"))(Data_Argonaut_Core.jsonEmptyObject));
      };
      if (v instanceof Ls && v.value0 instanceof AvailableModules) {
          return commandWrapper(Data_Argonaut_Encode_Class.encodeJsonJson)("list")(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJString)("type")("availableModules"))(Data_Argonaut_Core.jsonEmptyObject));
      };
      if (v instanceof Ls && v.value0 instanceof Imports) {
          return commandWrapper(Data_Argonaut_Encode_Class.encodeJsonJson)("list")(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJString)("type")("import"))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJString)("file")(v.value0.value0))(Data_Argonaut_Core.jsonEmptyObject)));
      };
      if (v instanceof Quit) {
          return jsonSingletonObject$prime(Data_Argonaut_Encode_Class.encodeJsonJString)("command")("quit");
      };
      if (v instanceof Reset) {
          return jsonSingletonObject$prime(Data_Argonaut_Encode_Class.encodeJsonJString)("command")("reset");
      };
      if (v instanceof Load) {
          return commandWrapper(Data_Argonaut_Encode_Class.encodeJsonJson)("load")(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("modules")(Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonArray(Data_Argonaut_Encode_Class.encodeJsonJString))(v.value0)))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("dependencies")(Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonArray(Data_Argonaut_Encode_Class.encodeJsonJString))(v.value1)))(Data_Argonaut_Core.jsonEmptyObject)));
      };
      if (v instanceof Complete) {
          return commandWrapper(Data_Argonaut_Encode_Class.encodeJsonJson)("complete")(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("filters")(Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonArray(encodeFilter))(v.value0)))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("matcher")(encodeMaybeNull(encodeMatcher)(v.value1)))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("currentModule")(encodeMaybeNull(Data_Argonaut_Encode_Class.encodeJsonJString)(v.value2)))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("options")(Data_Argonaut_Encode_Class.encodeJson(encodeCompletionOptions)(v.value3)))(Data_Argonaut_Core.jsonEmptyObject)))));
      };
      if (v instanceof Pursuit) {
          return commandWrapper(Data_Argonaut_Encode_Class.encodeJsonJson)("pursuit")(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("type")(Data_Argonaut_Encode_Class.encodeJson(encodePursuitType)(v.value0)))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJString)("query")(v.value1))(Data_Argonaut_Core.jsonEmptyObject)));
      };
      if (v instanceof Type) {
          return commandWrapper(Data_Argonaut_Encode_Class.encodeJsonJson)("type")(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("search")(Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonJString)(v.value0)))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("filters")(Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonArray(encodeFilter))(v.value1)))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("currentModule")(encodeMaybeNull(Data_Argonaut_Encode_Class.encodeJsonJString)(v.value2)))(Data_Argonaut_Core.jsonEmptyObject))));
      };
      if (v instanceof AddClause) {
          return commandWrapper(Data_Argonaut_Encode_Class.encodeJsonJson)("addClause")(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("line")(Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonJString)(v.value0)))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("annotations")(Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonJBoolean)(v.value1)))(Data_Argonaut_Core.jsonEmptyObject)));
      };
      if (v instanceof CaseSplit) {
          return commandWrapper(Data_Argonaut_Encode_Class.encodeJsonJson)("caseSplit")(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("line")(Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonJString)(v.value0)))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("begin")(Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonInt)(v.value1)))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("end")(Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonInt)(v.value2)))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("annotations")(Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonJBoolean)(v.value3)))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("type")(Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonJString)(v.value4)))(Data_Argonaut_Core.jsonEmptyObject))))));
      };
      if (v instanceof ImportCmd) {
          return commandWrapper(Data_Argonaut_Encode_Class.encodeJsonJson)("import")(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("file")(Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonJString)(v.value0)))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("outfile")(encodeMaybeNull(Data_Argonaut_Encode_Class.encodeJsonJString)(v.value1)))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("filters")(Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonArray(encodeFilter))(v.value2)))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("importCommand")(Data_Argonaut_Encode_Class.encodeJson(encodeImportCommand)(v.value3)))(Data_Argonaut_Core.jsonEmptyObject)))));
      };
      if (v instanceof RebuildCmd) {
          return commandWrapper(Data_Argonaut_Encode_Class.encodeJsonJson)("rebuild")(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("file")(Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonJString)(v.value0)))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("actualFile")(encodeMaybeNull(Data_Argonaut_Encode_Class.encodeJsonJString)(v.value1)))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("codegen")(encodeMaybeNull(Data_Argonaut_Encode_Class.encodeJsonArray(encodeCodegenTarget))(v.value2)))(Data_Argonaut_Core.jsonEmptyObject))));
      };
      if (v instanceof Usages) {
          return commandWrapper(Data_Argonaut_Encode_Class.encodeJsonJson)("usages")(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("module")(Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonJString)(v.value0)))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("namespace")(Data_Argonaut_Encode_Class.encodeJson(encodeNamespace)(v.value1)))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("identifier")(Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonJString)(v.value2)))(Data_Argonaut_Core.jsonEmptyObject))));
      };
      throw new Error("Failed pattern match at PscIde.Command (line 108, column 1 - line 181, column 6): " + [ v.constructor.name ]);
  });
  exports["Package"] = Package;
  exports["Ident"] = Ident;
  exports["Flex"] = Flex;
  exports["Distance"] = Distance;
  exports["ExactFilter"] = ExactFilter;
  exports["PrefixFilter"] = PrefixFilter;
  exports["ModuleFilter"] = ModuleFilter;
  exports["DependencyFilter"] = DependencyFilter;
  exports["filterWrapper"] = filterWrapper;
  exports["Cwd"] = Cwd;
  exports["Ls"] = Ls;
  exports["Quit"] = Quit;
  exports["Reset"] = Reset;
  exports["Load"] = Load;
  exports["Complete"] = Complete;
  exports["Pursuit"] = Pursuit;
  exports["Type"] = Type;
  exports["AddClause"] = AddClause;
  exports["CaseSplit"] = CaseSplit;
  exports["ImportCmd"] = ImportCmd;
  exports["RebuildCmd"] = RebuildCmd;
  exports["Usages"] = Usages;
  exports["LoadedModules"] = LoadedModules;
  exports["Imports"] = Imports;
  exports["AvailableModules"] = AvailableModules;
  exports["NSValue"] = NSValue;
  exports["NSType"] = NSType;
  exports["NSKind"] = NSKind;
  exports["JS"] = JS;
  exports["JSSourceMap"] = JSSourceMap;
  exports["CoreFn"] = CoreFn;
  exports["Other"] = Other;
  exports["AddImplicitImport"] = AddImplicitImport;
  exports["AddQualifiedImport"] = AddQualifiedImport;
  exports["AddImport"] = AddImport;
  exports["commandWrapper"] = commandWrapper;
  exports["encodeMaybeNull"] = encodeMaybeNull;
  exports["Message"] = Message;
  exports["unwrapResponse"] = unwrapResponse;
  exports["showPursuitType"] = showPursuitType;
  exports["encodePursuitType"] = encodePursuitType;
  exports["encodeMatcher"] = encodeMatcher;
  exports["encodeFilter"] = encodeFilter;
  exports["encodeCompletionOptions"] = encodeCompletionOptions;
  exports["encodeCommand"] = encodeCommand;
  exports["encodeImportCommand"] = encodeImportCommand;
  exports["encodeNamespace"] = encodeNamespace;
  exports["encodeCodegenTarget"] = encodeCodegenTarget;
  exports["decodeMessage"] = decodeMessage;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["PscIde"] = $PS["PscIde"] || {};
  var exports = $PS["PscIde"];
  var $foreign = $PS["PscIde"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Argonaut_Core = $PS["Data.Argonaut.Core"];
  var Data_Argonaut_Decode_Class = $PS["Data.Argonaut.Decode.Class"];
  var Data_Argonaut_Encode_Class = $PS["Data.Argonaut.Encode.Class"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var PscIde_Command = $PS["PscIde.Command"];                
  var sendCommandR = function (dictEncodeJson) {
      return function (dictDecodeJson) {
          return function (dictDecodeJson1) {
              return function (port) {
                  return function (command) {
                      return Effect_Aff.makeAff(function (cb) {
                          return Data_Functor.voidRight(Effect.functorEffect)(Effect_Aff.nonCanceler)($foreign.send(Data_Argonaut_Core.stringify(Data_Argonaut_Encode_Class.encodeJson(dictEncodeJson)(command)))(port)((function () {
                              var $6 = PscIde_Command.unwrapResponse(dictDecodeJson)(dictDecodeJson1);
                              return function ($7) {
                                  return cb(Data_Either.Right.create($6($7)));
                              };
                          })())(function ($8) {
                              return cb(Data_Either.Left.create($8));
                          }));
                      });
                  };
              };
          };
      };
  };
  var sendCommand = function (dictEncodeJson) {
      return function (dictDecodeJson) {
          return function (port) {
              return function (command) {
                  return Effect_Aff.makeAff(function (cb) {
                      return Data_Functor.voidRight(Effect.functorEffect)(Effect_Aff.nonCanceler)($foreign.send(Data_Argonaut_Core.stringify(Data_Argonaut_Encode_Class.encodeJson(dictEncodeJson)(command)))(port)((function () {
                          var $9 = Control_Bind.join(Data_Either.bindEither);
                          var $10 = PscIde_Command.unwrapResponse(Data_Argonaut_Decode_Class.decodeJsonString)(dictDecodeJson);
                          return function ($11) {
                              return cb(Data_Either.Right.create($9($10($11))));
                          };
                      })())(function ($12) {
                          return cb(Data_Either.Left.create($12));
                      }));
                  });
              };
          };
      };
  };
  var quit = function (port) {
      return sendCommand(PscIde_Command.encodeCommand)(PscIde_Command.decodeMessage)(port)(PscIde_Command.Quit.value);
  };
  var load = function (port) {
      return function (ms) {
          return function (ds) {
              return sendCommand(PscIde_Command.encodeCommand)(PscIde_Command.decodeMessage)(port)(new PscIde_Command.Load(ms, ds));
          };
      };
  };
  var cwd = function (port) {
      return sendCommand(PscIde_Command.encodeCommand)(PscIde_Command.decodeMessage)(port)(PscIde_Command.Cwd.value);
  };
  exports["sendCommandR"] = sendCommandR;
  exports["sendCommand"] = sendCommand;
  exports["cwd"] = cwd;
  exports["load"] = load;
  exports["quit"] = quit;
})(PS);
(function(exports) {
  exports.clearConsole = function() {
      process.stdout.write('\033c');
  };
})(PS["Pscid.Console"] = PS["Pscid.Console"] || {});
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Pscid.Console"] = $PS["Pscid.Console"] || {};
  var exports = $PS["Pscid.Console"];
  var $foreign = $PS["Pscid.Console"];
  var Ansi_Codes = $PS["Ansi.Codes"];
  var Ansi_Output = $PS["Ansi.Output"];
  var Effect_Console = $PS["Effect.Console"];                
  var owl = "\x0a  ___     ,_,        ___        ,_,     ___\x0a (o,o)   (o,o)   ,,,(o,o),,,   (o,o)   (o,o)\x0a {`\"'}   {`\"'}    ';:`-':;'    {`\"'}   {`\"'}\x0a -\"-\"-   -\"-\"-                 -\"-\"-   -\"-\"-\x0a  ";
  var logColored = function (c) {
      var $0 = Ansi_Output.withGraphics(Ansi_Output.foreground(c));
      return function ($1) {
          return Effect_Console.log($0($1));
      };
  };
  var suggestionHint = logColored(Ansi_Codes.Blue.value)("Press s to automatically apply the suggestion.");
  var helpText = "\x0aPress b to run a full build (tries \"npm run pscid:build\" then \"npm run build\" then \"spago/pulp build\")\x0aPress t to test (tries \"npm run pscid:test\" then \"npm run test\" then \"spago/pulp test\")\x0aPress r to reset\x0aPress q to quit\x0a  ";
  var startScreen = function __do() {
      Effect_Console.log(owl)();
      return logColored(Ansi_Codes.Blue.value)(helpText)();
  };
  exports["logColored"] = logColored;
  exports["owl"] = owl;
  exports["helpText"] = helpText;
  exports["startScreen"] = startScreen;
  exports["suggestionHint"] = suggestionHint;
  exports["clearConsole"] = $foreign.clearConsole;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Pscid.Error"] = $PS["Pscid.Error"] || {};
  var exports = $PS["Pscid.Error"];
  var Ansi_Codes = $PS["Ansi.Codes"];
  var Data_Function = $PS["Data.Function"];
  var Effect_Console = $PS["Effect.Console"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Node_Process = $PS["Node.Process"];
  var Pscid_Console = $PS["Pscid.Console"];                
  var noSourceDirectoryError = function __do() {
      Pscid_Console.logColored(Ansi_Codes.Red.value)("ERROR:")();
      Effect_Console.log("I couldn't find any source directories to watch when trying app/, src/, test/ and tests/.\x0aYou can specify your own semicolon separated list of folders to check with the -I option like so:\x0a\x0a$ pscid -I \"sources;tests\" ")();
      return Node_Process.exit(1)();
  };
  var catchLog = function (m) {
      return Effect_Exception.catchException(Data_Function["const"](Effect_Console.error(m)));
  };
  exports["catchLog"] = catchLog;
  exports["noSourceDirectoryError"] = noSourceDirectoryError;
})(PS);
(function(exports) {
  
  var keypress =require("keypress"); 

  exports.initializeKeypresses = function() {
    keypress(process.stdin);
    process.stdin.setRawMode(true);
    process.stdin.resume();
  };

  exports.onKeypress = function(cb){
    return function(){
      process.stdin.on('keypress', function (ch, key){
        if (key) {
          cb(key)();
        }
      });
    };
  };
})(PS["Pscid.Keypress"] = PS["Pscid.Keypress"] || {});
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Pscid.Keypress"] = $PS["Pscid.Keypress"] || {};
  var exports = $PS["Pscid.Keypress"];
  var $foreign = $PS["Pscid.Keypress"];
  exports["initializeKeypresses"] = $foreign.initializeKeypresses;
  exports["onKeypress"] = $foreign.onKeypress;
})(PS);
(function(exports) {
  //module Pscid.Options

  exports.isSpagoProject = function(){
    try {
      return fs.existsSync(process.cwd() + '/spago.dhall');
    } catch (e) {
      return false;
    }
  }

  exports.hasNamedScript = function(name){
    return function(){
      try {
        var pjson = require(process.cwd() + '/package.json');
        return pjson.scripts && pjson.scripts[name];
      } catch (e) {
        return false;
      }
    };
  };

  exports.glob = function(pattern) {
    return function() {
      return require('glob').sync(pattern);
    };
  };
})(PS["Pscid.Options"] = PS["Pscid.Options"] || {});
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Options.Applicative.Types"] = $PS["Options.Applicative.Types"] || {};
  var exports = $PS["Options.Applicative.Types"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Alternative = $PS["Control.Alternative"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Control_Monad_Free = $PS["Control.Monad.Free"];
  var Control_Monad_Reader_Class = $PS["Control.Monad.Reader.Class"];
  var Control_Monad_Reader_Trans = $PS["Control.Monad.Reader.Trans"];
  var Control_Monad_Rec_Class = $PS["Control.Monad.Rec.Class"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Exists = $PS["Data.Exists"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];                                                  
  var ParserFailure = function (x) {
      return x;
  };
  var Internal = (function () {
      function Internal() {

      };
      Internal.value = new Internal();
      return Internal;
  })();
  var Hidden = (function () {
      function Hidden() {

      };
      Hidden.value = new Hidden();
      return Hidden;
  })();
  var Visible = (function () {
      function Visible() {

      };
      Visible.value = new Visible();
      return Visible;
  })();
  var Leaf = (function () {
      function Leaf(value0) {
          this.value0 = value0;
      };
      Leaf.create = function (value0) {
          return new Leaf(value0);
      };
      return Leaf;
  })();
  var MultNode = (function () {
      function MultNode(value0) {
          this.value0 = value0;
      };
      MultNode.create = function (value0) {
          return new MultNode(value0);
      };
      return MultNode;
  })();
  var AltNode = (function () {
      function AltNode(value0) {
          this.value0 = value0;
      };
      AltNode.create = function (value0) {
          return new AltNode(value0);
      };
      return AltNode;
  })();
  var OptProperties = function (x) {
      return x;
  };
  var OptShort = (function () {
      function OptShort(value0) {
          this.value0 = value0;
      };
      OptShort.create = function (value0) {
          return new OptShort(value0);
      };
      return OptShort;
  })();
  var OptLong = (function () {
      function OptLong(value0) {
          this.value0 = value0;
      };
      OptLong.create = function (value0) {
          return new OptLong(value0);
      };
      return OptLong;
  })();
  var OptHelpInfo = function (x) {
      return x;
  };
  var CmdStart = (function () {
      function CmdStart() {

      };
      CmdStart.value = new CmdStart();
      return CmdStart;
  })();
  var CmdCont = (function () {
      function CmdCont() {

      };
      CmdCont.value = new CmdCont();
      return CmdCont;
  })();
  var CompletionResult = function (x) {
      return x;
  };
  var Success = (function () {
      function Success(value0) {
          this.value0 = value0;
      };
      Success.create = function (value0) {
          return new Success(value0);
      };
      return Success;
  })();
  var Failure = (function () {
      function Failure(value0) {
          this.value0 = value0;
      };
      Failure.create = function (value0) {
          return new Failure(value0);
      };
      return Failure;
  })();
  var CompletionInvoked = (function () {
      function CompletionInvoked(value0) {
          this.value0 = value0;
      };
      CompletionInvoked.create = function (value0) {
          return new CompletionInvoked(value0);
      };
      return CompletionInvoked;
  })();
  var Completer = function (x) {
      return x;
  };
  var Backtrack = (function () {
      function Backtrack() {

      };
      Backtrack.value = new Backtrack();
      return Backtrack;
  })();
  var NoBacktrack = (function () {
      function NoBacktrack() {

      };
      NoBacktrack.value = new NoBacktrack();
      return NoBacktrack;
  })();
  var SubparserInline = (function () {
      function SubparserInline() {

      };
      SubparserInline.value = new SubparserInline();
      return SubparserInline;
  })();
  var ParserPrefs = function (x) {
      return x;
  };
  var Intersperse = (function () {
      function Intersperse() {

      };
      Intersperse.value = new Intersperse();
      return Intersperse;
  })();
  var NoIntersperse = (function () {
      function NoIntersperse() {

      };
      NoIntersperse.value = new NoIntersperse();
      return NoIntersperse;
  })();
  var AllPositionals = (function () {
      function AllPositionals() {

      };
      AllPositionals.value = new AllPositionals();
      return AllPositionals;
  })();
  var ForwardOptions = (function () {
      function ForwardOptions() {

      };
      ForwardOptions.value = new ForwardOptions();
      return ForwardOptions;
  })();
  var ParserInfo = function (x) {
      return x;
  };
  var NilP = (function () {
      function NilP(value0) {
          this.value0 = value0;
      };
      NilP.create = function (value0) {
          return new NilP(value0);
      };
      return NilP;
  })();
  var OptP = (function () {
      function OptP(value0) {
          this.value0 = value0;
      };
      OptP.create = function (value0) {
          return new OptP(value0);
      };
      return OptP;
  })();
  var MultP = (function () {
      function MultP(value0) {
          this.value0 = value0;
      };
      MultP.create = function (value0) {
          return new MultP(value0);
      };
      return MultP;
  })();
  var AltP = (function () {
      function AltP(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      AltP.create = function (value0) {
          return function (value1) {
              return new AltP(value0, value1);
          };
      };
      return AltP;
  })();
  var BindP = (function () {
      function BindP(value0) {
          this.value0 = value0;
      };
      BindP.create = function (value0) {
          return new BindP(value0);
      };
      return BindP;
  })();
  var Option = function (x) {
      return x;
  };
  var OptReader = (function () {
      function OptReader(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      OptReader.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new OptReader(value0, value1, value2);
              };
          };
      };
      return OptReader;
  })();
  var FlagReader = (function () {
      function FlagReader(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      FlagReader.create = function (value0) {
          return function (value1) {
              return new FlagReader(value0, value1);
          };
      };
      return FlagReader;
  })();
  var ArgReader = (function () {
      function ArgReader(value0) {
          this.value0 = value0;
      };
      ArgReader.create = function (value0) {
          return new ArgReader(value0);
      };
      return ArgReader;
  })();
  var CmdReader = (function () {
      function CmdReader(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      CmdReader.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new CmdReader(value0, value1, value2);
              };
          };
      };
      return CmdReader;
  })();
  var CReader = function (x) {
      return x;
  };
  var ReadM = function (x) {
      return x;
  };
  var ErrorMsg = (function () {
      function ErrorMsg(value0) {
          this.value0 = value0;
      };
      ErrorMsg.create = function (value0) {
          return new ErrorMsg(value0);
      };
      return ErrorMsg;
  })();
  var InfoMsg = (function () {
      function InfoMsg(value0) {
          this.value0 = value0;
      };
      InfoMsg.create = function (value0) {
          return new InfoMsg(value0);
      };
      return InfoMsg;
  })();
  var ShowHelpText = (function () {
      function ShowHelpText() {

      };
      ShowHelpText.value = new ShowHelpText();
      return ShowHelpText;
  })();
  var UnknownError = (function () {
      function UnknownError() {

      };
      UnknownError.value = new UnknownError();
      return UnknownError;
  })();
  var MissingError = (function () {
      function MissingError(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      MissingError.create = function (value0) {
          return function (value1) {
              return new MissingError(value0, value1);
          };
      };
      return MissingError;
  })();
  var ExpectsArgError = (function () {
      function ExpectsArgError(value0) {
          this.value0 = value0;
      };
      ExpectsArgError.create = function (value0) {
          return new ExpectsArgError(value0);
      };
      return ExpectsArgError;
  })();
  var UnexpectedError = (function () {
      function UnexpectedError(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      UnexpectedError.create = function (value0) {
          return function (value1) {
              return new UnexpectedError(value0, value1);
          };
      };
      return UnexpectedError;
  })();
  var SomeParser = (function () {
      function SomeParser(value0) {
          this.value0 = value0;
      };
      SomeParser.create = function (value0) {
          return new SomeParser(value0);
      };
      return SomeParser;
  })();
  var MultPE = (function () {
      function MultPE(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      MultPE.create = function (value0) {
          return function (value1) {
              return new MultPE(value0, value1);
          };
      };
      return MultPE;
  })();
  var Context = (function () {
      function Context(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Context.create = function (value0) {
          return function (value1) {
              return new Context(value0, value1);
          };
      };
      return Context;
  })();
  var ParserM = function (x) {
      return x;
  };
  var readerAsk = Control_Monad_Reader_Class.ask(Control_Monad_Reader_Trans.monadAskReaderT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)));
  var readerAbort = (function () {
      var $280 = Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity));
      var $281 = Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(Data_Identity.monadIdentity));
      return function ($282) {
          return ReadM($280($281($282)));
      };
  })();
  var readerError = function ($283) {
      return readerAbort(ErrorMsg.create($283));
  };
  var readMNewtype = new Data_Newtype.Newtype(function (n) {
      return n;
  }, ReadM);
  var readMFunctor = new Data_Functor.Functor(function (f) {
      return function (v) {
          return Data_Functor.map(Control_Monad_Reader_Trans.functorReaderT(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity)))(f)(v);
      };
  });
  var readMApply = new Control_Apply.Apply(function () {
      return readMFunctor;
  }, function (v) {
      return function (v1) {
          return ReadM(Control_Apply.apply(Control_Monad_Reader_Trans.applyReaderT(Control_Monad_Except_Trans.applyExceptT(Data_Identity.monadIdentity)))(v)(v1));
      };
  });
  var readMBind = new Control_Bind.Bind(function () {
      return readMApply;
  }, function (v) {
      return function (f) {
          return ReadM(Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity)))(v)((function () {
              var $284 = Data_Newtype.un(readMNewtype)(ReadM);
              return function ($285) {
                  return $284(f($285));
              };
          })()));
      };
  });
  var readMApplicative = new Control_Applicative.Applicative(function () {
      return readMApply;
  }, (function () {
      var $286 = Control_Applicative.pure(Control_Monad_Reader_Trans.applicativeReaderT(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity)));
      return function ($287) {
          return ReadM($286($287));
      };
  })());
  var parserPrefsNewtype = new Data_Newtype.Newtype(function (n) {
      return n;
  }, ParserPrefs);
  var parserMMonadRec = Control_Monad_Free.freeMonadRec;
  var parserMBind = Control_Monad_Free.freeBind;  
  var parserMApplicative = Control_Monad_Free.freeApplicative;
  var parserInfoNewtype = new Data_Newtype.Newtype(function (n) {
      return n;
  }, ParserInfo);
  var parseErrorSemigroup = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          if (v1 instanceof UnknownError) {
              return v;
          };
          return v1;
      };
  });
  var parseErrorMonoid = new Data_Monoid.Monoid(function () {
      return parseErrorSemigroup;
  }, UnknownError.value);
  var optionNewtype = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Option);
  var optVisibilityEq = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Internal && y instanceof Internal) {
              return true;
          };
          if (x instanceof Hidden && y instanceof Hidden) {
              return true;
          };
          if (x instanceof Visible && y instanceof Visible) {
              return true;
          };
          return false;
      };
  });
  var optVisibilityOrd = new Data_Ord.Ord(function () {
      return optVisibilityEq;
  }, function (x) {
      return function (y) {
          if (x instanceof Internal && y instanceof Internal) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof Internal) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Internal) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Hidden && y instanceof Hidden) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof Hidden) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Hidden) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Visible && y instanceof Visible) {
              return Data_Ordering.EQ.value;
          };
          throw new Error("Failed pattern match at Options.Applicative.Types (line 166, column 1 - line 166, column 54): " + [ x.constructor.name, y.constructor.name ]);
      };
  });
  var optPropertiesNewtype = new Data_Newtype.Newtype(function (n) {
      return n;
  }, OptProperties);
  var optShowDefault = (function () {
      var $288 = Data_Newtype.un(optPropertiesNewtype)(OptProperties);
      var $289 = Data_Newtype.un(optionNewtype)(Option);
      return function ($290) {
          return (function (v) {
              return v.propShowDefault;
          })($288((function (v) {
              return v.optProps;
          })($289($290))));
      };
  })();
  var optVisibility = (function () {
      var $291 = Data_Newtype.un(optPropertiesNewtype)(OptProperties);
      var $292 = Data_Newtype.un(optionNewtype)(Option);
      return function ($293) {
          return (function (v) {
              return v.propVisibility;
          })($291((function (v) {
              return v.optProps;
          })($292($293))));
      };
  })();  
  var optNameEq = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof OptShort && y instanceof OptShort) {
              return x.value0 === y.value0;
          };
          if (x instanceof OptLong && y instanceof OptLong) {
              return x.value0 === y.value0;
          };
          return false;
      };
  });
  var optNameOrd = new Data_Ord.Ord(function () {
      return optNameEq;
  }, function (x) {
      return function (y) {
          if (x instanceof OptShort && y instanceof OptShort) {
              return Data_Ord.compare(Data_Ord.ordChar)(x.value0)(y.value0);
          };
          if (x instanceof OptShort) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof OptShort) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof OptLong && y instanceof OptLong) {
              return Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
          };
          throw new Error("Failed pattern match at Options.Applicative.Types (line 154, column 1 - line 154, column 42): " + [ x.constructor.name, y.constructor.name ]);
      };
  });
  var optMetaVar = (function () {
      var $294 = Data_Newtype.un(optPropertiesNewtype)(OptProperties);
      var $295 = Data_Newtype.un(optionNewtype)(Option);
      return function ($296) {
          return (function (v) {
              return v.propMetaVar;
          })($294((function (v) {
              return v.optProps;
          })($295($296))));
      };
  })();
  var optHelp = (function () {
      var $297 = Data_Newtype.un(optPropertiesNewtype)(OptProperties);
      var $298 = Data_Newtype.un(optionNewtype)(Option);
      return function ($299) {
          return (function (v) {
              return v.propHelp;
          })($297((function (v) {
              return v.optProps;
          })($298($299))));
      };
  })();
  var optDescMod = (function () {
      var $300 = Data_Newtype.un(optPropertiesNewtype)(OptProperties);
      var $301 = Data_Newtype.un(optionNewtype)(Option);
      return function ($302) {
          return (function (v) {
              return v.propDescMod;
          })($300((function (v) {
              return v.optProps;
          })($301($302))));
      };
  })();
  var oneM = function ($303) {
      return ParserM(Control_Monad_Free.liftF($303));
  };
  var newtypeParserFailure = new Data_Newtype.Newtype(function (n) {
      return n;
  }, ParserFailure);
  var newtypeOptHelpInfo = new Data_Newtype.Newtype(function (n) {
      return n;
  }, OptHelpInfo);
  var newtypeCompletionResult = new Data_Newtype.Newtype(function (n) {
      return n;
  }, CompletionResult);
  var newtypeCompleter = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Completer);
  var newtypeCReader = new Data_Newtype.Newtype(function (n) {
      return n;
  }, CReader);
  var fromM = function (v) {
      return new BindP(v);
  };
  var completerSemigroup = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          return Completer(function (s) {
              return Control_Apply.apply(Effect.applyEffect)(Data_Functor.map(Effect.functorEffect)(Data_Semigroup.append(Data_Semigroup.semigroupArray))(v(s)))(v1(s));
          });
      };
  });
  var completerMonoid = new Data_Monoid.Monoid(function () {
      return completerSemigroup;
  }, Completer(function (v) {
      return Control_Applicative.pure(Effect.applicativeEffect)([  ]);
  }));
  var cReaderFunctor = new Data_Functor.Functor(function (f) {
      return Data_Newtype.over(newtypeCReader)(newtypeCReader)(CReader)(function (r) {
          return {
              crReader: Data_Functor.map(readMFunctor)(f)(r.crReader),
              crCompleter: r.crCompleter
          };
      });
  });
  var parserInfoFunctor = new Data_Functor.Functor(function (f) {
      return Data_Newtype.over(parserInfoNewtype)(parserInfoNewtype)(ParserInfo)(function (i) {
          return {
              infoParser: Data_Functor.map(parserFunctor)(f)(i.infoParser),
              infoFailureCode: i.infoFailureCode,
              infoFooter: i.infoFooter,
              infoFullDesc: i.infoFullDesc,
              infoHeader: i.infoHeader,
              infoPolicy: i.infoPolicy,
              infoProgDesc: i.infoProgDesc
          };
      });
  });
  var parserFunctor = new Data_Functor.Functor(function (f) {
      return function (v) {
          if (v instanceof NilP) {
              return new NilP(Data_Functor.map(Data_Maybe.functorMaybe)(f)(v.value0));
          };
          if (v instanceof OptP) {
              return new OptP(Data_Functor.map(optionFunctor)(f)(v.value0));
          };
          if (v instanceof MultP) {
              return Data_Exists.runExists(function (v1) {
                  return MultP.create(Data_Exists.mkExists(new MultPE(Data_Functor.map(parserFunctor)(function (v2) {
                      return function ($304) {
                          return f(v2($304));
                      };
                  })(v1.value0), v1.value1)));
              })(v.value0);
          };
          if (v instanceof AltP) {
              return new AltP(Data_Functor.map(parserFunctor)(f)(v.value0), Data_Functor.map(parserFunctor)(f)(v.value1));
          };
          if (v instanceof BindP) {
              return BindP.create(Data_Functor.map(Control_Monad_Free.freeFunctor)(f)(v.value0));
          };
          throw new Error("Failed pattern match at Options.Applicative.Types (line 331, column 1 - line 336, column 36): " + [ f.constructor.name, v.constructor.name ]);
      };
  });
  var optionFunctor = new Data_Functor.Functor(function (f) {
      return Data_Newtype.over(optionNewtype)(optionNewtype)(Option)(function (o) {
          return {
              optMain: Data_Functor.map(optReaderFunctor)(f)(o.optMain),
              optProps: o.optProps
          };
      });
  });
  var optReaderFunctor = new Data_Functor.Functor(function (f) {
      return function (v) {
          if (v instanceof OptReader) {
              return new OptReader(v.value0, Data_Functor.map(cReaderFunctor)(f)(v.value1), v.value2);
          };
          if (v instanceof FlagReader) {
              return new FlagReader(v.value0, f(v.value1));
          };
          if (v instanceof ArgReader) {
              return new ArgReader(Data_Functor.map(cReaderFunctor)(f)(v.value0));
          };
          if (v instanceof CmdReader) {
              return new CmdReader(v.value0, v.value1, (function () {
                  var $305 = Data_Functor.map(Data_Maybe.functorMaybe)(Data_Functor.map(parserInfoFunctor)(f));
                  return function ($306) {
                      return $305(v.value2($306));
                  };
              })());
          };
          throw new Error("Failed pattern match at Options.Applicative.Types (line 278, column 1 - line 282, column 68): " + [ f.constructor.name, v.constructor.name ]);
      };
  });
  var parserAlt = new Control_Alt.Alt(function () {
      return parserFunctor;
  }, AltP.create);
  var parserPlus = new Control_Plus.Plus(function () {
      return parserAlt;
  }, new NilP(Data_Maybe.Nothing.value));
  var parserApply = new Control_Apply.Apply(function () {
      return parserFunctor;
  }, function (a) {
      return function (b) {
          return new MultP(Data_Exists.mkExists(new MultPE(a, b)));
      };
  });
  var parserApplicative = new Control_Applicative.Applicative(function () {
      return parserApply;
  }, function ($307) {
      return NilP.create(Data_Maybe.Just.create($307));
  });
  var manyM = function (p) {
      var go = function (acc) {
          return Control_Bind.bind(parserMBind)(oneM(Control_Alt.alt(parserAlt)(Data_Functor.map(parserFunctor)(Control_Monad_Rec_Class.Loop.create)(p))(Control_Applicative.pure(parserApplicative)(new Control_Monad_Rec_Class.Done(Data_Unit.unit)))))(function (v) {
              return Control_Applicative.pure(parserMApplicative)(Data_Bifunctor.bimap(Control_Monad_Rec_Class.bifunctorStep)(function (v1) {
                  return new Data_List_Types.Cons(v1, acc);
              })(function (v1) {
                  return Data_List.reverse(acc);
              })(v));
          });
      };
      return Control_Monad_Rec_Class.tailRecM(parserMMonadRec)(go)(Data_List_Types.Nil.value);
  };
  var many = function ($308) {
      return fromM(manyM($308));
  };
  var parserAlternative = new Control_Alternative.Alternative(function () {
      return parserApplicative;
  }, function () {
      return parserPlus;
  });      
  var argPolicyEq = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Intersperse && y instanceof Intersperse) {
              return true;
          };
          if (x instanceof NoIntersperse && y instanceof NoIntersperse) {
              return true;
          };
          if (x instanceof AllPositionals && y instanceof AllPositionals) {
              return true;
          };
          if (x instanceof ForwardOptions && y instanceof ForwardOptions) {
              return true;
          };
          return false;
      };
  });
  exports["ErrorMsg"] = ErrorMsg;
  exports["InfoMsg"] = InfoMsg;
  exports["ShowHelpText"] = ShowHelpText;
  exports["UnknownError"] = UnknownError;
  exports["MissingError"] = MissingError;
  exports["ExpectsArgError"] = ExpectsArgError;
  exports["UnexpectedError"] = UnexpectedError;
  exports["ParserInfo"] = ParserInfo;
  exports["ParserPrefs"] = ParserPrefs;
  exports["Option"] = Option;
  exports["OptShort"] = OptShort;
  exports["OptLong"] = OptLong;
  exports["OptReader"] = OptReader;
  exports["FlagReader"] = FlagReader;
  exports["ArgReader"] = ArgReader;
  exports["CmdReader"] = CmdReader;
  exports["OptProperties"] = OptProperties;
  exports["Internal"] = Internal;
  exports["Hidden"] = Hidden;
  exports["Visible"] = Visible;
  exports["Backtrack"] = Backtrack;
  exports["NoBacktrack"] = NoBacktrack;
  exports["SubparserInline"] = SubparserInline;
  exports["ReadM"] = ReadM;
  exports["readerAsk"] = readerAsk;
  exports["readerAbort"] = readerAbort;
  exports["readerError"] = readerError;
  exports["CReader"] = CReader;
  exports["NilP"] = NilP;
  exports["OptP"] = OptP;
  exports["MultP"] = MultP;
  exports["AltP"] = AltP;
  exports["BindP"] = BindP;
  exports["MultPE"] = MultPE;
  exports["Completer"] = Completer;
  exports["CompletionResult"] = CompletionResult;
  exports["ParserFailure"] = ParserFailure;
  exports["Success"] = Success;
  exports["Failure"] = Failure;
  exports["CompletionInvoked"] = CompletionInvoked;
  exports["Intersperse"] = Intersperse;
  exports["NoIntersperse"] = NoIntersperse;
  exports["AllPositionals"] = AllPositionals;
  exports["ForwardOptions"] = ForwardOptions;
  exports["OptHelpInfo"] = OptHelpInfo;
  exports["Leaf"] = Leaf;
  exports["MultNode"] = MultNode;
  exports["AltNode"] = AltNode;
  exports["SomeParser"] = SomeParser;
  exports["Context"] = Context;
  exports["CmdStart"] = CmdStart;
  exports["CmdCont"] = CmdCont;
  exports["optVisibility"] = optVisibility;
  exports["optMetaVar"] = optMetaVar;
  exports["optHelp"] = optHelp;
  exports["optShowDefault"] = optShowDefault;
  exports["optDescMod"] = optDescMod;
  exports["many"] = many;
  exports["parseErrorMonoid"] = parseErrorMonoid;
  exports["parseErrorSemigroup"] = parseErrorSemigroup;
  exports["parserInfoNewtype"] = parserInfoNewtype;
  exports["parserInfoFunctor"] = parserInfoFunctor;
  exports["parserPrefsNewtype"] = parserPrefsNewtype;
  exports["optNameEq"] = optNameEq;
  exports["optNameOrd"] = optNameOrd;
  exports["optVisibilityEq"] = optVisibilityEq;
  exports["optVisibilityOrd"] = optVisibilityOrd;
  exports["optPropertiesNewtype"] = optPropertiesNewtype;
  exports["optionNewtype"] = optionNewtype;
  exports["optionFunctor"] = optionFunctor;
  exports["readMNewtype"] = readMNewtype;
  exports["readMFunctor"] = readMFunctor;
  exports["readMApply"] = readMApply;
  exports["readMApplicative"] = readMApplicative;
  exports["readMBind"] = readMBind;
  exports["newtypeCReader"] = newtypeCReader;
  exports["cReaderFunctor"] = cReaderFunctor;
  exports["optReaderFunctor"] = optReaderFunctor;
  exports["parserFunctor"] = parserFunctor;
  exports["parserApply"] = parserApply;
  exports["parserApplicative"] = parserApplicative;
  exports["parserAlt"] = parserAlt;
  exports["parserPlus"] = parserPlus;
  exports["parserAlternative"] = parserAlternative;
  exports["newtypeCompleter"] = newtypeCompleter;
  exports["completerSemigroup"] = completerSemigroup;
  exports["completerMonoid"] = completerMonoid;
  exports["newtypeCompletionResult"] = newtypeCompletionResult;
  exports["newtypeParserFailure"] = newtypeParserFailure;
  exports["argPolicyEq"] = argPolicyEq;
  exports["newtypeOptHelpInfo"] = newtypeOptHelpInfo;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Options.Applicative.Internal"] = $PS["Options.Applicative.Internal"] || {};
  var exports = $PS["Options.Applicative.Internal"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Alternative = $PS["Control.Alternative"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Except = $PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Control_Monad_Reader = $PS["Control.Monad.Reader"];
  var Control_Monad_Reader_Class = $PS["Control.Monad.Reader.Class"];
  var Control_Monad_Reader_Trans = $PS["Control.Monad.Reader.Trans"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Control_Monad_State_Trans = $PS["Control.Monad.State.Trans"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Control_MonadPlus = $PS["Control.MonadPlus"];
  var Control_MonadZero = $PS["Control.MonadZero"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Array = $PS["Data.Array"];
  var Data_Either = $PS["Data.Either"];
  var Data_Exists = $PS["Data.Exists"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];
  var Options_Applicative_Types = $PS["Options.Applicative.Types"];                
  var TNil = (function () {
      function TNil() {

      };
      TNil.value = new TNil();
      return TNil;
  })();
  var TCons = (function () {
      function TCons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TCons.create = function (value0) {
          return function (value1) {
              return new TCons(value0, value1);
          };
      };
      return TCons;
  })();
  var P = function (x) {
      return x;
  };
  var ListT = function (x) {
      return x;
  };
  var NondetT = function (x) {
      return x;
  };
  var ComplParser = (function () {
      function ComplParser(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ComplParser.create = function (value0) {
          return function (value1) {
              return new ComplParser(value0, value1);
          };
      };
      return ComplParser;
  })();
  var ComplOption = (function () {
      function ComplOption(value0) {
          this.value0 = value0;
      };
      ComplOption.create = function (value0) {
          return new ComplOption(value0);
      };
      return ComplOption;
  })();
  var ComplResult = (function () {
      function ComplResult(value0) {
          this.value0 = value0;
      };
      ComplResult.create = function (value0) {
          return new ComplResult(value0);
      };
      return ComplResult;
  })();
  var Completion = function (x) {
      return x;
  };
  var MonadP = function (MonadPlus0, enterContext, errorP, exitContext, exitP, getPrefs, missingArgP) {
      this.MonadPlus0 = MonadPlus0;
      this.enterContext = enterContext;
      this.errorP = errorP;
      this.exitContext = exitContext;
      this.exitP = exitP;
      this.getPrefs = getPrefs;
      this.missingArgP = missingArgP;
  };
  var withReadM = function (f) {
      var f$prime = function (v) {
          if (v instanceof Options_Applicative_Types.ErrorMsg) {
              return new Options_Applicative_Types.ErrorMsg(f(v.value0));
          };
          return v;
      };
      var $148 = Control_Monad_Reader_Trans.mapReaderT(Control_Monad_Except.withExcept(f$prime));
      var $149 = Data_Newtype.un(Options_Applicative_Types.readMNewtype)(Options_Applicative_Types.ReadM);
      return function ($150) {
          return Options_Applicative_Types.ReadM($148($149($150)));
      };
  };
  var stepListT = function (v) {
      return v;
  };
  var runP = function (v) {
      return Control_Monad_Reader.runReader(Data_Function.flip(Control_Monad_State_Trans.runStateT)([  ])(Control_Monad_Except_Trans.runExceptT(v)));
  };
  var runNondetT = function (v) {
      return v;
  };
  var runListT = function (dictMonad) {
      return function (xs) {
          return Control_Bind.bind(dictMonad.Bind1())(stepListT(xs))(function (v) {
              if (v instanceof TNil) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(Data_List_Types.Nil.value);
              };
              if (v instanceof TCons) {
                  return Control_Monad.liftM1(dictMonad)(Data_List_Types.Cons.create(v.value0))(runListT(dictMonad)(v.value1));
              };
              throw new Error("Failed pattern match at Options.Applicative.Internal (line 215, column 3 - line 217, column 53): " + [ v.constructor.name ]);
          });
      };
  };
  var runCompletion = function (v) {
      return function (prefs) {
          var v1 = Control_Monad_Reader_Trans.runReaderT(Control_Monad_Except_Trans.runExceptT(v))(prefs);
          if (v1 instanceof ComplResult) {
              return Data_Maybe.Nothing.value;
          };
          if (v1 instanceof ComplParser) {
              return Data_Maybe.Just.create(new Data_Either.Left(new Data_Tuple.Tuple(v1.value0, v1.value1)));
          };
          if (v1 instanceof ComplOption) {
              return Data_Maybe.Just.create(new Data_Either.Right(v1.value0));
          };
          throw new Error("Failed pattern match at Options.Applicative.Internal (line 185, column 38 - line 188, column 42): " + [ v1.constructor.name ]);
      };
  };
  var pFunctor = new Data_Functor.Functor(function (f) {
      return function (v) {
          return P(Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Control_Monad_State_Trans.functorStateT(Control_Monad_Reader_Trans.functorReaderT(Data_Identity.functorIdentity))))(f)(v));
      };
  });
  var pApply = new Control_Apply.Apply(function () {
      return pFunctor;
  }, function (v) {
      return function (v1) {
          return P(Control_Apply.apply(Control_Monad_Except_Trans.applyExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity))))(v)(v1));
      };
  });
  var pBind = new Control_Bind.Bind(function () {
      return pApply;
  }, function (v) {
      return function (k) {
          return P(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity))))(v)(function (a) {
              var v1 = k(a);
              return v1;
          }));
      };
  });
  var pApplicative = new Control_Applicative.Applicative(function () {
      return pApply;
  }, function (a) {
      return P(Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity))))(a));
  });
  var pMonad = new Control_Monad.Monad(function () {
      return pApplicative;
  }, function () {
      return pBind;
  });
  var pAlt = new Control_Alt.Alt(function () {
      return pFunctor;
  }, function (v) {
      return function (v1) {
          return P(Control_Alt.alt(Control_Monad_Except_Trans.altExceptT(Options_Applicative_Types.parseErrorSemigroup)(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity))))(v)(v1));
      };
  });
  var pPlus = new Control_Plus.Plus(function () {
      return pAlt;
  }, Control_Plus.empty(Control_Monad_Except_Trans.plusExceptT(Options_Applicative_Types.parseErrorMonoid)(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))));
  var pAlternative = new Control_Alternative.Alternative(function () {
      return pApplicative;
  }, function () {
      return pPlus;
  });
  var pMonadZero = new Control_MonadZero.MonadZero(function () {
      return pAlternative;
  }, function () {
      return pMonad;
  });
  var pMonadPlus = new Control_MonadPlus.MonadPlus(function () {
      return pMonadZero;
  });
  var missingArgP = function (dict) {
      return dict.missingArgP;
  };
  var hoistMaybe = function (dictMonadPlus) {
      return Data_Maybe.maybe(Control_Plus.empty(((dictMonadPlus.MonadZero0()).Alternative1()).Plus1()))(Control_Applicative.pure(((dictMonadPlus.MonadZero0()).Alternative1()).Applicative0()));
  };
  var getPrefs = function (dict) {
      return dict.getPrefs;
  };
  var exitP = function (dict) {
      return dict.exitP;
  };
  var exitContext = function (dict) {
      return dict.exitContext;
  };
  var errorP = function (dict) {
      return dict.errorP;
  };
  var hoistEither = function (dictMonadP) {
      return Data_Either.either(errorP(dictMonadP))(Control_Applicative.pure((((dictMonadP.MonadPlus0()).MonadZero0()).Alternative1()).Applicative0()));
  };
  var runReadM = function (dictMonadP) {
      return function (v) {
          return function (s) {
              return hoistEither(dictMonadP)(Control_Monad_Except.runExcept(Control_Monad_Reader_Trans.runReaderT(v)(s)));
          };
      };
  };
  var pMonadP = new MonadP(function () {
      return pMonadPlus;
  }, function (name) {
      return function (pinfo) {
          return P(Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))(Control_Monad_State_Class.modify_(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))(Data_Array.cons(new Options_Applicative_Types.Context(name, Data_Exists.mkExists(pinfo))))));
      };
  }, (function () {
      var $151 = Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity))));
      return function ($152) {
          return P($151($152));
      };
  })(), P(Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))(Control_Monad_State_Class.modify_(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))(Data_Array.drop(1)))), function (i) {
      return function (v) {
          return function (p) {
              var $153 = Data_Maybe.maybe(Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity))))(Options_Applicative_Types.MissingError.create(i)(Options_Applicative_Types.SomeParser.create(Data_Exists.mkExists(p)))))(Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))));
              return function ($154) {
                  return P($153($154));
              };
          };
      };
  }, P(Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))(Control_Monad_Trans_Class.lift(Control_Monad_State_Trans.monadTransStateT)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity))(Control_Monad_Reader_Class.ask(Control_Monad_Reader_Trans.monadAskReaderT(Data_Identity.monadIdentity))))), function (e) {
      return function (v) {
          return errorP(pMonadP)(e);
      };
  });
  var enterContext = function (dict) {
      return dict.enterContext;
  };
  var contextNames = function (ns) {
      var go = function (v) {
          return v.value0;
      };
      return Data_Array.reverse(Data_Functor.map(Data_Functor.functorArray)(go)(ns));
  };
  var complResultMonad = new Control_Monad.Monad(function () {
      return complResultApplicative;
  }, function () {
      return complResultBind;
  });
  var complResultFunctor = new Data_Functor.Functor(Control_Monad.liftM1(complResultMonad));
  var complResultBind = new Control_Bind.Bind(function () {
      return complResultApply;
  }, function (m) {
      return function (f) {
          if (m instanceof ComplResult) {
              return f(m.value0);
          };
          if (m instanceof ComplParser) {
              return new ComplParser(m.value0, m.value1);
          };
          if (m instanceof ComplOption) {
              return new ComplOption(m.value0);
          };
          throw new Error("Failed pattern match at Options.Applicative.Internal (line 143, column 14 - line 146, column 35): " + [ m.constructor.name ]);
      };
  });
  var complResultApply = new Control_Apply.Apply(function () {
      return complResultFunctor;
  }, Control_Monad.ap(complResultMonad));
  var complResultApplicative = new Control_Applicative.Applicative(function () {
      return complResultApply;
  }, ComplResult.create);
  var completionFunctor = new Data_Functor.Functor(function (f) {
      return function (v) {
          return Completion(Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Control_Monad_Reader_Trans.functorReaderT(complResultFunctor)))(f)(v));
      };
  });
  var completionAlt = new Control_Alt.Alt(function () {
      return completionFunctor;
  }, function (v) {
      return function (v1) {
          return Completion(Control_Alt.alt(Control_Monad_Except_Trans.altExceptT(Options_Applicative_Types.parseErrorSemigroup)(Control_Monad_Reader_Trans.monadReaderT(complResultMonad)))(v)(v1));
      };
  });
  var completionApply = new Control_Apply.Apply(function () {
      return completionFunctor;
  }, function (v) {
      return function (v1) {
          return Completion(Control_Apply.apply(Control_Monad_Except_Trans.applyExceptT(Control_Monad_Reader_Trans.monadReaderT(complResultMonad)))(v)(v1));
      };
  });
  var completionApplicative = new Control_Applicative.Applicative(function () {
      return completionApply;
  }, function (a) {
      return Completion(Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_Reader_Trans.monadReaderT(complResultMonad)))(a));
  });
  var completionBind = new Control_Bind.Bind(function () {
      return completionApply;
  }, function (v) {
      return function (k) {
          return Completion(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Reader_Trans.monadReaderT(complResultMonad)))(v)(function (a) {
              var v1 = k(a);
              return v1;
          }));
      };
  });
  var completionMonad = new Control_Monad.Monad(function () {
      return completionApplicative;
  }, function () {
      return completionBind;
  });
  var completionPlus = new Control_Plus.Plus(function () {
      return completionAlt;
  }, Control_Plus.empty(Control_Monad_Except_Trans.plusExceptT(Options_Applicative_Types.parseErrorMonoid)(Control_Monad_Reader_Trans.monadReaderT(complResultMonad))));
  var completionAlternative = new Control_Alternative.Alternative(function () {
      return completionApplicative;
  }, function () {
      return completionPlus;
  });
  var completionMonadZero = new Control_MonadZero.MonadZero(function () {
      return completionAlternative;
  }, function () {
      return completionMonad;
  });
  var completionMonadPlus = new Control_MonadPlus.MonadPlus(function () {
      return completionMonadZero;
  });
  var completionMonadP = new MonadP(function () {
      return completionMonadPlus;
  }, function (v) {
      return function (v1) {
          return Control_Applicative.pure(completionApplicative)(Data_Unit.unit);
      };
  }, (function () {
      var $155 = Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(Control_Monad_Reader_Trans.monadReaderT(complResultMonad)));
      return function ($156) {
          return Completion($155($156));
      };
  })(), Control_Applicative.pure(completionApplicative)(Data_Unit.unit), function (v) {
      return function (a) {
          return function (p) {
              return function (v1) {
                  return Completion(Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Control_Monad_Reader_Trans.monadReaderT(complResultMonad))(Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)(complResultMonad)(new ComplParser(Options_Applicative_Types.SomeParser.create(Data_Exists.mkExists(p)), a))));
              };
          };
      };
  }, Completion(Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Control_Monad_Reader_Trans.monadReaderT(complResultMonad))(Control_Monad_Reader_Class.ask(Control_Monad_Reader_Trans.monadAskReaderT(complResultMonad)))), function (v) {
      var $157 = Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Control_Monad_Reader_Trans.monadReaderT(complResultMonad));
      var $158 = Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)(complResultMonad);
      return function ($159) {
          return Completion($157($158(ComplOption.create($159))));
      };
  });
  var bimapTStep = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof TNil) {
                  return TNil.value;
              };
              if (v2 instanceof TCons) {
                  return new TCons(v(v2.value0), v1(v2.value1));
              };
              throw new Error("Failed pattern match at Options.Applicative.Internal (line 201, column 1 - line 201, column 77): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var listTFunctor = function (dictMonad) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              return ListT(Control_Monad.liftM1(dictMonad)(bimapTStep(f)(Data_Functor.map(listTFunctor(dictMonad))(f)))(stepListT(v)));
          };
      });
  };
  var listTAlt = function (dictMonad) {
      return new Control_Alt.Alt(function () {
          return listTFunctor(dictMonad);
      }, function (xs) {
          return function (ys) {
              return ListT(Control_Bind.bind(dictMonad.Bind1())(stepListT(xs))(function (v) {
                  if (v instanceof TNil) {
                      return stepListT(ys);
                  };
                  if (v instanceof TCons) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(new TCons(v.value0, Control_Alt.alt(listTAlt(dictMonad))(v.value1)(ys)));
                  };
                  throw new Error("Failed pattern match at Options.Applicative.Internal (line 242, column 5 - line 244, column 49): " + [ v.constructor.name ]);
              }));
          };
      });
  };
  var listTPlus = function (dictMonad) {
      return new Control_Plus.Plus(function () {
          return listTAlt(dictMonad);
      }, Control_Applicative.pure(dictMonad.Applicative0())(TNil.value));
  };
  var hoistList = function (dictMonad) {
      return Data_Foldable.foldr(Data_Foldable.foldableArray)(function (x) {
          return function (xt) {
              return Control_Applicative.pure(dictMonad.Applicative0())(new TCons(x, xt));
          };
      })(Control_Plus.empty(listTPlus(dictMonad)));
  };
  var listTMonadTrans = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
      var $160 = Control_Monad.liftM1(dictMonad)(function (v) {
          return new TCons(v, Control_Plus.empty(listTPlus(dictMonad)));
      });
      return function ($161) {
          return ListT($160($161));
      };
  });
  var cut = function (dictMonad) {
      return NondetT(Control_Monad_Trans_Class.lift(listTMonadTrans)(Control_Monad_State_Trans.monadStateT(dictMonad))(Control_Monad_State_Class.put(Control_Monad_State_Trans.monadStateStateT(dictMonad))(true)));
  };
  var nondetTMonadTrans = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
      var $162 = Control_Monad_Trans_Class.lift(listTMonadTrans)(Control_Monad_State_Trans.monadStateT(dictMonad));
      var $163 = Control_Monad_Trans_Class.lift(Control_Monad_State_Trans.monadTransStateT)(dictMonad);
      return function ($164) {
          return NondetT($162($163($164)));
      };
  });
  var listTMonad = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return listTApplicative(dictMonad);
      }, function () {
          return listTBind(dictMonad);
      });
  };
  var listTBind = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return listTApply(dictMonad);
      }, function (xs) {
          return function (f) {
              return ListT(Control_Bind.bind(dictMonad.Bind1())(stepListT(xs))(function (v) {
                  if (v instanceof TNil) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(TNil.value);
                  };
                  if (v instanceof TCons) {
                      return stepListT(Control_Alt.alt(listTAlt(dictMonad))(f(v.value0))(Control_Bind.bind(listTBind(dictMonad))(v.value1)(f)));
                  };
                  throw new Error("Failed pattern match at Options.Applicative.Internal (line 233, column 5 - line 235, column 53): " + [ v.constructor.name ]);
              }));
          };
      });
  };
  var listTApply = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return listTFunctor(dictMonad);
      }, Control_Monad.ap(listTMonad(dictMonad)));
  };
  var listTApplicative = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return listTApply(dictMonad);
      }, (function () {
          var $165 = hoistList(dictMonad);
          var $166 = Control_Applicative.pure(Control_Applicative.applicativeArray);
          return function ($167) {
              return $165($166($167));
          };
      })());
  };
  var listTAlternative = function (dictMonad) {
      return new Control_Alternative.Alternative(function () {
          return listTApplicative(dictMonad);
      }, function () {
          return listTPlus(dictMonad);
      });
  };
  var listTMonadZero = function (dictMonad) {
      return new Control_MonadZero.MonadZero(function () {
          return listTAlternative(dictMonad);
      }, function () {
          return listTMonad(dictMonad);
      });
  };
  var nondetTAltOp = function (dictMonad) {
      return function (m1) {
          return function (m2) {
              return NondetT(Control_Alt.alt(listTAlt(Control_Monad_State_Trans.monadStateT(dictMonad)))(runNondetT(m1))(Control_Bind.bind(listTBind(Control_Monad_State_Trans.monadStateT(dictMonad)))(Control_Monad_Trans_Class.lift(listTMonadTrans)(Control_Monad_State_Trans.monadStateT(dictMonad))(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateStateT(dictMonad))))(function (v) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(listTBind(Control_Monad_State_Trans.monadStateT(dictMonad)))(Control_MonadZero.guard(listTMonadZero(Control_Monad_State_Trans.monadStateT(dictMonad)))(!v))(function () {
                      return runNondetT(m2);
                  });
              })));
          };
      };
  };
  var nondetTFunctor = function (dictMonad) {
      return new Data_Functor.Functor(function (f) {
          var $168 = Data_Functor.map(listTFunctor(Control_Monad_State_Trans.monadStateT(dictMonad)))(f);
          return function ($169) {
              return NondetT($168(runNondetT($169)));
          };
      });
  };
  var nondetTAlt = function (dictMonad) {
      return new Control_Alt.Alt(function () {
          return nondetTFunctor(dictMonad);
      }, function (v) {
          return function (v1) {
              return Control_Alt.alt(listTAlt(Control_Monad_State_Trans.monadStateT(dictMonad)))(v)(v1);
          };
      });
  };
  var nondetTPlus = function (dictMonad) {
      return new Control_Plus.Plus(function () {
          return nondetTAlt(dictMonad);
      }, Control_Plus.empty(listTPlus(Control_Monad_State_Trans.monadStateT(dictMonad))));
  };
  var nondetTApply = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return nondetTFunctor(dictMonad);
      }, function (v) {
          return function (v1) {
              return Control_Apply.apply(listTApply(Control_Monad_State_Trans.monadStateT(dictMonad)))(v)(v1);
          };
      });
  };
  var nondetTApplicative = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return nondetTApply(dictMonad);
      }, (function () {
          var $170 = Control_Applicative.pure(listTApplicative(Control_Monad_State_Trans.monadStateT(dictMonad)));
          return function ($171) {
              return NondetT($170($171));
          };
      })());
  };
  var nondetTBind = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return nondetTApply(dictMonad);
      }, function (v) {
          return function (f) {
              return NondetT(Control_Bind.bind(listTBind(Control_Monad_State_Trans.monadStateT(dictMonad)))(v)(function ($172) {
                  return runNondetT(f($172));
              }));
          };
      });
  };
  var takeListT = function (dictMonad) {
      return function (v) {
          if (v === 0) {
              return Data_Function["const"](Control_Plus.empty(listTPlus(dictMonad)));
          };
          var $173 = Control_Monad.liftM1(dictMonad)(bimapTStep(Control_Category.identity(Control_Category.categoryFn))(takeListT(dictMonad)(v - 1 | 0)));
          return function ($174) {
              return ListT($173(stepListT($174)));
          };
      };
  };
  var disamb = function (dictMonad) {
      return function (allow_amb) {
          return function (xs) {
              return Control_Bind.bind(dictMonad.Bind1())((function (v) {
                  return Control_Monad_State_Trans.evalStateT(((dictMonad.Bind1()).Apply0()).Functor0())(v)(false);
              })(runListT(Control_Monad_State_Trans.monadStateT(dictMonad))(takeListT(Control_Monad_State_Trans.monadStateT(dictMonad))((function () {
                  if (allow_amb) {
                      return 1;
                  };
                  return 2;
              })())(runNondetT(xs)))))(function (v) {
                  return Control_Applicative.pure(dictMonad.Applicative0())((function () {
                      if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Nil) {
                          return new Data_Maybe.Just(v.value0);
                      };
                      return Data_Maybe.Nothing.value;
                  })());
              });
          };
      };
  };
  exports["MonadP"] = MonadP;
  exports["enterContext"] = enterContext;
  exports["exitContext"] = exitContext;
  exports["getPrefs"] = getPrefs;
  exports["missingArgP"] = missingArgP;
  exports["errorP"] = errorP;
  exports["exitP"] = exitP;
  exports["hoistMaybe"] = hoistMaybe;
  exports["hoistEither"] = hoistEither;
  exports["runReadM"] = runReadM;
  exports["withReadM"] = withReadM;
  exports["runP"] = runP;
  exports["runCompletion"] = runCompletion;
  exports["contextNames"] = contextNames;
  exports["takeListT"] = takeListT;
  exports["runListT"] = runListT;
  exports["cut"] = cut;
  exports["nondetTAltOp"] = nondetTAltOp;
  exports["disamb"] = disamb;
  exports["pFunctor"] = pFunctor;
  exports["pApply"] = pApply;
  exports["pApplicative"] = pApplicative;
  exports["pAlt"] = pAlt;
  exports["pPlus"] = pPlus;
  exports["pAlternative"] = pAlternative;
  exports["pBind"] = pBind;
  exports["pMonad"] = pMonad;
  exports["pMonadZero"] = pMonadZero;
  exports["pMonadPlus"] = pMonadPlus;
  exports["pMonadP"] = pMonadP;
  exports["completionFunctor"] = completionFunctor;
  exports["completionApply"] = completionApply;
  exports["completionApplicative"] = completionApplicative;
  exports["completionAlt"] = completionAlt;
  exports["completionPlus"] = completionPlus;
  exports["completionAlternative"] = completionAlternative;
  exports["completionBind"] = completionBind;
  exports["completionMonad"] = completionMonad;
  exports["completionMonadZero"] = completionMonadZero;
  exports["completionMonadPlus"] = completionMonadPlus;
  exports["completionMonadP"] = completionMonadP;
  exports["listTFunctor"] = listTFunctor;
  exports["listTApply"] = listTApply;
  exports["listTApplicative"] = listTApplicative;
  exports["listTBind"] = listTBind;
  exports["listTMonad"] = listTMonad;
  exports["listTAlt"] = listTAlt;
  exports["listTPlus"] = listTPlus;
  exports["listTAlternative"] = listTAlternative;
  exports["listTMonadTrans"] = listTMonadTrans;
  exports["listTMonadZero"] = listTMonadZero;
  exports["nondetTFunctor"] = nondetTFunctor;
  exports["nondetTApply"] = nondetTApply;
  exports["nondetTApplicative"] = nondetTApplicative;
  exports["nondetTBind"] = nondetTBind;
  exports["nondetTAlt"] = nondetTAlt;
  exports["nondetTPlus"] = nondetTPlus;
  exports["nondetTMonadTrans"] = nondetTMonadTrans;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Options.Applicative.Internal.Utils"] = $PS["Options.Applicative.Internal.Utils"] || {};
  var exports = $PS["Options.Applicative.Internal.Utils"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_String_CodePoints = $PS["Data.String.CodePoints"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_String_Regex = $PS["Data.String.Regex"];
  var Data_String_Regex_Flags = $PS["Data.String.Regex.Flags"];
  var Partial_Unsafe = $PS["Partial.Unsafe"];                
  var whitespaceRegex = (function () {
      var v = Data_String_Regex.regex("\\s+")(Data_String_Regex_Flags.noFlags);
      if (v instanceof Data_Either.Left) {
          return Partial_Unsafe.unsafeCrashWith("whitespaceRegex: `\\s+` seems to be invlaid, err: " + v.value0);
      };
      if (v instanceof Data_Either.Right) {
          return v.value0;
      };
      throw new Error("Failed pattern match at Options.Applicative.Internal.Utils (line 39, column 19 - line 41, column 15): " + [ v.constructor.name ]);
  })();
  var words = function (v) {
      if (v === "") {
          return [  ];
      };
      return Data_String_Regex.split(whitespaceRegex)(v);
  };
  var unWords = function (dictFoldable) {
      return Data_Foldable.intercalate(dictFoldable)(Data_Monoid.monoidString)(" ");
  };
  var unLines = function (dictFoldable) {
      return Data_Foldable.intercalate(dictFoldable)(Data_Monoid.monoidString)("\x0a");
  };
  var startsWith = function (p) {
      return function (s) {
          return Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqInt))(Data_String_CodePoints.indexOf(p)(s))(new Data_Maybe.Just(0));
      };
  };
  var lines = function (v) {
      if (v === "") {
          return [  ];
      };
      return Data_String_Common.split("\x0a")(v);
  };
  var apApplyFlipped = function (dictApply) {
      return Control_Apply.lift2(dictApply)(Data_Function.applyFlipped);
  };
  exports["unLines"] = unLines;
  exports["unWords"] = unWords;
  exports["lines"] = lines;
  exports["words"] = words;
  exports["whitespaceRegex"] = whitespaceRegex;
  exports["startsWith"] = startsWith;
  exports["apApplyFlipped"] = apApplyFlipped;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Options.Applicative.Common"] = $PS["Options.Applicative.Common"] || {};
  var exports = $PS["Options.Applicative.Common"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Free = $PS["Control.Monad.Free"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Control_Monad_State_Trans = $PS["Control.Monad.State.Trans"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Control_MonadZero = $PS["Control.MonadZero"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Array = $PS["Data.Array"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Exists = $PS["Data.Exists"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];
  var Options_Applicative_Internal = $PS["Options.Applicative.Internal"];
  var Options_Applicative_Internal_Utils = $PS["Options.Applicative.Internal.Utils"];
  var Options_Applicative_Types = $PS["Options.Applicative.Types"];                
  var OptWord = (function () {
      function OptWord(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      OptWord.create = function (value0) {
          return function (value1) {
              return new OptWord(value0, value1);
          };
      };
      return OptWord;
  })();
  var simplify = function (v) {
      if (v instanceof Options_Applicative_Types.Leaf) {
          return new Options_Applicative_Types.Leaf(v.value0);
      };
      if (v instanceof Options_Applicative_Types.MultNode) {
          var remove_mult = function (v1) {
              if (v1 instanceof Options_Applicative_Types.MultNode) {
                  return v1.value0;
              };
              return [ v1 ];
          };
          var v1 = Control_Bind.bind(Control_Bind.bindArray)(v.value0)(function ($230) {
              return remove_mult(simplify($230));
          });
          if (v1.length === 1) {
              return v1[0];
          };
          return new Options_Applicative_Types.MultNode(v1);
      };
      if (v instanceof Options_Applicative_Types.AltNode) {
          var remove_alt = function (v1) {
              if (v1 instanceof Options_Applicative_Types.AltNode) {
                  return v1.value0;
              };
              if (v1 instanceof Options_Applicative_Types.MultNode && v1.value0.length === 0) {
                  return [  ];
              };
              return [ v1 ];
          };
          var v1 = Control_Bind.bind(Control_Bind.bindArray)(v.value0)(function ($231) {
              return remove_alt(simplify($231));
          });
          if (v1.length === 0) {
              return new Options_Applicative_Types.MultNode([  ]);
          };
          if (v1.length === 1) {
              return v1[0];
          };
          return new Options_Applicative_Types.AltNode(v1);
      };
      throw new Error("Failed pattern match at Options.Applicative.Common (line 279, column 1 - line 279, column 45): " + [ v.constructor.name ]);
  };
  var showOption = function (v) {
      if (v instanceof Options_Applicative_Types.OptLong) {
          return "--" + v.value0;
      };
      if (v instanceof Options_Applicative_Types.OptShort) {
          return Data_String_CodeUnits.fromCharArray([ "-", v.value0 ]);
      };
      throw new Error("Failed pattern match at Options.Applicative.Common (line 42, column 1 - line 42, column 32): " + [ v.constructor.name ]);
  };
  var parseWord = (function () {
      var go = function (v) {
          if (v instanceof Data_List_Types.Cons && (v.value0 === "-" && (v.value1 instanceof Data_List_Types.Cons && v.value1.value0 === "-"))) {
              return Data_Maybe.Just.create((function () {
                  var v1 = (function () {
                      var v2 = Data_List.span(function (v3) {
                          return v3 !== "=";
                      })(v.value1.value1);
                      if (v2.rest instanceof Data_List_Types.Nil) {
                          return new Data_Tuple.Tuple(v.value1.value1, Data_Maybe.Nothing.value);
                      };
                      if (v2.rest instanceof Data_List_Types.Cons) {
                          return new Data_Tuple.Tuple(v2.init, new Data_Maybe.Just(v2.rest.value1));
                      };
                      throw new Error("Failed pattern match at Options.Applicative.Common (line 106, column 23 - line 108, column 70): " + [ v2.constructor.name ]);
                  })();
                  return new OptWord(new Options_Applicative_Types.OptLong(Data_String_CodeUnits.fromCharArray(Data_Array.fromFoldable(Data_List_Types.foldableList)(v1.value0))), Data_Functor.map(Data_Maybe.functorMaybe)((function () {
                      var $232 = Data_Array.fromFoldable(Data_List_Types.foldableList);
                      return function ($233) {
                          return Data_String_CodeUnits.fromCharArray($232($233));
                      };
                  })())(v1.value1));
              })());
          };
          if (v instanceof Data_List_Types.Cons && v.value0 === "-") {
              if (v.value1 instanceof Data_List_Types.Nil) {
                  return Data_Maybe.Nothing.value;
              };
              if (v.value1 instanceof Data_List_Types.Cons) {
                  return Data_Maybe.Just.create((function () {
                      var arg = Data_Functor.voidRight(Data_Maybe.functorMaybe)(v.value1.value1)(Control_MonadZero.guard(Data_Maybe.monadZeroMaybe)(!Data_List["null"](v.value1.value1)));
                      return new OptWord(new Options_Applicative_Types.OptShort(v.value1.value0), Data_Functor.map(Data_Maybe.functorMaybe)((function () {
                          var $234 = Data_Array.fromFoldable(Data_List_Types.foldableList);
                          return function ($235) {
                              return Data_String_CodeUnits.fromCharArray($234($235));
                          };
                      })())(arg));
                  })());
              };
              throw new Error("Failed pattern match at Options.Applicative.Common (line 110, column 25 - line 114, column 79): " + [ v.value1.constructor.name ]);
          };
          return Data_Maybe.Nothing.value;
      };
      var $236 = Data_List.fromFoldable(Data_Foldable.foldableArray);
      return function ($237) {
          return go($236(Data_String_CodeUnits.toCharArray($237)));
      };
  })();
  var parseError = function (dictMonadP) {
      return function (arg) {
          return function (p) {
              return Options_Applicative_Internal.errorP(dictMonadP)(Options_Applicative_Types.UnexpectedError.create(arg)(Options_Applicative_Types.SomeParser.create(Data_Exists.mkExists(p))));
          };
      };
  };
  var optionNames = function (v) {
      if (v instanceof Options_Applicative_Types.OptReader) {
          return v.value0;
      };
      if (v instanceof Options_Applicative_Types.FlagReader) {
          return v.value0;
      };
      return [  ];
  };
  var liftOpt = Options_Applicative_Types.OptP.create;
  var isOptionPrefix = function (v) {
      return function (v1) {
          if (v instanceof Options_Applicative_Types.OptShort && v1 instanceof Options_Applicative_Types.OptShort) {
              return v.value0 === v1.value0;
          };
          if (v instanceof Options_Applicative_Types.OptLong && v1 instanceof Options_Applicative_Types.OptLong) {
              return Options_Applicative_Internal_Utils.startsWith(v.value0)(v1.value0);
          };
          return false;
      };
  };
  var optMatches = function (dictMonadP) {
      return function (disambiguate) {
          return function (opt) {
              return function (v) {
                  var is_short = function (v1) {
                      if (v1 instanceof Options_Applicative_Types.OptShort) {
                          return true;
                      };
                      if (v1 instanceof Options_Applicative_Types.OptLong) {
                          return false;
                      };
                      throw new Error("Failed pattern match at Options.Applicative.Common (line 89, column 5 - line 89, column 33): " + [ v1.constructor.name ]);
                  };
                  var has_name = function (a) {
                      if (disambiguate) {
                          return Data_Foldable.any(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(isOptionPrefix(a));
                      };
                      if (Data_Boolean.otherwise) {
                          return Data_Foldable.elem(Data_Foldable.foldableArray)(Options_Applicative_Types.optNameEq)(a);
                      };
                      throw new Error("Failed pattern match at Options.Applicative.Common (line 92, column 5 - line 94, column 27): " + [ a.constructor.name ]);
                  };
                  var errorFor = function (name) {
                      return function (msg) {
                          return "option " + (showOption(name) + (": " + msg));
                      };
                  };
                  if (opt instanceof Options_Applicative_Types.OptReader) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Data_Maybe.bindMaybe)(Control_MonadZero.guard(Data_Maybe.monadZeroMaybe)(has_name(v.value0)(opt.value0)))(function () {
                          return Data_Maybe.Just.create(Control_Bind.bind(Control_Monad_State_Trans.bindStateT(((dictMonadP.MonadPlus0()).MonadZero0()).Monad0()))(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateStateT(((dictMonadP.MonadPlus0()).MonadZero0()).Monad0())))(function (v1) {
                              var missing_arg = Options_Applicative_Internal.missingArgP(dictMonadP)(opt.value2(showOption(v.value0)))((Data_Newtype.un(Options_Applicative_Types.newtypeCReader)(Options_Applicative_Types.CReader)(opt.value1)).crCompleter);
                              return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(((dictMonadP.MonadPlus0()).MonadZero0()).Monad0()))((function () {
                                  var v2 = Data_Maybe.maybe(v1)(function (v3) {
                                      return new Data_List_Types.Cons(v3, v1);
                                  })(v.value1);
                                  if (v2 instanceof Data_List_Types.Nil) {
                                      return Control_Monad_Trans_Class.lift(Control_Monad_State_Trans.monadTransStateT)(((dictMonadP.MonadPlus0()).MonadZero0()).Monad0())(missing_arg);
                                  };
                                  if (v2 instanceof Data_List_Types.Cons) {
                                      return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(((dictMonadP.MonadPlus0()).MonadZero0()).Monad0()))(new Data_Tuple.Tuple(v2.value0, v2.value1));
                                  };
                                  throw new Error("Failed pattern match at Options.Applicative.Common (line 67, column 27 - line 69, column 56): " + [ v2.constructor.name ]);
                              })())(function (v2) {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_State_Trans.bindStateT(((dictMonadP.MonadPlus0()).MonadZero0()).Monad0()))(Control_Monad_State_Class.put(Control_Monad_State_Trans.monadStateStateT(((dictMonadP.MonadPlus0()).MonadZero0()).Monad0()))(v2.value1))(function () {
                                      return Control_Monad_Trans_Class.lift(Control_Monad_State_Trans.monadTransStateT)(((dictMonadP.MonadPlus0()).MonadZero0()).Monad0())(Options_Applicative_Internal.runReadM(dictMonadP)(Options_Applicative_Internal.withReadM(errorFor(v.value0))((Data_Newtype.un(Options_Applicative_Types.newtypeCReader)(Options_Applicative_Types.CReader)(opt.value1)).crReader))(v2.value0));
                                  });
                              });
                          }));
                      });
                  };
                  if (opt instanceof Options_Applicative_Types.FlagReader) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Data_Maybe.bindMaybe)(Control_MonadZero.guard(Data_Maybe.monadZeroMaybe)(has_name(v.value0)(opt.value0)))(function () {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Data_Maybe.bindMaybe)(Control_MonadZero.guard(Data_Maybe.monadZeroMaybe)(is_short(v.value0) || Data_Maybe.isNothing(v.value1)))(function () {
                              return Data_Maybe.Just.create(Control_Bind.bind(Control_Monad_State_Trans.bindStateT(((dictMonadP.MonadPlus0()).MonadZero0()).Monad0()))(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateStateT(((dictMonadP.MonadPlus0()).MonadZero0()).Monad0())))(function (v1) {
                                  var val$prime = Data_Functor.map(Data_Maybe.functorMaybe)(function ($238) {
                                      return (function (s) {
                                          return Data_Array.cons("-")(s);
                                      })(Data_String_CodeUnits.toCharArray($238));
                                  })(v.value1);
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_State_Trans.bindStateT(((dictMonadP.MonadPlus0()).MonadZero0()).Monad0()))(Control_Monad_State_Class.put(Control_Monad_State_Trans.monadStateStateT(((dictMonadP.MonadPlus0()).MonadZero0()).Monad0()))(Data_Maybe.maybe(v1)((function () {
                                      var $239 = Data_Function.flip(Data_List_Types.Cons.create)(v1);
                                      return function ($240) {
                                          return $239(Data_String_CodeUnits.fromCharArray($240));
                                      };
                                  })())(val$prime)))(function () {
                                      return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(((dictMonadP.MonadPlus0()).MonadZero0()).Monad0()))(opt.value1);
                                  });
                              }));
                          });
                      });
                  };
                  return Data_Maybe.Nothing.value;
              };
          };
      };
  };
  var isArg = function (v) {
      if (v instanceof Options_Applicative_Types.ArgReader) {
          return true;
      };
      return false;
  };
  var evalParser = function (v) {
      if (v instanceof Options_Applicative_Types.NilP) {
          return v.value0;
      };
      if (v instanceof Options_Applicative_Types.OptP) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Options_Applicative_Types.MultP) {
          return Data_Exists.runExists(function (v1) {
              return Control_Apply.apply(Data_Maybe.applyMaybe)(evalParser(v1.value0))(evalParser(v1.value1));
          })(v.value0);
      };
      if (v instanceof Options_Applicative_Types.AltP) {
          return Control_Alt.alt(Data_Maybe.altMaybe)(evalParser(v.value0))(evalParser(v.value1));
      };
      if (v instanceof Options_Applicative_Types.BindP) {
          return Control_Monad_Free["resume'"](function (p) {
              return function (k) {
                  return Control_Bind.bind(Data_Maybe.bindMaybe)(evalParser(p))(function ($241) {
                      return evalParser(Options_Applicative_Types.BindP.create(k($241)));
                  });
              };
          })(Data_Maybe.Just.create)(v.value0);
      };
      throw new Error("Failed pattern match at Options.Applicative.Common (line 219, column 1 - line 219, column 44): " + [ v.constructor.name ]);
  };
  var searchParser = function (dictMonad) {
      return function (v) {
          return function (v1) {
              if (v1 instanceof Options_Applicative_Types.NilP) {
                  return Control_Plus.empty(Options_Applicative_Internal.nondetTPlus(dictMonad));
              };
              if (v1 instanceof Options_Applicative_Types.OptP) {
                  return v(v1.value0);
              };
              if (v1 instanceof Options_Applicative_Types.MultP) {
                  return Data_Exists.runExists(function (v2) {
                      var b = Data_Functor.mapFlipped(Options_Applicative_Internal.nondetTFunctor(dictMonad))(searchParser(dictMonad)(v)(v2.value1))(function (p2$prime) {
                          return Control_Apply.apply(Options_Applicative_Types.parserApply)(v2.value0)(p2$prime);
                      });
                      var a = Data_Functor.mapFlipped(Options_Applicative_Internal.nondetTFunctor(dictMonad))(searchParser(dictMonad)(v)(v2.value0))(function (p1$prime) {
                          return Control_Apply.apply(Options_Applicative_Types.parserApply)(p1$prime)(v2.value1);
                      });
                      return Options_Applicative_Internal.nondetTAltOp(dictMonad)(a)(b);
                  })(v1.value0);
              };
              if (v1 instanceof Options_Applicative_Types.AltP) {
                  return Data_Foldable.oneOf(Data_Foldable.foldableArray)(Options_Applicative_Internal.nondetTPlus(dictMonad))([ searchParser(dictMonad)(v)(v1.value0), searchParser(dictMonad)(v)(v1.value1) ]);
              };
              if (v1 instanceof Options_Applicative_Types.BindP) {
                  return Control_Monad_Free["resume'"](function (p) {
                      return function (k) {
                          return Data_Foldable.oneOf(Data_Foldable.foldableArray)(Options_Applicative_Internal.nondetTPlus(dictMonad))([ Data_Functor.mapFlipped(Options_Applicative_Internal.nondetTFunctor(dictMonad))(searchParser(dictMonad)(v)(p))(function (p$prime) {
                              return Options_Applicative_Types.BindP.create(Control_Bind.bind(Control_Monad_Free.freeBind)(Control_Monad_Free.liftF(p$prime))(k));
                          }), (function () {
                              var v2 = evalParser(p);
                              if (v2 instanceof Data_Maybe.Nothing) {
                                  return Control_Plus.empty(Options_Applicative_Internal.nondetTPlus(dictMonad));
                              };
                              if (v2 instanceof Data_Maybe.Just) {
                                  return searchParser(dictMonad)(v)(Options_Applicative_Types.BindP.create(k(v2.value0)));
                              };
                              throw new Error("Failed pattern match at Options.Applicative.Common (line 134, column 7 - line 136, column 49): " + [ v2.constructor.name ]);
                          })() ]);
                      };
                  })(Data_Function["const"](Control_Plus.empty(Options_Applicative_Internal.nondetTPlus(dictMonad))))(v1.value0);
              };
              throw new Error("Failed pattern match at Options.Applicative.Common (line 117, column 1 - line 119, column 49): " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var searchOpt = function (dictMonadP) {
      return function (pprefs) {
          return function (w) {
              return searchParser(Control_Monad_State_Trans.monadStateT(((dictMonadP.MonadPlus0()).MonadZero0()).Monad0()))(function (opt) {
                  var disambiguate = (Data_Newtype.un(Options_Applicative_Types.parserPrefsNewtype)(Options_Applicative_Types.ParserPrefs)(pprefs)).prefDisambiguate && Data_Ord.greaterThan(Options_Applicative_Types.optVisibilityOrd)(Options_Applicative_Types.optVisibility(opt))(Options_Applicative_Types.Internal.value);
                  var v = optMatches(dictMonadP)(disambiguate)((Data_Newtype.un(Options_Applicative_Types.optionNewtype)(Options_Applicative_Types.Option)(opt)).optMain)(w);
                  if (v instanceof Data_Maybe.Just) {
                      return Control_Monad_Trans_Class.lift(Options_Applicative_Internal.nondetTMonadTrans)(Control_Monad_State_Trans.monadStateT(((dictMonadP.MonadPlus0()).MonadZero0()).Monad0()))(Data_Functor.map(Control_Monad_State_Trans.functorStateT((((((dictMonadP.MonadPlus0()).MonadZero0()).Alternative1()).Plus1()).Alt0()).Functor0()))(Control_Applicative.pure(Options_Applicative_Types.parserApplicative))(v.value0));
                  };
                  if (v instanceof Data_Maybe.Nothing) {
                      return Control_Plus.empty(Options_Applicative_Internal.nondetTPlus(Control_Monad_State_Trans.monadStateT(((dictMonadP.MonadPlus0()).MonadZero0()).Monad0())));
                  };
                  throw new Error("Failed pattern match at Options.Applicative.Common (line 143, column 3 - line 145, column 21): " + [ v.constructor.name ]);
              });
          };
      };
  };
  var stepParser = function (dictMonadP) {
      return function (pprefs) {
          return function (v) {
              return function (arg) {
                  return function (p) {
                      if (v instanceof Options_Applicative_Types.AllPositionals) {
                          return searchArg(dictMonadP)(pprefs)(arg)(p);
                      };
                      if (v instanceof Options_Applicative_Types.ForwardOptions) {
                          var v1 = parseWord(arg);
                          if (v1 instanceof Data_Maybe.Just) {
                              return Control_Alt.alt(Options_Applicative_Internal.nondetTAlt(Control_Monad_State_Trans.monadStateT(((dictMonadP.MonadPlus0()).MonadZero0()).Monad0())))(searchOpt(dictMonadP)(pprefs)(v1.value0)(p))(searchArg(dictMonadP)(pprefs)(arg)(p));
                          };
                          if (v1 instanceof Data_Maybe.Nothing) {
                              return searchArg(dictMonadP)(pprefs)(arg)(p);
                          };
                          throw new Error("Failed pattern match at Options.Applicative.Common (line 173, column 42 - line 175, column 36): " + [ v1.constructor.name ]);
                      };
                      var v1 = parseWord(arg);
                      if (v1 instanceof Data_Maybe.Just) {
                          return searchOpt(dictMonadP)(pprefs)(v1.value0)(p);
                      };
                      if (v1 instanceof Data_Maybe.Nothing) {
                          return searchArg(dictMonadP)(pprefs)(arg)(p);
                      };
                      throw new Error("Failed pattern match at Options.Applicative.Common (line 176, column 29 - line 178, column 36): " + [ v1.constructor.name ]);
                  };
              };
          };
      };
  };
  var searchArg = function (dictMonadP) {
      return function (prefs) {
          return function (arg) {
              return searchParser(Control_Monad_State_Trans.monadStateT(((dictMonadP.MonadPlus0()).MonadZero0()).Monad0()))(function (opt) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Options_Applicative_Internal.nondetTBind(Control_Monad_State_Trans.monadStateT(((dictMonadP.MonadPlus0()).MonadZero0()).Monad0())))(Control_Applicative.when(Options_Applicative_Internal.nondetTApplicative(Control_Monad_State_Trans.monadStateT(((dictMonadP.MonadPlus0()).MonadZero0()).Monad0())))(isArg((Data_Newtype.un(Options_Applicative_Types.optionNewtype)(Options_Applicative_Types.Option)(opt)).optMain))(Options_Applicative_Internal.cut(Control_Monad_State_Trans.monadStateT(((dictMonadP.MonadPlus0()).MonadZero0()).Monad0()))))(function () {
                      var v = (Data_Newtype.un(Options_Applicative_Types.optionNewtype)(Options_Applicative_Types.Option)(opt)).optMain;
                      if (v instanceof Options_Applicative_Types.CmdReader) {
                          var v1 = new Data_Tuple.Tuple(v.value2(arg), (Data_Newtype.un(Options_Applicative_Types.parserPrefsNewtype)(Options_Applicative_Types.ParserPrefs)(prefs)).prefBacktrack);
                          if (v1.value0 instanceof Data_Maybe.Just && v1.value1 instanceof Options_Applicative_Types.NoBacktrack) {
                              return Control_Monad_Trans_Class.lift(Options_Applicative_Internal.nondetTMonadTrans)(Control_Monad_State_Trans.monadStateT(((dictMonadP.MonadPlus0()).MonadZero0()).Monad0()))(Control_Bind.bind(Control_Monad_State_Trans.bindStateT(((dictMonadP.MonadPlus0()).MonadZero0()).Monad0()))(Control_Apply.applyFirst(Control_Monad_State_Trans.applyStateT(((dictMonadP.MonadPlus0()).MonadZero0()).Monad0()))(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateStateT(((dictMonadP.MonadPlus0()).MonadZero0()).Monad0())))(Control_Monad_State_Class.put(Control_Monad_State_Trans.monadStateStateT(((dictMonadP.MonadPlus0()).MonadZero0()).Monad0()))(Data_List_Types.Nil.value)))(function (v2) {
                                  return Data_Functor.map(Control_Monad_State_Trans.functorStateT((((((dictMonadP.MonadPlus0()).MonadZero0()).Alternative1()).Plus1()).Alt0()).Functor0()))(Control_Applicative.pure(Options_Applicative_Types.parserApplicative))(Control_Monad_Trans_Class.lift(Control_Monad_State_Trans.monadTransStateT)(((dictMonadP.MonadPlus0()).MonadZero0()).Monad0())(Control_Apply.applyFirst(((((dictMonadP.MonadPlus0()).MonadZero0()).Alternative1()).Applicative0()).Apply0())(Control_Apply.applySecond(((((dictMonadP.MonadPlus0()).MonadZero0()).Alternative1()).Applicative0()).Apply0())(Options_Applicative_Internal.enterContext(dictMonadP)(arg)(v1.value0.value0))(runParserInfo(dictMonadP)(v1.value0.value0)(v2)))(Options_Applicative_Internal.exitContext(dictMonadP))));
                              }));
                          };
                          if (v1.value0 instanceof Data_Maybe.Just && v1.value1 instanceof Options_Applicative_Types.Backtrack) {
                              return Data_Functor.map(Options_Applicative_Internal.nondetTFunctor(Control_Monad_State_Trans.monadStateT(((dictMonadP.MonadPlus0()).MonadZero0()).Monad0())))(Control_Applicative.pure(Options_Applicative_Types.parserApplicative))(Control_Monad_Trans_Class.lift(Options_Applicative_Internal.nondetTMonadTrans)(Control_Monad_State_Trans.monadStateT(((dictMonadP.MonadPlus0()).MonadZero0()).Monad0()))(Control_Monad_State_Trans.StateT(function (args) {
                                  return Control_Apply.applyFirst(((((dictMonadP.MonadPlus0()).MonadZero0()).Alternative1()).Applicative0()).Apply0())(Control_Apply.applySecond(((((dictMonadP.MonadPlus0()).MonadZero0()).Alternative1()).Applicative0()).Apply0())(Options_Applicative_Internal.enterContext(dictMonadP)(arg)(v1.value0.value0))(runParser(dictMonadP)((Data_Newtype.un(Options_Applicative_Types.parserInfoNewtype)(Options_Applicative_Types.ParserInfo)(v1.value0.value0)).infoPolicy)(Options_Applicative_Types.CmdStart.value)((Data_Newtype.un(Options_Applicative_Types.parserInfoNewtype)(Options_Applicative_Types.ParserInfo)(v1.value0.value0)).infoParser)(args)))(Options_Applicative_Internal.exitContext(dictMonadP));
                              })));
                          };
                          if (v1.value0 instanceof Data_Maybe.Just && v1.value1 instanceof Options_Applicative_Types.SubparserInline) {
                              return Control_Monad_Trans_Class.lift(Options_Applicative_Internal.nondetTMonadTrans)(Control_Monad_State_Trans.monadStateT(((dictMonadP.MonadPlus0()).MonadZero0()).Monad0()))(Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_State_Trans.bindStateT(((dictMonadP.MonadPlus0()).MonadZero0()).Monad0()))(Control_Monad_Trans_Class.lift(Control_Monad_State_Trans.monadTransStateT)(((dictMonadP.MonadPlus0()).MonadZero0()).Monad0())(Options_Applicative_Internal.enterContext(dictMonadP)(arg)(v1.value0.value0)))(function () {
                                  return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(((dictMonadP.MonadPlus0()).MonadZero0()).Monad0()))((Data_Newtype.un(Options_Applicative_Types.parserInfoNewtype)(Options_Applicative_Types.ParserInfo)(v1.value0.value0)).infoParser);
                              }));
                          };
                          if (v1.value0 instanceof Data_Maybe.Nothing) {
                              return Control_Plus.empty(Options_Applicative_Internal.nondetTPlus(Control_Monad_State_Trans.monadStateT(((dictMonadP.MonadPlus0()).MonadZero0()).Monad0())));
                          };
                          throw new Error("Failed pattern match at Options.Applicative.Common (line 153, column 7 - line 165, column 38): " + [ v1.constructor.name ]);
                      };
                      if (v instanceof Options_Applicative_Types.ArgReader) {
                          return Data_Functor.map(Options_Applicative_Internal.nondetTFunctor(Control_Monad_State_Trans.monadStateT(((dictMonadP.MonadPlus0()).MonadZero0()).Monad0())))(Control_Applicative.pure(Options_Applicative_Types.parserApplicative))(Control_Monad_Trans_Class.lift(Options_Applicative_Internal.nondetTMonadTrans)(Control_Monad_State_Trans.monadStateT(((dictMonadP.MonadPlus0()).MonadZero0()).Monad0()))(Control_Monad_Trans_Class.lift(Control_Monad_State_Trans.monadTransStateT)(((dictMonadP.MonadPlus0()).MonadZero0()).Monad0())(Options_Applicative_Internal.runReadM(dictMonadP)((Data_Newtype.un(Options_Applicative_Types.newtypeCReader)(Options_Applicative_Types.CReader)(v.value0)).crReader)(arg))));
                      };
                      return Control_Plus.empty(Options_Applicative_Internal.nondetTPlus(Control_Monad_State_Trans.monadStateT(((dictMonadP.MonadPlus0()).MonadZero0()).Monad0())));
                  });
              });
          };
      };
  };
  var runParserInfo = function (dictMonadP) {
      return function (i) {
          return runParserFully(dictMonadP)((Data_Newtype.un(Options_Applicative_Types.parserInfoNewtype)(Options_Applicative_Types.ParserInfo)(i)).infoPolicy)((Data_Newtype.un(Options_Applicative_Types.parserInfoNewtype)(Options_Applicative_Types.ParserInfo)(i)).infoParser);
      };
  };
  var runParserFully = function (dictMonadP) {
      return function (policy) {
          return function (p) {
              return function (args) {
                  return Control_Bind.bind((((dictMonadP.MonadPlus0()).MonadZero0()).Monad0()).Bind1())(runParser(dictMonadP)(policy)(Options_Applicative_Types.CmdStart.value)(p)(args))(function (v) {
                      if (v.value1 instanceof Data_List_Types.Nil) {
                          return Control_Applicative.pure((((dictMonadP.MonadPlus0()).MonadZero0()).Alternative1()).Applicative0())(v.value0);
                      };
                      if (v.value1 instanceof Data_List_Types.Cons) {
                          return parseError(dictMonadP)(v.value1.value0)(Control_Applicative.pure(Options_Applicative_Types.parserApplicative)(Data_Unit.unit));
                      };
                      throw new Error("Failed pattern match at Options.Applicative.Common (line 213, column 3 - line 215, column 52): " + [ v.value1.constructor.name ]);
                  });
              };
          };
      };
  };
  var runParser = function (dictMonadP) {
      return function (policy) {
          return function (isCmdStart) {
              return function (p) {
                  return function (args) {
                      var result = Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Tuple.Tuple.create)(evalParser(p)))(Control_Applicative.pure(Data_Maybe.applicativeMaybe)(args));
                      var newPolicy = function (a) {
                          if (policy instanceof Options_Applicative_Types.NoIntersperse) {
                              var $188 = Data_Maybe.isJust(parseWord(a));
                              if ($188) {
                                  return Options_Applicative_Types.NoIntersperse.value;
                              };
                              return Options_Applicative_Types.AllPositionals.value;
                          };
                          return policy;
                      };
                      var do_step = function (prefs) {
                          return function (arg) {
                              return function (argt) {
                                  return (function (v) {
                                      return Control_Monad_State_Trans.runStateT(v)(argt);
                                  })(Options_Applicative_Internal.disamb(Control_Monad_State_Trans.monadStateT(((dictMonadP.MonadPlus0()).MonadZero0()).Monad0()))(!(Data_Newtype.un(Options_Applicative_Types.parserPrefsNewtype)(Options_Applicative_Types.ParserPrefs)(prefs)).prefDisambiguate)(stepParser(dictMonadP)(prefs)(policy)(arg)(p)));
                              };
                          };
                      };
                      if (args instanceof Data_List_Types.Nil) {
                          return Options_Applicative_Internal.exitP(dictMonadP)(isCmdStart)(policy)(p)(result);
                      };
                      if (args instanceof Data_List_Types.Cons && (args.value0 === "--" && Data_Eq.notEq(Options_Applicative_Types.argPolicyEq)(policy)(Options_Applicative_Types.AllPositionals.value))) {
                          return runParser(dictMonadP)(Options_Applicative_Types.AllPositionals.value)(Options_Applicative_Types.CmdCont.value)(p)(args.value1);
                      };
                      if (args instanceof Data_List_Types.Cons) {
                          return Control_Bind.bind((((dictMonadP.MonadPlus0()).MonadZero0()).Monad0()).Bind1())(Options_Applicative_Internal.getPrefs(dictMonadP))(function (v) {
                              return Control_Bind.bind((((dictMonadP.MonadPlus0()).MonadZero0()).Monad0()).Bind1())(do_step(v)(args.value0)(args.value1))(function (v1) {
                                  if (v1.value0 instanceof Data_Maybe.Nothing) {
                                      return Control_Alt.alt(((((dictMonadP.MonadPlus0()).MonadZero0()).Alternative1()).Plus1()).Alt0())(Options_Applicative_Internal.hoistMaybe(dictMonadP.MonadPlus0())(result))(parseError(dictMonadP)(args.value0)(p));
                                  };
                                  if (v1.value0 instanceof Data_Maybe.Just) {
                                      return runParser(dictMonadP)(newPolicy(args.value0))(Options_Applicative_Types.CmdCont.value)(v1.value0.value0)(v1.value1);
                                  };
                                  throw new Error("Failed pattern match at Options.Applicative.Common (line 191, column 5 - line 193, column 60): " + [ v1.value0.constructor.name ]);
                              });
                          });
                      };
                      throw new Error("Failed pattern match at Options.Applicative.Common (line 185, column 38 - line 193, column 60): " + [ args.constructor.name ]);
                  };
              };
          };
      };
  };
  var treeMapParser = function (g) {
      var has_default = function (p) {
          return Data_Maybe.isJust(evalParser(p));
      };
      var hasArg = function (v) {
          if (v instanceof Options_Applicative_Types.NilP) {
              return false;
          };
          if (v instanceof Options_Applicative_Types.OptP) {
              return isArg((Data_Newtype.un(Options_Applicative_Types.optionNewtype)(Options_Applicative_Types.Option)(v.value0)).optMain);
          };
          if (v instanceof Options_Applicative_Types.MultP) {
              return Data_Exists.runExists(function (v1) {
                  return hasArg(v1.value0) || hasArg(v1.value1);
              })(v.value0);
          };
          if (v instanceof Options_Applicative_Types.AltP) {
              return hasArg(v.value0) || hasArg(v.value1);
          };
          if (v instanceof Options_Applicative_Types.BindP) {
              return Control_Monad_Free["resume'"](function (p) {
                  return function (v1) {
                      return hasArg(p);
                  };
              })(Data_Function["const"](false))(v.value0);
          };
          throw new Error("Failed pattern match at Options.Applicative.Common (line 271, column 5 - line 271, column 44): " + [ v.constructor.name ]);
      };
      var go = function (v) {
          return function (v1) {
              return function (v2) {
                  return function (v3) {
                      return function (v4) {
                          if (v4 instanceof Options_Applicative_Types.NilP) {
                              return new Options_Applicative_Types.MultNode([  ]);
                          };
                          if (v4 instanceof Options_Applicative_Types.OptP) {
                              if (Data_Ord.greaterThan(Options_Applicative_Types.optVisibilityOrd)(Options_Applicative_Types.optVisibility(v4.value0))(Options_Applicative_Types.Internal.value)) {
                                  return new Options_Applicative_Types.Leaf(v3({
                                      hinfoMulti: v,
                                      hinfoDefault: v1,
                                      hinfoUnreachableArgs: v2
                                  })(v4.value0));
                              };
                              if (Data_Boolean.otherwise) {
                                  return new Options_Applicative_Types.MultNode([  ]);
                              };
                          };
                          if (v4 instanceof Options_Applicative_Types.MultP) {
                              return Data_Exists.runExists(function (v5) {
                                  var r$prime = v2 || hasArg(v5.value0);
                                  return new Options_Applicative_Types.MultNode([ go(v)(v1)(v2)(v3)(v5.value0), go(v)(v1)(r$prime)(v3)(v5.value1) ]);
                              })(v4.value0);
                          };
                          if (v4 instanceof Options_Applicative_Types.AltP) {
                              var d$prime = v1 || (has_default(v4.value0) || has_default(v4.value1));
                              return new Options_Applicative_Types.AltNode([ go(v)(d$prime)(v2)(v3)(v4.value0), go(v)(d$prime)(v2)(v3)(v4.value1) ]);
                          };
                          if (v4 instanceof Options_Applicative_Types.BindP) {
                              return Control_Monad_Free["resume'"](function (p) {
                                  return function (k) {
                                      var go$prime = go(true)(v1)(v2)(v3)(p);
                                      var v5 = evalParser(p);
                                      if (v5 instanceof Data_Maybe.Nothing) {
                                          return go$prime;
                                      };
                                      if (v5 instanceof Data_Maybe.Just) {
                                          return new Options_Applicative_Types.MultNode([ go$prime, go(true)(v1)(v2)(v3)(Options_Applicative_Types.BindP.create(k(v5.value0))) ]);
                                      };
                                      throw new Error("Failed pattern match at Options.Applicative.Common (line 266, column 12 - line 268, column 68): " + [ v5.constructor.name ]);
                                  };
                              })(Data_Function["const"](new Options_Applicative_Types.MultNode([  ])))(v4.value0);
                          };
                          throw new Error("Failed pattern match at Options.Applicative.Common (line 247, column 5 - line 250, column 21): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name, v3.constructor.name, v4.constructor.name ]);
                      };
                  };
              };
          };
      };
      var $242 = go(false)(false)(false)(g);
      return function ($243) {
          return simplify($242($243));
      };
  };
  var mapParser = function (f) {
      var flatten = function (v) {
          if (v instanceof Options_Applicative_Types.Leaf) {
              return [ v.value0 ];
          };
          if (v instanceof Options_Applicative_Types.MultNode) {
              return Control_Bind.bind(Control_Bind.bindArray)(v.value0)(flatten);
          };
          if (v instanceof Options_Applicative_Types.AltNode) {
              return Control_Bind.bind(Control_Bind.bindArray)(v.value0)(flatten);
          };
          throw new Error("Failed pattern match at Options.Applicative.Common (line 234, column 5 - line 234, column 27): " + [ v.constructor.name ]);
      };
      var $244 = treeMapParser(f);
      return function ($245) {
          return flatten($244($245));
      };
  };
  exports["liftOpt"] = liftOpt;
  exports["showOption"] = showOption;
  exports["runParserInfo"] = runParserInfo;
  exports["runParserFully"] = runParserFully;
  exports["runParser"] = runParser;
  exports["evalParser"] = evalParser;
  exports["mapParser"] = mapParser;
  exports["treeMapParser"] = treeMapParser;
  exports["optionNames"] = optionNames;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Text.PrettyPrint.Leijen"] = $PS["Text.PrettyPrint.Leijen"] || {};
  var exports = $PS["Text.PrettyPrint.Leijen"];
  var Data_Array = $PS["Data.Array"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Lazy = $PS["Data.Lazy"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_String_CodePoints = $PS["Data.String.CodePoints"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Partial_Unsafe = $PS["Partial.Unsafe"];                
  var SFail = (function () {
      function SFail() {

      };
      SFail.value = new SFail();
      return SFail;
  })();
  var SEmpty = (function () {
      function SEmpty() {

      };
      SEmpty.value = new SEmpty();
      return SEmpty;
  })();
  var SChar = (function () {
      function SChar(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SChar.create = function (value0) {
          return function (value1) {
              return new SChar(value0, value1);
          };
      };
      return SChar;
  })();
  var SText = (function () {
      function SText(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      SText.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new SText(value0, value1, value2);
              };
          };
      };
      return SText;
  })();
  var SLine = (function () {
      function SLine(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SLine.create = function (value0) {
          return function (value1) {
              return new SLine(value0, value1);
          };
      };
      return SLine;
  })();
  var SFail$prime = (function () {
      function SFail$prime() {

      };
      SFail$prime.value = new SFail$prime();
      return SFail$prime;
  })();
  var SEmpty$prime = (function () {
      function SEmpty$prime() {

      };
      SEmpty$prime.value = new SEmpty$prime();
      return SEmpty$prime;
  })();
  var SChar$prime = (function () {
      function SChar$prime(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SChar$prime.create = function (value0) {
          return function (value1) {
              return new SChar$prime(value0, value1);
          };
      };
      return SChar$prime;
  })();
  var SText$prime = (function () {
      function SText$prime(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      SText$prime.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new SText$prime(value0, value1, value2);
              };
          };
      };
      return SText$prime;
  })();
  var SLine$prime = (function () {
      function SLine$prime(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SLine$prime.create = function (value0) {
          return function (value1) {
              return new SLine$prime(value0, value1);
          };
      };
      return SLine$prime;
  })();
  var Fail = (function () {
      function Fail() {

      };
      Fail.value = new Fail();
      return Fail;
  })();
  var Empty = (function () {
      function Empty() {

      };
      Empty.value = new Empty();
      return Empty;
  })();
  var Char = (function () {
      function Char(value0) {
          this.value0 = value0;
      };
      Char.create = function (value0) {
          return new Char(value0);
      };
      return Char;
  })();
  var Text = (function () {
      function Text(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Text.create = function (value0) {
          return function (value1) {
              return new Text(value0, value1);
          };
      };
      return Text;
  })();
  var Line = (function () {
      function Line() {

      };
      Line.value = new Line();
      return Line;
  })();
  var FlatAlt = (function () {
      function FlatAlt(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      FlatAlt.create = function (value0) {
          return function (value1) {
              return new FlatAlt(value0, value1);
          };
      };
      return FlatAlt;
  })();
  var Cat = (function () {
      function Cat(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cat.create = function (value0) {
          return function (value1) {
              return new Cat(value0, value1);
          };
      };
      return Cat;
  })();
  var Nest = (function () {
      function Nest(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Nest.create = function (value0) {
          return function (value1) {
              return new Nest(value0, value1);
          };
      };
      return Nest;
  })();
  var Union = (function () {
      function Union(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Union.create = function (value0) {
          return function (value1) {
              return new Union(value0, value1);
          };
      };
      return Union;
  })();
  var Column = (function () {
      function Column(value0) {
          this.value0 = value0;
      };
      Column.create = function (value0) {
          return new Column(value0);
      };
      return Column;
  })();
  var Columns = (function () {
      function Columns(value0) {
          this.value0 = value0;
      };
      Columns.create = function (value0) {
          return new Columns(value0);
      };
      return Columns;
  })();
  var Nesting = (function () {
      function Nesting(value0) {
          this.value0 = value0;
      };
      Nesting.create = function (value0) {
          return new Nesting(value0);
      };
      return Nesting;
  })();
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Cons(value0, value1, value2);
              };
          };
      };
      return Cons;
  })();
  var text = function (v) {
      if (v === "") {
          return Empty.value;
      };
      return new Text(Data_String_CodePoints.length(v), v);
  };                         
  var spaces = function (n) {
      if (n <= 0) {
          return "";
      };
      if (Data_Boolean.otherwise) {
          return Data_String_CodeUnits.fromCharArray(Data_Array.replicate(n)(" "));
      };
      throw new Error("Failed pattern match at Text.PrettyPrint.Leijen (line 908, column 1 - line 908, column 24): " + [ n.constructor.name ]);
  };
  var space = new Char(" ");
  var rparen = new Char(")");
  var rbracket = new Char("]");
  var nesting = function (f) {
      return new Nesting(f);
  };
  var nest = function (i) {
      return function (x) {
          return new Nest(i, x);
      };
  };
  var lparen = new Char("(");
  var line = new FlatAlt(Line.value, space);
  var lbracket = new Char("[");
  var indentation = function (n) {
      return spaces(n);
  }; 
  var forceSimpleDoc = function (v) {
      if (v instanceof SFail$prime) {
          return SFail.value;
      };
      if (v instanceof SEmpty$prime) {
          return SEmpty.value;
      };
      if (v instanceof SChar$prime) {
          return new SChar(v.value0, forceSimpleDoc(Data_Lazy.force(v.value1)));
      };
      if (v instanceof SText$prime) {
          return new SText(v.value0, v.value1, forceSimpleDoc(Data_Lazy.force(v.value2)));
      };
      if (v instanceof SLine$prime) {
          return new SLine(v.value0, forceSimpleDoc(Data_Lazy.force(v.value1)));
      };
      throw new Error("Failed pattern match at Text.PrettyPrint.Leijen (line 600, column 18 - line 605, column 51): " + [ v.constructor.name ]);
  };
  var renderFits = function (fits) {
      return function (rfrac) {
          return function (w) {
              return function (headNode) {
                  var r = Data_Ord.max(Data_Ord.ordInt)(0)(Data_Ord.min(Data_Ord.ordInt)(w)(Data_Int.round(Data_Int.toNumber(w) * rfrac)));
                  var nicest$prime = function (n) {
                      return function (k) {
                          return function (i) {
                              return function (ds) {
                                  return function (x) {
                                      return function (y) {
                                          var x$prime = best(n)(k)(new Cons(i, x, ds));
                                          var width$prime = Data_Ord.min(Data_Ord.ordInt)(w - k | 0)((r - k | 0) + n | 0);
                                          var $170 = fits(w)(Data_Ord.min(Data_Ord.ordInt)(n)(k))(width$prime)(x$prime);
                                          if ($170) {
                                              return x$prime;
                                          };
                                          var y$prime = best(n)(k)(new Cons(i, y, ds));
                                          return y$prime;
                                      };
                                  };
                              };
                          };
                      };
                  };
                  var best = function (n) {
                      return function (k) {
                          return function (v) {
                              if (v instanceof Nil) {
                                  return SEmpty$prime.value;
                              };
                              if (v instanceof Cons) {
                                  if (v.value1 instanceof Fail) {
                                      return SFail$prime.value;
                                  };
                                  if (v.value1 instanceof Empty) {
                                      return best(n)(k)(v.value2);
                                  };
                                  if (v.value1 instanceof Char) {
                                      var k$prime = k + 1 | 0;
                                      return new SChar$prime(v.value1.value0, Data_Lazy.defer(function (v1) {
                                          return best(n)(k$prime)(v.value2);
                                      }));
                                  };
                                  if (v.value1 instanceof Text) {
                                      var k$prime = k + v.value1.value0 | 0;
                                      return new SText$prime(v.value1.value0, v.value1.value1, Data_Lazy.defer(function (v1) {
                                          return best(n)(k$prime)(v.value2);
                                      }));
                                  };
                                  if (v.value1 instanceof Line) {
                                      return new SLine$prime(v.value0, Data_Lazy.defer(function (v1) {
                                          return best(v.value0)(v.value0)(v.value2);
                                      }));
                                  };
                                  if (v.value1 instanceof FlatAlt) {
                                      return best(n)(k)(new Cons(v.value0, v.value1.value0, v.value2));
                                  };
                                  if (v.value1 instanceof Cat) {
                                      return best(n)(k)(new Cons(v.value0, v.value1.value0, new Cons(v.value0, v.value1.value1, v.value2)));
                                  };
                                  if (v.value1 instanceof Nest) {
                                      var i$prime = v.value0 + v.value1.value0 | 0;
                                      return best(n)(k)(new Cons(i$prime, v.value1.value1, v.value2));
                                  };
                                  if (v.value1 instanceof Union) {
                                      return nicest$prime(n)(k)(v.value0)(v.value2)(v.value1.value0)(v.value1.value1);
                                  };
                                  if (v.value1 instanceof Column) {
                                      return best(n)(k)(new Cons(v.value0, v.value1.value0(k), v.value2));
                                  };
                                  if (v.value1 instanceof Columns) {
                                      return best(n)(k)(new Cons(v.value0, v.value1.value0(new Data_Maybe.Just(w)), v.value2));
                                  };
                                  if (v.value1 instanceof Nesting) {
                                      return best(n)(k)(new Cons(v.value0, v.value1.value0(v.value0), v.value2));
                                  };
                                  throw new Error("Failed pattern match at Text.PrettyPrint.Leijen (line 788, column 11 - line 802, column 56): " + [ v.value1.constructor.name ]);
                              };
                              throw new Error("Failed pattern match at Text.PrettyPrint.Leijen (line 785, column 7 - line 785, column 50): " + [ n.constructor.name, k.constructor.name, v.constructor.name ]);
                          };
                      };
                  };
                  return forceSimpleDoc(best(0)(0)(new Cons(0, headNode, Nil.value)));
              };
          };
      };
  };
  var foldr1 = function (dictMonoid) {
      return function (f) {
          return function ($246) {
              return (function (v) {
                  if (v instanceof Data_Maybe.Nothing) {
                      return Data_Monoid.mempty(dictMonoid);
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return Data_Foldable.foldr(Data_Foldable.foldableArray)(f)(v.value0.last)(v.value0.init);
                  };
                  throw new Error("Failed pattern match at Text.PrettyPrint.Leijen (line 122, column 29 - line 124, column 43): " + [ v.constructor.name ]);
              })(Data_Array.unsnoc($246));
          };
      };
  };
  var flatten = function (v) {
      if (v instanceof FlatAlt) {
          return v.value1;
      };
      if (v instanceof Cat) {
          return new Cat(flatten(v.value0), flatten(v.value1));
      };
      if (v instanceof Nest) {
          return new Nest(v.value0, flatten(v.value1));
      };
      if (v instanceof Line) {
          return Fail.value;
      };
      if (v instanceof Union) {
          return flatten(v.value0);
      };
      if (v instanceof Column) {
          return new Column(function ($247) {
              return flatten(v.value0($247));
          });
      };
      if (v instanceof Columns) {
          return new Columns(function ($248) {
              return flatten(v.value0($248));
          });
      };
      if (v instanceof Nesting) {
          return new Nesting(function ($249) {
              return flatten(v.value0($249));
          });
      };
      return v;
  };
  var group = function (x) {
      return new Union(flatten(x), x);
  };
  var softline = group(line);         
  var fits1 = function ($copy_v) {
      return function ($copy_v1) {
          return function ($copy_w) {
              return function ($copy_v2) {
                  var $tco_var_v = $copy_v;
                  var $tco_var_v1 = $copy_v1;
                  var $tco_var_w = $copy_w;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(v, v1, w, v2) {
                      if (w < 0) {
                          $tco_done = true;
                          return false;
                      };
                      if (v2 instanceof SFail$prime) {
                          $tco_done = true;
                          return false;
                      };
                      if (v2 instanceof SEmpty$prime) {
                          $tco_done = true;
                          return true;
                      };
                      if (v2 instanceof SChar$prime) {
                          $tco_var_v = v;
                          $tco_var_v1 = v1;
                          $tco_var_w = w - 1 | 0;
                          $copy_v2 = Data_Lazy.force(v2.value1);
                          return;
                      };
                      if (v2 instanceof SText$prime) {
                          $tco_var_v = v;
                          $tco_var_v1 = v1;
                          $tco_var_w = w - v2.value0 | 0;
                          $copy_v2 = Data_Lazy.force(v2.value2);
                          return;
                      };
                      if (v2 instanceof SLine$prime) {
                          $tco_done = true;
                          return true;
                      };
                      throw new Error("Failed pattern match at Text.PrettyPrint.Leijen (line 819, column 1 - line 819, column 55): " + [ v.constructor.name, v1.constructor.name, w.constructor.name, v2.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_v, $tco_var_v1, $tco_var_w, $copy_v2);
                  };
                  return $tco_result;
              };
          };
      };
  };
  var renderPretty = renderFits(fits1);
  var empty = Empty.value;
  var linebreak = new FlatAlt(Line.value, empty);
  var displayS = function (v) {
      if (v instanceof SFail) {
          return Partial_Unsafe.unsafeCrashWith("@SFail@ can not appear uncaught in a rendered @SimpleDoc@");
      };
      if (v instanceof SEmpty) {
          return "";
      };
      if (v instanceof SChar) {
          return Data_String_CodeUnits.fromCharArray([ v.value0 ]) + displayS(v.value1);
      };
      if (v instanceof SText) {
          return v.value1 + displayS(v.value2);
      };
      if (v instanceof SLine) {
          return "\x0a" + (indentation(v.value0) + displayS(v.value1));
      };
      throw new Error("Failed pattern match at Text.PrettyPrint.Leijen (line 893, column 1 - line 893, column 32): " + [ v.constructor.name ]);
  };
  var column = function (f) {
      return new Column(f);
  };                        
  var $$char = function (v) {
      if (v === "\x0a") {
          return line;
      };
      return new Char(v);
  };
  var beside = function (x) {
      return function (y) {
          return new Cat(x, y);
      };
  };
  var docSemigroup = new Data_Semigroup.Semigroup(beside);
  var docMonoid = new Data_Monoid.Monoid(function () {
      return docSemigroup;
  }, empty);
  var string = (function () {
      var $252 = Data_Foldable.intercalate(Data_Foldable.foldableArray)(docMonoid)(line);
      var $253 = Data_Functor.map(Data_Functor.functorArray)(text);
      var $254 = Data_String_Common.split("\x0a");
      return function ($255) {
          return $252($253($254($255)));
      };
  })();
  var enclose = function (l) {
      return function (r) {
          return function (x) {
              return Data_Semigroup.append(docSemigroup)(l)(Data_Semigroup.append(docSemigroup)(x)(r));
          };
      };
  };                                   
  var brackets = enclose(lbracket)(rbracket);
  var parens = enclose(lparen)(rparen);
  var width = function (d) {
      return function (f) {
          return column(function (k1) {
              return Data_Semigroup.append(docSemigroup)(d)(column(function (k2) {
                  return f(k2 - k1 | 0);
              }));
          });
      };
  };
  var fillBreak = function (f) {
      return function (x) {
          return width(x)(function (w) {
              var $241 = w > f;
              if ($241) {
                  return nest(f)(linebreak);
              };
              return text(spaces(f - w | 0));
          });
      };
  };                             
  var appendWithSpace = function (x) {
      return function (y) {
          return Data_Semigroup.append(docSemigroup)(x)(Data_Semigroup.append(docSemigroup)(space)(y));
      };
  };
  var hsep = foldr1(docMonoid)(appendWithSpace);
  var appendWithSoftline = function (x) {
      return function (y) {
          return Data_Semigroup.append(docSemigroup)(x)(Data_Semigroup.append(docSemigroup)(softline)(y));
      };
  };                                                   
  var appendWithLinebreak = function (x) {
      return function (y) {
          return Data_Semigroup.append(docSemigroup)(x)(Data_Semigroup.append(docSemigroup)(linebreak)(y));
      };
  };
  var vcat = foldr1(docMonoid)(appendWithLinebreak);
  var appendWithLine = function (x) {
      return function (y) {
          return Data_Semigroup.append(docSemigroup)(x)(Data_Semigroup.append(docSemigroup)(line)(y));
      };
  };                                   
  var align = function (d) {
      return column(function (k) {
          return nesting(function (i) {
              return nest(k - i | 0)(d);
          });
      });
  };                                             
  var hang = function (i) {
      return function (d) {
          return align(nest(i)(d));
      };
  };
  var indent = function (i) {
      return function (d) {
          return hang(i)(Data_Semigroup.append(docSemigroup)(text(spaces(i)))(d));
      };
  };
  exports["foldr1"] = foldr1;
  exports["hsep"] = hsep;
  exports["vcat"] = vcat;
  exports["appendWithSpace"] = appendWithSpace;
  exports["appendWithSoftline"] = appendWithSoftline;
  exports["appendWithLine"] = appendWithLine;
  exports["appendWithLinebreak"] = appendWithLinebreak;
  exports["softline"] = softline;
  exports["parens"] = parens;
  exports["brackets"] = brackets;
  exports["enclose"] = enclose;
  exports["lparen"] = lparen;
  exports["rparen"] = rparen;
  exports["lbracket"] = lbracket;
  exports["rbracket"] = rbracket;
  exports["space"] = space;
  exports["string"] = string;
  exports["fillBreak"] = fillBreak;
  exports["width"] = width;
  exports["indent"] = indent;
  exports["hang"] = hang;
  exports["align"] = align;
  exports["Fail"] = Fail;
  exports["Empty"] = Empty;
  exports["Char"] = Char;
  exports["Text"] = Text;
  exports["Line"] = Line;
  exports["FlatAlt"] = FlatAlt;
  exports["Cat"] = Cat;
  exports["Nest"] = Nest;
  exports["Union"] = Union;
  exports["Column"] = Column;
  exports["Columns"] = Columns;
  exports["Nesting"] = Nesting;
  exports["SFail"] = SFail;
  exports["SEmpty"] = SEmpty;
  exports["SChar"] = SChar;
  exports["SText"] = SText;
  exports["SLine"] = SLine;
  exports["forceSimpleDoc"] = forceSimpleDoc;
  exports["empty"] = empty;
  exports["char"] = $$char;
  exports["text"] = text;
  exports["line"] = line;
  exports["linebreak"] = linebreak;
  exports["beside"] = beside;
  exports["nest"] = nest;
  exports["column"] = column;
  exports["nesting"] = nesting;
  exports["group"] = group;
  exports["flatten"] = flatten;
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["renderPretty"] = renderPretty;
  exports["renderFits"] = renderFits;
  exports["fits1"] = fits1;
  exports["displayS"] = displayS;
  exports["spaces"] = spaces;
  exports["indentation"] = indentation;
  exports["docSemigroup"] = docSemigroup;
  exports["docMonoid"] = docMonoid;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Options.Applicative.Help.Chunk"] = $PS["Options.Applicative.Help.Chunk"] || {};
  var exports = $PS["Options.Applicative.Help.Chunk"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Options_Applicative_Internal_Utils = $PS["Options.Applicative.Internal.Utils"];
  var Text_PrettyPrint_Leijen = $PS["Text.PrettyPrint.Leijen"];                
  var Chunk = function (x) {
      return x;
  };
  var chunked = function (v) {
      return function (v1) {
          return function (v2) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  return v2;
              };
              if (v2 instanceof Data_Maybe.Nothing) {
                  return v1;
              };
              if (v1 instanceof Data_Maybe.Just && v2 instanceof Data_Maybe.Just) {
                  return new Data_Maybe.Just(v(v1.value0)(v2.value0));
              };
              throw new Error("Failed pattern match at Options.Applicative.Help.Chunk (line 59, column 1 - line 60, column 41): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var chunkSemigroup = function (dictSemigroup) {
      return new Data_Semigroup.Semigroup(chunked(Data_Semigroup.append(dictSemigroup)));
  };
  var chunkNewtype = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Chunk);
  var extractChunk = function (dictMonoid) {
      var $34 = Data_Maybe.fromMaybe(Data_Monoid.mempty(dictMonoid));
      var $35 = Data_Newtype.un(chunkNewtype)(Chunk);
      return function ($36) {
          return $34($35($36));
      };
  };
  var isEmpty = (function () {
      var $37 = Data_Newtype.un(chunkNewtype)(Chunk);
      return function ($38) {
          return Data_Maybe.isNothing($37($38));
      };
  })();
  var chunkMonoid = function (dictSemigroup) {
      return new Data_Monoid.Monoid(function () {
          return chunkSemigroup(dictSemigroup);
      }, Data_Maybe.Nothing.value);
  };
  var vcatChunks = Data_Foldable.foldr(Data_Foldable.foldableArray)(chunked(Text_PrettyPrint_Leijen.appendWithLine))(Data_Monoid.mempty(chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup)));
  var vsepChunks = Data_Foldable.foldr(Data_Foldable.foldableArray)(chunked(function (x) {
      return function (y) {
          return Text_PrettyPrint_Leijen.appendWithLine(x)(Text_PrettyPrint_Leijen.appendWithLine(Data_Monoid.mempty(Text_PrettyPrint_Leijen.docMonoid))(y));
      };
  }))(Data_Monoid.mempty(chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup)));
  var chunkFunctor = Data_Maybe.functorMaybe;
  var chunkBesideOrBelow = chunked(Text_PrettyPrint_Leijen.appendWithSoftline);
  var chunkBeside = chunked(Text_PrettyPrint_Leijen.appendWithSpace);
  var chunkApply = Data_Maybe.applyMaybe;
  var chunkApplicative = Data_Maybe.applicativeMaybe;
  var listToChunk = function (dictMonoid) {
      return function (v) {
          if (v.length === 0) {
              return Data_Monoid.mempty(chunkMonoid(dictMonoid.Semigroup0()));
          };
          return Control_Applicative.pure(chunkApplicative)(Data_Foldable.fold(Data_Foldable.foldableArray)(dictMonoid)(v));
      };
  };
  var stringChunk = function (v) {
      if (v === "") {
          return Data_Monoid.mempty(chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup));
      };
      return Control_Applicative.pure(chunkApplicative)(Text_PrettyPrint_Leijen.text(v));
  };
  var paragraph = (function () {
      var $39 = Data_Foldable.foldr(Data_Foldable.foldableArray)((function () {
          var $41 = chunked(Text_PrettyPrint_Leijen.appendWithSoftline);
          return function ($42) {
              return $41(stringChunk($42));
          };
      })())(Data_Monoid.mempty(chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup)));
      return function ($40) {
          return $39(Options_Applicative_Internal_Utils.words($40));
      };
  })();
  var tabulate$prime = function (v) {
      return function (v1) {
          if (v1.length === 0) {
              return Data_Monoid.mempty(chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup));
          };
          return Control_Applicative.pure(chunkApplicative)(Text_PrettyPrint_Leijen.vcat(Data_Functor.mapFlipped(Data_Functor.functorArray)(v1)(function (v2) {
              return Text_PrettyPrint_Leijen.indent(2)(Text_PrettyPrint_Leijen.appendWithSpace(Text_PrettyPrint_Leijen.fillBreak(v)(v2.value0))(v2.value1));
          })));
      };
  };
  var tabulate = tabulate$prime(24);
  exports["Chunk"] = Chunk;
  exports["chunked"] = chunked;
  exports["listToChunk"] = listToChunk;
  exports["chunkBeside"] = chunkBeside;
  exports["chunkBesideOrBelow"] = chunkBesideOrBelow;
  exports["vcatChunks"] = vcatChunks;
  exports["vsepChunks"] = vsepChunks;
  exports["isEmpty"] = isEmpty;
  exports["stringChunk"] = stringChunk;
  exports["paragraph"] = paragraph;
  exports["extractChunk"] = extractChunk;
  exports["tabulate"] = tabulate;
  exports["chunkNewtype"] = chunkNewtype;
  exports["chunkFunctor"] = chunkFunctor;
  exports["chunkApply"] = chunkApply;
  exports["chunkApplicative"] = chunkApplicative;
  exports["chunkSemigroup"] = chunkSemigroup;
  exports["chunkMonoid"] = chunkMonoid;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Options.Applicative.Builder.Internal"] = $PS["Options.Applicative.Builder.Internal"] || {};
  var exports = $PS["Options.Applicative.Builder.Internal"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Unit = $PS["Data.Unit"];
  var Options_Applicative_Common = $PS["Options.Applicative.Common"];
  var Options_Applicative_Help_Chunk = $PS["Options.Applicative.Help.Chunk"];
  var Options_Applicative_Types = $PS["Options.Applicative.Types"];
  var Text_PrettyPrint_Leijen = $PS["Text.PrettyPrint.Leijen"];                
  var OptionFields = function (x) {
      return x;
  };
  var FlagFields = function (x) {
      return x;
  };
  var DefaultProp = (function () {
      function DefaultProp(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      DefaultProp.create = function (value0) {
          return function (value1) {
              return new DefaultProp(value0, value1);
          };
      };
      return DefaultProp;
  })();
  var Mod = (function () {
      function Mod(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Mod.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Mod(value0, value1, value2);
              };
          };
      };
      return Mod;
  })();
  var HasValue = function (hasValueDummy) {
      this.hasValueDummy = hasValueDummy;
  };
  var HasName = function (name) {
      this.name = name;
  };
  var HasMetavar = function (hasMetavarDummy) {
      this.hasMetavarDummy = hasMetavarDummy;
  };
  var optionFieldsHasValue = new HasValue(function (v) {
      return Data_Unit.unit;
  });
  var optionFieldsHasMetavar = new HasMetavar(function (v) {
      return Data_Unit.unit;
  });
  var newtypeOptionFields = new Data_Newtype.Newtype(function (n) {
      return n;
  }, OptionFields);
  var optionFieldsHasName = new HasName(function (n) {
      return Data_Newtype.over(newtypeOptionFields)(newtypeOptionFields)(OptionFields)(function (fields) {
          return {
              optNames: Data_Semigroup.append(Data_Semigroup.semigroupArray)([ n ])(fields.optNames),
              optCompleter: fields.optCompleter,
              optNoArgError: fields.optNoArgError
          };
      });
  });
  var newtypeFlagFields = new Data_Newtype.Newtype(function (n) {
      return n;
  }, FlagFields);    
  var name = function (dict) {
      return dict.name;
  };
  var hasValueDummy = function (dict) {
      return dict.hasValueDummy;
  };
  var hasMetavarDummy = function (dict) {
      return dict.hasMetavarDummy;
  };
  var flagFieldsHasName = new HasName(function (n) {
      return Data_Newtype.over(newtypeFlagFields)(newtypeFlagFields)(FlagFields)(function (fields) {
          return {
              flagNames: Data_Semigroup.append(Data_Semigroup.semigroupArray)([ n ])(fields.flagNames),
              flagActive: fields.flagActive
          };
      });
  });
  var defaultPropSemigroup = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          return new DefaultProp(Control_Alt.alt(Data_Maybe.altMaybe)(v.value0)(v1.value0), Control_Alt.alt(Data_Maybe.altMaybe)(v.value1)(v1.value1));
      };
  });
  var modSemigroup = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          return new Mod(function ($61) {
              return v1.value0(v.value0($61));
          }, Data_Semigroup.append(defaultPropSemigroup)(v1.value1)(v.value1), function ($62) {
              return v1.value2(v.value2($62));
          });
      };
  });
  var defaultPropMonoid = new Data_Monoid.Monoid(function () {
      return defaultPropSemigroup;
  }, new DefaultProp(Data_Maybe.Nothing.value, Data_Maybe.Nothing.value));
  var fieldMod = function (f) {
      return new Mod(f, Data_Monoid.mempty(defaultPropMonoid), Control_Category.identity(Control_Category.categoryFn));
  };
  var modMonoid = new Data_Monoid.Monoid(function () {
      return modSemigroup;
  }, new Mod(Control_Category.identity(Control_Category.categoryFn), Data_Monoid.mempty(defaultPropMonoid), Control_Category.identity(Control_Category.categoryFn)));
  var optionMod = Mod.create(Control_Category.identity(Control_Category.categoryFn))(Data_Monoid.mempty(defaultPropMonoid));
  var internal = optionMod(Data_Newtype.over(Options_Applicative_Types.optPropertiesNewtype)(Options_Applicative_Types.optPropertiesNewtype)(Options_Applicative_Types.OptProperties)(function (p) {
      return {
          propVisibility: Options_Applicative_Types.Internal.value,
          propDescMod: p.propDescMod,
          propHelp: p.propHelp,
          propMetaVar: p.propMetaVar,
          propShowDefault: p.propShowDefault
      };
  }));
  var baseProps = {
      propMetaVar: "",
      propVisibility: Options_Applicative_Types.Visible.value,
      propHelp: Data_Monoid.mempty(Options_Applicative_Help_Chunk.chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup)),
      propShowDefault: Data_Maybe.Nothing.value,
      propDescMod: Data_Maybe.Nothing.value
  };
  var mkProps = function (v) {
      return function (g) {
          var props = Data_Newtype.over(Options_Applicative_Types.optPropertiesNewtype)(Options_Applicative_Types.optPropertiesNewtype)(Options_Applicative_Types.OptProperties)(function (r) {
              return {
                  propShowDefault: Control_Apply.apply(Data_Maybe.applyMaybe)(v.value1)(v.value0),
                  propDescMod: r.propDescMod,
                  propHelp: r.propHelp,
                  propMetaVar: r.propMetaVar,
                  propVisibility: r.propVisibility
              };
          })(g(baseProps));
          return props;
      };
  };
  var mkOption = function (d) {
      return function (g) {
          return function (rdr) {
              return {
                  optMain: rdr,
                  optProps: mkProps(d)(g)
              };
          };
      };
  };
  var mkParser = function (v) {
      return function (g) {
          return function (rdr) {
              var opt = mkOption(v)(g)(rdr);
              return Control_Alt.alt(Options_Applicative_Types.parserAlt)(Options_Applicative_Common.liftOpt(opt))(Data_Maybe.maybe(Control_Plus.empty(Options_Applicative_Types.parserPlus))(Control_Applicative.pure(Options_Applicative_Types.parserApplicative))(v.value0));
          };
      };
  };
  exports["Mod"] = Mod;
  exports["HasName"] = HasName;
  exports["name"] = name;
  exports["HasValue"] = HasValue;
  exports["hasValueDummy"] = hasValueDummy;
  exports["HasMetavar"] = HasMetavar;
  exports["hasMetavarDummy"] = hasMetavarDummy;
  exports["OptionFields"] = OptionFields;
  exports["FlagFields"] = FlagFields;
  exports["DefaultProp"] = DefaultProp;
  exports["optionMod"] = optionMod;
  exports["fieldMod"] = fieldMod;
  exports["baseProps"] = baseProps;
  exports["mkParser"] = mkParser;
  exports["mkOption"] = mkOption;
  exports["mkProps"] = mkProps;
  exports["internal"] = internal;
  exports["newtypeOptionFields"] = newtypeOptionFields;
  exports["newtypeFlagFields"] = newtypeFlagFields;
  exports["optionFieldsHasName"] = optionFieldsHasName;
  exports["flagFieldsHasName"] = flagFieldsHasName;
  exports["optionFieldsHasValue"] = optionFieldsHasValue;
  exports["optionFieldsHasMetavar"] = optionFieldsHasMetavar;
  exports["defaultPropMonoid"] = defaultPropMonoid;
  exports["defaultPropSemigroup"] = defaultPropSemigroup;
  exports["modMonoid"] = modMonoid;
  exports["modSemigroup"] = modSemigroup;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Options.Applicative.Builder"] = $PS["Options.Applicative.Builder"] || {};
  var exports = $PS["Options.Applicative.Builder"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Either = $PS["Data.Either"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Int = $PS["Data.Int"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var ExitCodes = $PS["ExitCodes"];
  var Options_Applicative_Builder_Internal = $PS["Options.Applicative.Builder.Internal"];
  var Options_Applicative_Help_Chunk = $PS["Options.Applicative.Help.Chunk"];
  var Options_Applicative_Types = $PS["Options.Applicative.Types"];
  var Text_PrettyPrint_Leijen = $PS["Text.PrettyPrint.Leijen"];                
  var PrefsMod = function (x) {
      return x;
  };
  var InfoMod = function (x) {
      return x;
  };
  var value = function (dictHasValue) {
      return function (x) {
          return new Options_Applicative_Builder_Internal.Mod(Control_Category.identity(Control_Category.categoryFn), new Options_Applicative_Builder_Internal.DefaultProp(new Data_Maybe.Just(x), Data_Maybe.Nothing.value), Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var str = Options_Applicative_Types.readerAsk;
  var $$short = function (dictHasName) {
      var $87 = Options_Applicative_Builder_Internal.name(dictHasName);
      return function ($88) {
          return Options_Applicative_Builder_Internal.fieldMod($87(Options_Applicative_Types.OptShort.create($88)));
      };
  };
  var progDesc = function (s) {
      return InfoMod(Data_Newtype.over(Options_Applicative_Types.parserInfoNewtype)(Options_Applicative_Types.parserInfoNewtype)(Options_Applicative_Types.ParserInfo)(function (i) {
          return {
              infoProgDesc: Options_Applicative_Help_Chunk.paragraph(s),
              infoFailureCode: i.infoFailureCode,
              infoFooter: i.infoFooter,
              infoFullDesc: i.infoFullDesc,
              infoHeader: i.infoHeader,
              infoParser: i.infoParser,
              infoPolicy: i.infoPolicy
          };
      }));
  };  
  var noArgError = function (e) {
      return Options_Applicative_Builder_Internal.fieldMod(Data_Newtype.over(Options_Applicative_Builder_Internal.newtypeOptionFields)(Options_Applicative_Builder_Internal.newtypeOptionFields)(Options_Applicative_Builder_Internal.OptionFields)(function (p) {
          return {
              optNoArgError: Data_Function["const"](e),
              optCompleter: p.optCompleter,
              optNames: p.optNames
          };
      }));
  };
  var newtypePrefsMod = new Data_Newtype.Newtype(function (n) {
      return n;
  }, PrefsMod);
  var prefs = function (m) {
      var base = {
          prefMultiSuffix: "",
          prefDisambiguate: false,
          prefShowHelpOnError: false,
          prefShowHelpOnEmpty: false,
          prefBacktrack: Options_Applicative_Types.Backtrack.value,
          prefColumns: 80
      };
      return Data_Newtype.un(newtypePrefsMod)(PrefsMod)(m)(base);
  };
  var prefsModSemigroup = new Data_Semigroup.Semigroup(function (m1) {
      return function (m2) {
          return PrefsMod((function () {
              var $89 = Data_Newtype.un(newtypePrefsMod)(PrefsMod)(m2);
              var $90 = Data_Newtype.un(newtypePrefsMod)(PrefsMod)(m1);
              return function ($91) {
                  return $89($90($91));
              };
          })());
      };
  });
  var prefsModMonoid = new Data_Monoid.Monoid(function () {
      return prefsModSemigroup;
  }, Control_Category.identity(Control_Category.categoryFn));
  var newtypeInfoMod = new Data_Newtype.Newtype(function (n) {
      return n;
  }, InfoMod);
  var metavar = function (dictHasMetavar) {
      return function ($$var) {
          return Options_Applicative_Builder_Internal.optionMod(Data_Newtype.over(Options_Applicative_Types.optPropertiesNewtype)(Options_Applicative_Types.optPropertiesNewtype)(Options_Applicative_Types.OptProperties)(function (p) {
              return {
                  propMetaVar: $$var,
                  propDescMod: p.propDescMod,
                  propHelp: p.propHelp,
                  propShowDefault: p.propShowDefault,
                  propVisibility: p.propVisibility
              };
          }));
      };
  };
  var option = function (r) {
      return function (m) {
          var v = Data_Semigroup.append(Options_Applicative_Builder_Internal.modSemigroup)(metavar(Options_Applicative_Builder_Internal.optionFieldsHasMetavar)("ARG"))(m);
          var v1 = v.value0({
              optNames: [  ],
              optCompleter: Data_Monoid.mempty(Options_Applicative_Types.completerMonoid),
              optNoArgError: Options_Applicative_Types.ExpectsArgError.create
          });
          var crdr = {
              crCompleter: v1.optCompleter,
              crReader: r
          };
          var rdr = new Options_Applicative_Types.OptReader(v1.optNames, crdr, v1.optNoArgError);
          return Options_Applicative_Builder_Internal.mkParser(v.value1)(v.value2)(rdr);
      };
  };
  var strOption = option(str);
  var $$long = function (dictHasName) {
      var $92 = Options_Applicative_Builder_Internal.name(dictHasName);
      return function ($93) {
          return Options_Applicative_Builder_Internal.fieldMod($92(Options_Applicative_Types.OptLong.create($93)));
      };
  };
  var infoModSemigroup = new Data_Semigroup.Semigroup(function (m1) {
      return function (m2) {
          return InfoMod((function () {
              var $94 = Data_Newtype.un(newtypeInfoMod)(InfoMod)(m2);
              var $95 = Data_Newtype.un(newtypeInfoMod)(InfoMod)(m1);
              return function ($96) {
                  return $94($95($96));
              };
          })());
      };
  });                                                        
  var info = function (parser) {
      return function (m) {
          var base = {
              infoParser: parser,
              infoFullDesc: true,
              infoProgDesc: Data_Monoid.mempty(Options_Applicative_Help_Chunk.chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup)),
              infoHeader: Data_Monoid.mempty(Options_Applicative_Help_Chunk.chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup)),
              infoFooter: Data_Monoid.mempty(Options_Applicative_Help_Chunk.chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup)),
              infoFailureCode: ExitCodes["Error"].value,
              infoPolicy: Options_Applicative_Types.Intersperse.value
          };
          return Data_Newtype.un(newtypeInfoMod)(InfoMod)(m)(base);
      };
  };
  var idm = function (dictMonoid) {
      return Data_Monoid.mempty(dictMonoid);
  };
  var hidden = Options_Applicative_Builder_Internal.optionMod(Data_Newtype.over(Options_Applicative_Types.optPropertiesNewtype)(Options_Applicative_Types.optPropertiesNewtype)(Options_Applicative_Types.OptProperties)(function (p) {
      return {
          propVisibility: Data_Ord.min(Options_Applicative_Types.optVisibilityOrd)(Options_Applicative_Types.Hidden.value)(p.propVisibility),
          propDescMod: p.propDescMod,
          propHelp: p.propHelp,
          propMetaVar: p.propMetaVar,
          propShowDefault: p.propShowDefault
      };
  }));
  var help = function (s) {
      return Options_Applicative_Builder_Internal.optionMod(Data_Newtype.over(Options_Applicative_Types.optPropertiesNewtype)(Options_Applicative_Types.optPropertiesNewtype)(Options_Applicative_Types.OptProperties)(function (p) {
          return {
              propHelp: Options_Applicative_Help_Chunk.paragraph(s),
              propDescMod: p.propDescMod,
              propMetaVar: p.propMetaVar,
              propShowDefault: p.propShowDefault,
              propVisibility: p.propVisibility
          };
      }));
  };
  var header = function (s) {
      return InfoMod(Data_Newtype.over(Options_Applicative_Types.parserInfoNewtype)(Options_Applicative_Types.parserInfoNewtype)(Options_Applicative_Types.ParserInfo)(function (i) {
          return {
              infoHeader: Options_Applicative_Help_Chunk.paragraph(s),
              infoFailureCode: i.infoFailureCode,
              infoFooter: i.infoFooter,
              infoFullDesc: i.infoFullDesc,
              infoParser: i.infoParser,
              infoPolicy: i.infoPolicy,
              infoProgDesc: i.infoProgDesc
          };
      }));
  };
  var fullDesc = InfoMod(Data_Newtype.over(Options_Applicative_Types.parserInfoNewtype)(Options_Applicative_Types.parserInfoNewtype)(Options_Applicative_Types.ParserInfo)(function (i) {
      return {
          infoFullDesc: true,
          infoFailureCode: i.infoFailureCode,
          infoFooter: i.infoFooter,
          infoHeader: i.infoHeader,
          infoParser: i.infoParser,
          infoPolicy: i.infoPolicy,
          infoProgDesc: i.infoProgDesc
      };
  }));
  var flag$prime = function (actv) {
      return function (v) {
          var rdr = (function () {
              var v1 = v.value0({
                  flagNames: [  ],
                  flagActive: actv
              });
              return new Options_Applicative_Types.FlagReader(v1.flagNames, v1.flagActive);
          })();
          return Options_Applicative_Builder_Internal.mkParser(v.value1)(v.value2)(rdr);
      };
  };
  var flag = function (defv) {
      return function (actv) {
          return function (m) {
              return Control_Alt.alt(Options_Applicative_Types.parserAlt)(flag$prime(actv)(m))(Control_Applicative.pure(Options_Applicative_Types.parserApplicative)(defv));
          };
      };
  };
  var $$switch = flag(false)(true);
  var eitherReader = function (f) {
      return Control_Bind.bind(Options_Applicative_Types.readMBind)(Options_Applicative_Types.readerAsk)((function () {
          var $97 = Data_Either.either(Options_Applicative_Types.readerError)(Control_Applicative.pure(Options_Applicative_Types.readMApplicative));
          return function ($98) {
              return $97(f($98));
          };
      })());
  };
  var $$int = eitherReader(function (s) {
      var v = Data_Int.fromString(s);
      if (v instanceof Data_Maybe.Nothing) {
          return Data_Either.Left.create("Can't parse as Int: `" + (Data_Show.show(Data_Show.showString)(s) + "`"));
      };
      if (v instanceof Data_Maybe.Just) {
          return new Data_Either.Right(v.value0);
      };
      throw new Error("Failed pattern match at Options.Applicative.Builder (line 124, column 28 - line 126, column 20): " + [ v.constructor.name ]);
  });                                                                     
  var defaultPrefs = prefs(idm(prefsModMonoid));
  var abortOption = function (err) {
      return function (m) {
          return option(Options_Applicative_Types.readerAbort(err))((function (v) {
              return Data_Semigroup.append(Options_Applicative_Builder_Internal.modSemigroup)(v)(m);
          })(Data_Foldable.fold(Data_Foldable.foldableArray)(Options_Applicative_Builder_Internal.modMonoid)([ noArgError(err), value(Options_Applicative_Builder_Internal.optionFieldsHasValue)(Control_Category.identity(Control_Category.categoryFn)), metavar(Options_Applicative_Builder_Internal.optionFieldsHasMetavar)("") ])));
      };
  };
  exports["flag"] = flag;
  exports["flag'"] = flag$prime;
  exports["switch"] = $$switch;
  exports["abortOption"] = abortOption;
  exports["strOption"] = strOption;
  exports["option"] = option;
  exports["short"] = $$short;
  exports["long"] = $$long;
  exports["help"] = help;
  exports["value"] = value;
  exports["metavar"] = metavar;
  exports["noArgError"] = noArgError;
  exports["hidden"] = hidden;
  exports["idm"] = idm;
  exports["str"] = str;
  exports["int"] = $$int;
  exports["eitherReader"] = eitherReader;
  exports["fullDesc"] = fullDesc;
  exports["header"] = header;
  exports["progDesc"] = progDesc;
  exports["info"] = info;
  exports["prefs"] = prefs;
  exports["defaultPrefs"] = defaultPrefs;
  exports["newtypeInfoMod"] = newtypeInfoMod;
  exports["infoModSemigroup"] = infoModSemigroup;
  exports["newtypePrefsMod"] = newtypePrefsMod;
  exports["prefsModMonoid"] = prefsModMonoid;
  exports["prefsModSemigroup"] = prefsModSemigroup;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Node.Encoding"] = $PS["Node.Encoding"] || {};
  var exports = $PS["Node.Encoding"];
  var Data_Show = $PS["Data.Show"];                
  var ASCII = (function () {
      function ASCII() {

      };
      ASCII.value = new ASCII();
      return ASCII;
  })();
  var UTF8 = (function () {
      function UTF8() {

      };
      UTF8.value = new UTF8();
      return UTF8;
  })();
  var UTF16LE = (function () {
      function UTF16LE() {

      };
      UTF16LE.value = new UTF16LE();
      return UTF16LE;
  })();
  var UCS2 = (function () {
      function UCS2() {

      };
      UCS2.value = new UCS2();
      return UCS2;
  })();
  var Base64 = (function () {
      function Base64() {

      };
      Base64.value = new Base64();
      return Base64;
  })();
  var Latin1 = (function () {
      function Latin1() {

      };
      Latin1.value = new Latin1();
      return Latin1;
  })();
  var Binary = (function () {
      function Binary() {

      };
      Binary.value = new Binary();
      return Binary;
  })();
  var Hex = (function () {
      function Hex() {

      };
      Hex.value = new Hex();
      return Hex;
  })();
  var showEncoding = new Data_Show.Show(function (v) {
      if (v instanceof ASCII) {
          return "ASCII";
      };
      if (v instanceof UTF8) {
          return "UTF8";
      };
      if (v instanceof UTF16LE) {
          return "UTF16LE";
      };
      if (v instanceof UCS2) {
          return "UCS2";
      };
      if (v instanceof Base64) {
          return "Base64";
      };
      if (v instanceof Latin1) {
          return "Latin1";
      };
      if (v instanceof Binary) {
          return "Binary";
      };
      if (v instanceof Hex) {
          return "Hex";
      };
      throw new Error("Failed pattern match at Node.Encoding (line 19, column 1 - line 27, column 23): " + [ v.constructor.name ]);
  });
  var encodingToNode = function (v) {
      if (v instanceof ASCII) {
          return "ascii";
      };
      if (v instanceof UTF8) {
          return "utf8";
      };
      if (v instanceof UTF16LE) {
          return "utf16le";
      };
      if (v instanceof UCS2) {
          return "ucs2";
      };
      if (v instanceof Base64) {
          return "base64";
      };
      if (v instanceof Latin1) {
          return "latin1";
      };
      if (v instanceof Binary) {
          return "binary";
      };
      if (v instanceof Hex) {
          return "hex";
      };
      throw new Error("Failed pattern match at Node.Encoding (line 31, column 1 - line 31, column 37): " + [ v.constructor.name ]);
  };
  exports["ASCII"] = ASCII;
  exports["UTF8"] = UTF8;
  exports["UTF16LE"] = UTF16LE;
  exports["UCS2"] = UCS2;
  exports["Base64"] = Base64;
  exports["Latin1"] = Latin1;
  exports["Binary"] = Binary;
  exports["Hex"] = Hex;
  exports["encodingToNode"] = encodingToNode;
  exports["showEncoding"] = showEncoding;
})(PS);
(function(exports) {
  "use strict";

  exports.readChunkImpl = function (Left) {
    return function (Right) {
      return function (chunk) {
        if (chunk instanceof Buffer) {
          return Right(chunk);
        } else if (typeof chunk === "string") {
          return Left(chunk);
        } else {
          throw new Error(
            "Node.Stream.readChunkImpl: Unrecognised " +
            "chunk type; expected String or Buffer, got: " +
            chunk);
        }
      };
    };
  };

  exports.onDataEitherImpl = function (readChunk) {
    return function (r) {
      return function (f) {
        return function () {
          r.on("data", function (data) {
            f(readChunk(data))();
          });
        };
      };
    };
  };

  exports.write = function (w) {
    return function (chunk) {
      return function (done) {
        return function () {
          return w.write(chunk, null, done);
        };
      };
    };
  };

  exports.writeStringImpl = function (w) {
    return function (enc) {
      return function (s) {
        return function (done) {
          return function () {
            return w.write(s, enc, done);
          };
        };
      };
    };
  };
})(PS["Node.Stream"] = PS["Node.Stream"] || {});
(function(exports) {
  /* global exports */
  /* global Buffer */
  /* global require */
  "use strict";

  exports.toStringImpl = function (enc) {
    return function (buff) {
      return function() {
        return buff.toString(enc);
      };
    };
  };
})(PS["Node.Buffer"] = PS["Node.Buffer"] || {});
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Node.Buffer"] = $PS["Node.Buffer"] || {};
  var exports = $PS["Node.Buffer"];
  var $foreign = $PS["Node.Buffer"];
  var Node_Encoding = $PS["Node.Encoding"];
  var toString = function ($3) {
      return $foreign.toStringImpl(Node_Encoding.encodingToNode($3));
  };
  exports["toString"] = toString;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Node.Stream"] = $PS["Node.Stream"] || {};
  var exports = $PS["Node.Stream"];
  var $foreign = $PS["Node.Stream"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Either = $PS["Data.Either"];
  var Data_Show = $PS["Data.Show"];
  var Effect = $PS["Effect"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Node_Buffer = $PS["Node.Buffer"];
  var Node_Encoding = $PS["Node.Encoding"];                
  var writeString = function (w) {
      return function (enc) {
          return $foreign.writeStringImpl(w)(Data_Show.show(Node_Encoding.showEncoding)(enc));
      };
  };
  var readChunk = $foreign.readChunkImpl(Data_Either.Left.create)(Data_Either.Right.create);
  var onDataEither = function (r) {
      return function (cb) {
          return $foreign.onDataEitherImpl(readChunk)(r)(cb);
      };
  };
  var onData = function (r) {
      return function (cb) {
          var fromEither = function (x) {
              if (x instanceof Data_Either.Left) {
                  return Effect_Exception["throw"]("Stream encoding should not be set");
              };
              if (x instanceof Data_Either.Right) {
                  return Control_Applicative.pure(Effect.applicativeEffect)(x.value0);
              };
              throw new Error("Failed pattern match at Node.Stream (line 94, column 5 - line 98, column 17): " + [ x.constructor.name ]);
          };
          return onDataEither(r)(Control_Bind.composeKleisliFlipped(Effect.bindEffect)(cb)(fromEither));
      };
  };
  var onDataString = function (r) {
      return function (enc) {
          return function (cb) {
              return onData(r)(Control_Bind.composeKleisliFlipped(Effect.bindEffect)(cb)(Node_Buffer.toString(enc)));
          };
      };
  };
  exports["onData"] = onData;
  exports["onDataString"] = onDataString;
  exports["onDataEither"] = onDataEither;
  exports["writeString"] = writeString;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Options.Applicative.BashCompletion"] = $PS["Options.Applicative.BashCompletion"] || {};
  var exports = $PS["Options.Applicative.BashCompletion"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Array = $PS["Data.Array"];
  var Data_Array_NonEmpty = $PS["Data.Array.NonEmpty"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Exists = $PS["Data.Exists"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Effect = $PS["Effect"];
  var Options_Applicative_Builder = $PS["Options.Applicative.Builder"];
  var Options_Applicative_Builder_Internal = $PS["Options.Applicative.Builder.Internal"];
  var Options_Applicative_Common = $PS["Options.Applicative.Common"];
  var Options_Applicative_Help_Chunk = $PS["Options.Applicative.Help.Chunk"];
  var Options_Applicative_Internal = $PS["Options.Applicative.Internal"];
  var Options_Applicative_Internal_Utils = $PS["Options.Applicative.Internal.Utils"];
  var Options_Applicative_Types = $PS["Options.Applicative.Types"];
  var Text_PrettyPrint_Leijen = $PS["Text.PrettyPrint.Leijen"];                
  var Standard = (function () {
      function Standard() {

      };
      Standard.value = new Standard();
      return Standard;
  })();
  var Enriched = (function () {
      function Enriched(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Enriched.create = function (value0) {
          return function (value1) {
              return new Enriched(value0, value1);
          };
      };
      return Enriched;
  })();
  var zshCompletionScript = function (prog) {
      return function (progn) {
          return Control_Applicative.pure(Effect.applicativeEffect)([ "#compdef " + progn, "", "local request", "local completions", "local word", "local index=$((CURRENT - 1))", "", "request=(--bash-completion-enriched --bash-completion-index $index)", "for arg in ${words[@]}; do", "  request=(${request[@]} --bash-completion-word $arg)", "done", "", "IFS=$'\\n' completions=($( " + (prog + " \"${request[@]}\" ))"), "", "for word in $completions; do", "  local -a parts", "", "  # Split the line at a tab if there is one.", "  IFS=$'\\t' parts=($( echo $word ))", "", "  if [[ -n $parts[2] ]]; then", "     if [[ $word[1] == \"-\" ]]; then", "       local desc=(\"$parts[1] ($parts[2])\")", "       compadd -d desc -- $parts[1]", "     else", "       local desc=($(print -f  \"%-019s -- %s\" $parts[1] $parts[2]))", "       compadd -l -d desc -- $parts[1]", "     fi", "  else", "    compadd -f -- $word", "  fi", "done" ]);
      };
  }; 
  var fishCompletionScript = function (prog) {
      return function (progn) {
          return Control_Applicative.pure(Effect.applicativeEffect)([ " function _" + progn, "    set -l cl (commandline --tokenize --current-process)", "    # Hack around fish issue #3934", "    set -l cn (commandline --tokenize --cut-at-cursor --current-process)", "    set -l cn (count $cn)", "    set -l tmpline --bash-completion-enriched --bash-completion-index $cn", "    for arg in $cl", "      set tmpline $tmpline --bash-completion-word $arg", "    end", "    for opt in (" + (prog + " $tmpline)"), "      if test -d $opt", "        echo -E \"$opt/\"", "      else", "        echo -E \"$opt\"", "      end", "    end", "end", "", "complete --no-files --command " + (progn + (" --arguments '(_" + (progn + ")'"))) ]);
      };
  };
  var bashCompletionScript = function (prog) {
      return function (progn) {
          return Control_Applicative.pure(Effect.applicativeEffect)([ "_" + (progn + "()"), "{", "    local CMDLINE", "    local IFS=$'\\n'", "    CMDLINE=(--bash-completion-index $COMP_CWORD)", "", "    for arg in ${COMP_WORDS[@]}; do", "        CMDLINE=(${CMDLINE[@]} --bash-completion-word $arg)", "    done", "", "    COMPREPLY=( $(" + (prog + " \"${CMDLINE[@]}\") )"), "}", "", "complete -o filenames -F _" + (progn + (" " + progn)) ]);
      };
  };
  var arraySplitAt = function (idx) {
      return function (arr) {
          if (idx === 0) {
              return {
                  init: [  ],
                  rest: arr
              };
          };
          return {
              init: Data_Array.slice(0)(idx)(arr),
              rest: Data_Array.slice(idx)(Data_Array.length(arr))(arr)
          };
      };
  };
  var bashCompletionQuery = function (pinfo) {
      return function (pprefs) {
          return function (richness) {
              return function (ws) {
                  return function (i) {
                      return function (v) {
                          var v1 = arraySplitAt(i)(ws);
                          var run_completer = function (c) {
                              return Data_Newtype.un(Options_Applicative_Types.newtypeCompleter)(Options_Applicative_Types.Completer)(c)(Data_Maybe.fromMaybe("")(Data_Array.head(v1.rest)));
                          };
                          var render_line = function (len) {
                              return function (doc) {
                                  var v2 = Data_Functor.map(Data_Maybe.functorMaybe)(Data_Array_NonEmpty.uncons)(Data_Array_NonEmpty.fromArray(Options_Applicative_Internal_Utils.lines(Text_PrettyPrint_Leijen.displayS(Text_PrettyPrint_Leijen.renderPretty(1.0)(len)(doc)))));
                                  if (v2 instanceof Data_Maybe.Nothing) {
                                      return "";
                                  };
                                  if (v2 instanceof Data_Maybe.Just && v2.value0.tail.length === 0) {
                                      return v2.value0.head;
                                  };
                                  if (v2 instanceof Data_Maybe.Just) {
                                      return v2.value0.head + "...";
                                  };
                                  throw new Error("Failed pattern match at Options.Applicative.BashCompletion (line 162, column 27 - line 165, column 43): " + [ v2.constructor.name ]);
                              };
                          };
                          var is_completion = (function () {
                              var v2 = Data_Array.head(v1.rest);
                              if (v2 instanceof Data_Maybe.Just) {
                                  return Options_Applicative_Internal_Utils.startsWith(v2.value0);
                              };
                              if (v2 instanceof Data_Maybe.Nothing) {
                                  return Data_Function["const"](true);
                              };
                              throw new Error("Failed pattern match at Options.Applicative.BashCompletion (line 175, column 7 - line 177, column 30): " + [ v2.constructor.name ]);
                          })();
                          var filter_names = Data_Array.filter(is_completion);
                          var show_names = (function () {
                              var $84 = Data_Functor.map(Data_Functor.functorArray)(Options_Applicative_Common.showOption);
                              return function ($85) {
                                  return filter_names($84($85));
                              };
                          })();
                          var compl = Options_Applicative_Common.runParserInfo(Options_Applicative_Internal.completionMonadP)(pinfo)(Data_List.fromFoldable(Data_Foldable.foldableArray)(Data_Array.drop(1)(v1.init)));
                          var add_opt_help = function (dictFunctor) {
                              return function (opt) {
                                  if (richness instanceof Standard) {
                                      return Control_Category.identity(Control_Category.categoryFn);
                                  };
                                  if (richness instanceof Enriched) {
                                      return Data_Functor.map(dictFunctor)(function (o) {
                                          var h = Data_Newtype.un(Options_Applicative_Help_Chunk.chunkNewtype)(Options_Applicative_Help_Chunk.Chunk)(Options_Applicative_Types.optHelp(opt));
                                          return Data_Maybe.maybe(o)(function (h$prime) {
                                              return o + ("\x09" + render_line(richness.value0)(h$prime));
                                          })(h);
                                      });
                                  };
                                  throw new Error("Failed pattern match at Options.Applicative.BashCompletion (line 138, column 24 - line 143, column 79): " + [ richness.constructor.name ]);
                              };
                          };
                          var add_cmd_help = function (dictFunctor) {
                              return function (p) {
                                  if (richness instanceof Standard) {
                                      return Control_Category.identity(Control_Category.categoryFn);
                                  };
                                  if (richness instanceof Enriched) {
                                      return Data_Functor.map(dictFunctor)(function (cmd) {
                                          var h = Control_Bind.bind(Data_Maybe.bindMaybe)(p(cmd))((function () {
                                              var $86 = Data_Newtype.un(Options_Applicative_Help_Chunk.chunkNewtype)(Options_Applicative_Help_Chunk.Chunk);
                                              var $87 = Data_Newtype.un(Options_Applicative_Types.parserInfoNewtype)(Options_Applicative_Types.ParserInfo);
                                              return function ($88) {
                                                  return $86((function (v2) {
                                                      return v2.infoProgDesc;
                                                  })($87($88)));
                                              };
                                          })());
                                          return Data_Maybe.maybe(cmd)(function (h$prime) {
                                              return cmd + ("\x09" + render_line(richness.value1)(h$prime));
                                          })(h);
                                      });
                                  };
                                  throw new Error("Failed pattern match at Options.Applicative.BashCompletion (line 148, column 22 - line 153, column 85): " + [ richness.constructor.name ]);
                              };
                          };
                          var opt_completions = function (argPolicy) {
                              return function (hinfo) {
                                  return function (opt) {
                                      var v2 = (Data_Newtype.un(Options_Applicative_Types.optionNewtype)(Options_Applicative_Types.Option)(opt)).optMain;
                                      if (v2 instanceof Options_Applicative_Types.OptReader) {
                                          if (Data_Eq.notEq(Options_Applicative_Types.argPolicyEq)(argPolicy)(Options_Applicative_Types.AllPositionals.value)) {
                                              return Control_Applicative.pure(Effect.applicativeEffect)(add_opt_help(Data_Functor.functorArray)(opt)(show_names(v2.value0)));
                                          };
                                          if (Data_Boolean.otherwise) {
                                              return Control_Applicative.pure(Effect.applicativeEffect)([  ]);
                                          };
                                      };
                                      if (v2 instanceof Options_Applicative_Types.FlagReader) {
                                          if (Data_Eq.notEq(Options_Applicative_Types.argPolicyEq)(argPolicy)(Options_Applicative_Types.AllPositionals.value)) {
                                              return Control_Applicative.pure(Effect.applicativeEffect)(add_opt_help(Data_Functor.functorArray)(opt)(show_names(v2.value0)));
                                          };
                                          if (Data_Boolean.otherwise) {
                                              return Control_Applicative.pure(Effect.applicativeEffect)([  ]);
                                          };
                                      };
                                      if (v2 instanceof Options_Applicative_Types.ArgReader) {
                                          if ((Data_Newtype.un(Options_Applicative_Types.newtypeOptHelpInfo)(Options_Applicative_Types.OptHelpInfo)(hinfo)).hinfoUnreachableArgs) {
                                              return Control_Applicative.pure(Effect.applicativeEffect)([  ]);
                                          };
                                          if (Data_Boolean.otherwise) {
                                              return run_completer((Data_Newtype.un(Options_Applicative_Types.newtypeCReader)(Options_Applicative_Types.CReader)(v2.value0)).crCompleter);
                                          };
                                      };
                                      if (v2 instanceof Options_Applicative_Types.CmdReader) {
                                          if ((Data_Newtype.un(Options_Applicative_Types.newtypeOptHelpInfo)(Options_Applicative_Types.OptHelpInfo)(hinfo)).hinfoUnreachableArgs) {
                                              return Control_Applicative.pure(Effect.applicativeEffect)([  ]);
                                          };
                                          if (Data_Boolean.otherwise) {
                                              return Control_Applicative.pure(Effect.applicativeEffect)(add_cmd_help(Data_Functor.functorArray)(v2.value2)(filter_names(v2.value1)));
                                          };
                                      };
                                      throw new Error("Failed pattern match at Options.Applicative.BashCompletion (line 113, column 43 - line 133, column 53): " + [ v2.constructor.name ]);
                                  };
                              };
                          };
                          var list_options = function (a) {
                              var $89 = Data_Functor.map(Effect.functorEffect)(Data_Foldable.fold(Data_Foldable.foldableArray)(Data_Monoid.monoidArray));
                              var $90 = Data_Traversable.sequence(Data_Traversable.traversableArray)(Effect.applicativeEffect);
                              var $91 = Options_Applicative_Common.mapParser(opt_completions(a));
                              return function ($92) {
                                  return $89($90($91($92)));
                              };
                          };
                          var v2 = Options_Applicative_Internal.runCompletion(compl)(pprefs);
                          if (v2 instanceof Data_Maybe.Just && v2.value0 instanceof Data_Either.Left) {
                              return Data_Exists.runExists(function (p) {
                                  return list_options(v2.value0.value0.value1)(p);
                              })(v2.value0.value0.value0.value0);
                          };
                          if (v2 instanceof Data_Maybe.Just && v2.value0 instanceof Data_Either.Right) {
                              return run_completer(v2.value0.value0);
                          };
                          if (v2 instanceof Data_Maybe.Nothing) {
                              return Control_Applicative.pure(Effect.applicativeEffect)([  ]);
                          };
                          throw new Error("Failed pattern match at Options.Applicative.BashCompletion (line 83, column 52 - line 89, column 15): " + [ v2.constructor.name ]);
                      };
                  };
              };
          };
      };
  };
  var bashCompletionParser = function (pinfo) {
      return function (pprefs) {
          var failure = function (opts) {
              return {
                  execCompletion: function (progn) {
                      return Data_Functor.map(Effect.functorEffect)(Options_Applicative_Internal_Utils.unLines(Data_Foldable.foldableArray))(opts(progn));
                  }
              };
          };
          var complParser = Data_Foldable.oneOf(Data_Foldable.foldableArray)(Options_Applicative_Types.parserPlus)([ Data_Functor.map(Options_Applicative_Types.parserFunctor)(failure)(Control_Apply.apply(Options_Applicative_Types.parserApply)(Control_Apply.apply(Options_Applicative_Types.parserApply)(Data_Functor.map(Options_Applicative_Types.parserFunctor)(bashCompletionQuery(pinfo)(pprefs))(Control_Alt.alt(Options_Applicative_Types.parserAlt)(Control_Apply.apply(Options_Applicative_Types.parserApply)(Control_Apply.apply(Options_Applicative_Types.parserApply)(Options_Applicative_Builder["flag'"](Enriched.create)(Data_Semigroup.append(Options_Applicative_Builder_Internal.modSemigroup)(Options_Applicative_Builder["long"](Options_Applicative_Builder_Internal.flagFieldsHasName)("bash-completion-enriched"))(Options_Applicative_Builder_Internal.internal)))(Options_Applicative_Builder.option(Options_Applicative_Builder["int"])(Data_Semigroup.append(Options_Applicative_Builder_Internal.modSemigroup)(Data_Semigroup.append(Options_Applicative_Builder_Internal.modSemigroup)(Options_Applicative_Builder["long"](Options_Applicative_Builder_Internal.optionFieldsHasName)("bash-completion-option-desc-length"))(Options_Applicative_Builder_Internal.internal))(Options_Applicative_Builder.value(Options_Applicative_Builder_Internal.optionFieldsHasValue)(40)))))(Options_Applicative_Builder.option(Options_Applicative_Builder["int"])(Data_Semigroup.append(Options_Applicative_Builder_Internal.modSemigroup)(Data_Semigroup.append(Options_Applicative_Builder_Internal.modSemigroup)(Options_Applicative_Builder["long"](Options_Applicative_Builder_Internal.optionFieldsHasName)("bash-completion-command-desc-length"))(Options_Applicative_Builder_Internal.internal))(Options_Applicative_Builder.value(Options_Applicative_Builder_Internal.optionFieldsHasValue)(40)))))(Control_Applicative.pure(Options_Applicative_Types.parserApplicative)(Standard.value))))(Data_Functor.map(Options_Applicative_Types.parserFunctor)(Data_Array.fromFoldable(Data_List_Types.foldableList))(Options_Applicative_Types.many(Options_Applicative_Builder.strOption(Data_Semigroup.append(Options_Applicative_Builder_Internal.modSemigroup)(Options_Applicative_Builder["long"](Options_Applicative_Builder_Internal.optionFieldsHasName)("bash-completion-word"))(Options_Applicative_Builder_Internal.internal))))))(Options_Applicative_Builder.option(Options_Applicative_Builder["int"])(Data_Semigroup.append(Options_Applicative_Builder_Internal.modSemigroup)(Options_Applicative_Builder["long"](Options_Applicative_Builder_Internal.optionFieldsHasName)("bash-completion-index"))(Options_Applicative_Builder_Internal.internal)))), Data_Functor.map(Options_Applicative_Types.parserFunctor)(failure)(Data_Functor.map(Options_Applicative_Types.parserFunctor)(bashCompletionScript)(Options_Applicative_Builder.strOption(Data_Semigroup.append(Options_Applicative_Builder_Internal.modSemigroup)(Options_Applicative_Builder["long"](Options_Applicative_Builder_Internal.optionFieldsHasName)("bash-completion-script"))(Options_Applicative_Builder_Internal.internal)))), Data_Functor.map(Options_Applicative_Types.parserFunctor)(failure)(Data_Functor.map(Options_Applicative_Types.parserFunctor)(fishCompletionScript)(Options_Applicative_Builder.strOption(Data_Semigroup.append(Options_Applicative_Builder_Internal.modSemigroup)(Options_Applicative_Builder["long"](Options_Applicative_Builder_Internal.optionFieldsHasName)("fish-completion-script"))(Options_Applicative_Builder_Internal.internal)))), Data_Functor.map(Options_Applicative_Types.parserFunctor)(failure)(Data_Functor.map(Options_Applicative_Types.parserFunctor)(zshCompletionScript)(Options_Applicative_Builder.strOption(Data_Semigroup.append(Options_Applicative_Builder_Internal.modSemigroup)(Options_Applicative_Builder["long"](Options_Applicative_Builder_Internal.optionFieldsHasName)("zsh-completion-script"))(Options_Applicative_Builder_Internal.internal)))) ]);
          return complParser;
      };
  };
  exports["bashCompletionParser"] = bashCompletionParser;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Options.Applicative.Help.Types"] = $PS["Options.Applicative.Help.Types"] || {};
  var exports = $PS["Options.Applicative.Help.Types"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Options_Applicative_Help_Chunk = $PS["Options.Applicative.Help.Chunk"];
  var Text_PrettyPrint_Leijen = $PS["Text.PrettyPrint.Leijen"];                
  var ParserHelp = function (x) {
      return x;
  }
  var parserHelpMonoid = Data_Monoid.monoidRecord()(Data_Monoid.monoidRecordCons(new Data_Symbol.IsSymbol(function () {
      return "helpBody";
  }))(Options_Applicative_Help_Chunk.chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup))()(Data_Monoid.monoidRecordCons(new Data_Symbol.IsSymbol(function () {
      return "helpError";
  }))(Options_Applicative_Help_Chunk.chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup))()(Data_Monoid.monoidRecordCons(new Data_Symbol.IsSymbol(function () {
      return "helpFooter";
  }))(Options_Applicative_Help_Chunk.chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup))()(Data_Monoid.monoidRecordCons(new Data_Symbol.IsSymbol(function () {
      return "helpHeader";
  }))(Options_Applicative_Help_Chunk.chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup))()(Data_Monoid.monoidRecordCons(new Data_Symbol.IsSymbol(function () {
      return "helpSuggestions";
  }))(Options_Applicative_Help_Chunk.chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup))()(Data_Monoid.monoidRecordCons(new Data_Symbol.IsSymbol(function () {
      return "helpUsage";
  }))(Options_Applicative_Help_Chunk.chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup))()(Data_Monoid.monoidRecordNil)))))));
  var newtypeParserHelp = new Data_Newtype.Newtype(function (n) {
      return n;
  }, ParserHelp);
  var helpText = function (v) {
      return Options_Applicative_Help_Chunk.extractChunk(Text_PrettyPrint_Leijen.docMonoid)(Options_Applicative_Help_Chunk.vsepChunks([ v.helpError, v.helpSuggestions, v.helpHeader, v.helpUsage, v.helpBody, v.helpFooter ]));
  };
  var renderHelp = function (cols) {
      var $5 = Text_PrettyPrint_Leijen.renderPretty(1.0)(cols);
      return function ($6) {
          return Text_PrettyPrint_Leijen.displayS($5(helpText($6)));
      };
  };
  exports["ParserHelp"] = ParserHelp;
  exports["renderHelp"] = renderHelp;
  exports["newtypeParserHelp"] = newtypeParserHelp;
  exports["parserHelpMonoid"] = parserHelpMonoid;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Options.Applicative.Help.Core"] = $PS["Options.Applicative.Help.Core"] || {};
  var exports = $PS["Options.Applicative.Help.Core"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_MonadZero = $PS["Control.MonadZero"];
  var Data_Array = $PS["Data.Array"];
  var Data_Array_NonEmpty = $PS["Data.Array.NonEmpty"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Options_Applicative_Common = $PS["Options.Applicative.Common"];
  var Options_Applicative_Help_Chunk = $PS["Options.Applicative.Help.Chunk"];
  var Options_Applicative_Help_Types = $PS["Options.Applicative.Help.Types"];
  var Options_Applicative_Types = $PS["Options.Applicative.Types"];
  var Text_PrettyPrint_Leijen = $PS["Text.PrettyPrint.Leijen"];                
  var OptDescStyle = function (x) {
      return x;
  };
  var usageHelp = function (chunk) {
      return Data_Newtype.over(Options_Applicative_Help_Types.newtypeParserHelp)(Options_Applicative_Help_Types.newtypeParserHelp)(Options_Applicative_Help_Types.ParserHelp)(function (v) {
          return {
              helpUsage: chunk,
              helpBody: v.helpBody,
              helpError: v.helpError,
              helpFooter: v.helpFooter,
              helpHeader: v.helpHeader,
              helpSuggestions: v.helpSuggestions
          };
      })(Data_Monoid.mempty(Options_Applicative_Help_Types.parserHelpMonoid));
  };
  var suggestionsHelp = function (chunk) {
      return Data_Newtype.over(Options_Applicative_Help_Types.newtypeParserHelp)(Options_Applicative_Help_Types.newtypeParserHelp)(Options_Applicative_Help_Types.ParserHelp)(function (v) {
          return {
              helpSuggestions: chunk,
              helpBody: v.helpBody,
              helpError: v.helpError,
              helpFooter: v.helpFooter,
              helpHeader: v.helpHeader,
              helpUsage: v.helpUsage
          };
      })(Data_Monoid.mempty(Options_Applicative_Help_Types.parserHelpMonoid));
  };
  var newtypeOptDescStyle = new Data_Newtype.Newtype(function (n) {
      return n;
  }, OptDescStyle);
  var intersperse = function (sep) {
      var $35 = Data_Foldable.fold(Data_Foldable.foldableArray)(Data_Monoid.monoidArray);
      var $36 = Data_Array.mapWithIndex(function (idx) {
          return function (e) {
              var $18 = idx === 0;
              if ($18) {
                  return [ e ];
              };
              return [ sep, e ];
          };
      });
      return function ($37) {
          return $35($36($37));
      };
  };
  var optDesc = function (pprefs) {
      return function (style) {
          return function (info) {
              return function (opt) {
                  var suffix = (function () {
                      if ((Data_Newtype.un(Options_Applicative_Types.newtypeOptHelpInfo)(Options_Applicative_Types.OptHelpInfo)(info)).hinfoMulti) {
                          return Options_Applicative_Help_Chunk.stringChunk((Data_Newtype.un(Options_Applicative_Types.parserPrefsNewtype)(Options_Applicative_Types.ParserPrefs)(pprefs)).prefMultiSuffix);
                      };
                      if (Data_Boolean.otherwise) {
                          return Data_Monoid.mempty(Options_Applicative_Help_Chunk.chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup));
                      };
                      throw new Error("Failed pattern match at Options.Applicative.Help.Core (line 58, column 7 - line 62, column 17): " + [  ]);
                  })();
                  var show_opt = (function () {
                      if ((Data_Newtype.un(Options_Applicative_Types.newtypeOptHelpInfo)(Options_Applicative_Types.OptHelpInfo)(info)).hinfoDefault && !(Data_Newtype.un(newtypeOptDescStyle)(OptDescStyle)(style)).descOptional) {
                          return false;
                      };
                      if (Data_Eq.eq(Options_Applicative_Types.optVisibilityEq)(Options_Applicative_Types.optVisibility(opt))(Options_Applicative_Types.Hidden.value)) {
                          return (Data_Newtype.un(newtypeOptDescStyle)(OptDescStyle)(style)).descHidden;
                      };
                      if (Data_Boolean.otherwise) {
                          return Data_Eq.eq(Options_Applicative_Types.optVisibilityEq)(Options_Applicative_Types.optVisibility(opt))(Options_Applicative_Types.Visible.value);
                      };
                      throw new Error("Failed pattern match at Options.Applicative.Help.Core (line 51, column 7 - line 57, column 39): " + [  ]);
                  })();
                  var ns = Options_Applicative_Common.optionNames((Data_Newtype.un(Options_Applicative_Types.optionNewtype)(Options_Applicative_Types.Option)(opt)).optMain);
                  var mv = Options_Applicative_Help_Chunk.stringChunk(Options_Applicative_Types.optMetaVar(opt));
                  var descs = Data_Functor.map(Data_Functor.functorArray)(function ($38) {
                      return Text_PrettyPrint_Leijen.string(Options_Applicative_Common.showOption($38));
                  })(Data_Array.sort(Options_Applicative_Types.optNameOrd)(ns));
                  var render = function (chunk) {
                      if (!show_opt) {
                          return Data_Monoid.mempty(Options_Applicative_Help_Chunk.chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup));
                      };
                      if (Options_Applicative_Help_Chunk.isEmpty(chunk) || !(Data_Newtype.un(newtypeOptDescStyle)(OptDescStyle)(style)).descSurround) {
                          return Data_Semigroup.append(Options_Applicative_Help_Chunk.chunkSemigroup(Text_PrettyPrint_Leijen.docSemigroup))(chunk)(suffix);
                      };
                      if ((Data_Newtype.un(Options_Applicative_Types.newtypeOptHelpInfo)(Options_Applicative_Types.OptHelpInfo)(info)).hinfoDefault) {
                          return Data_Semigroup.append(Options_Applicative_Help_Chunk.chunkSemigroup(Text_PrettyPrint_Leijen.docSemigroup))(Data_Functor.map(Options_Applicative_Help_Chunk.chunkFunctor)(Text_PrettyPrint_Leijen.brackets)(chunk))(suffix);
                      };
                      if (Data_Array["null"](Data_Array.drop(1)(descs))) {
                          return Data_Semigroup.append(Options_Applicative_Help_Chunk.chunkSemigroup(Text_PrettyPrint_Leijen.docSemigroup))(chunk)(suffix);
                      };
                      if (Data_Boolean.otherwise) {
                          return Data_Semigroup.append(Options_Applicative_Help_Chunk.chunkSemigroup(Text_PrettyPrint_Leijen.docSemigroup))(Data_Functor.map(Options_Applicative_Help_Chunk.chunkFunctor)(Text_PrettyPrint_Leijen.parens)(chunk))(suffix);
                      };
                      throw new Error("Failed pattern match at Options.Applicative.Help.Core (line 63, column 7 - line 73, column 43): " + [ chunk.constructor.name ]);
                  };
                  var desc$prime = Options_Applicative_Help_Chunk.chunkBeside(Options_Applicative_Help_Chunk.listToChunk(Text_PrettyPrint_Leijen.docMonoid)(intersperse((Data_Newtype.un(newtypeOptDescStyle)(OptDescStyle)(style)).descSep)(descs)))(mv);
                  return Data_Maybe.maybe(Control_Category.identity(Control_Category.categoryFn))(Data_Functor.map(Options_Applicative_Help_Chunk.chunkFunctor))(Options_Applicative_Types.optDescMod(opt))(render(desc$prime));
              };
          };
      };
  };
  var headerHelp = function (chunk) {
      return Data_Newtype.over(Options_Applicative_Help_Types.newtypeParserHelp)(Options_Applicative_Help_Types.newtypeParserHelp)(Options_Applicative_Help_Types.ParserHelp)(function (v) {
          return {
              helpHeader: chunk,
              helpBody: v.helpBody,
              helpError: v.helpError,
              helpFooter: v.helpFooter,
              helpSuggestions: v.helpSuggestions,
              helpUsage: v.helpUsage
          };
      })(Data_Monoid.mempty(Options_Applicative_Help_Types.parserHelpMonoid));
  };
  var fullDesc = function (pprefs) {
      var style = {
          descSep: Text_PrettyPrint_Leijen.string(","),
          descHidden: true,
          descOptional: true,
          descSurround: false
      };
      var doc = function (info) {
          return function (opt) {
              var show_def = function (s) {
                  return Text_PrettyPrint_Leijen.parens(Text_PrettyPrint_Leijen.appendWithSpace(Text_PrettyPrint_Leijen.string("default:"))(Text_PrettyPrint_Leijen.string(s)));
              };
              var n = optDesc(pprefs)(style)(info)(opt);
              var hdef = Options_Applicative_Help_Chunk.Chunk(Data_Functor.map(Data_Maybe.functorMaybe)(show_def)(Options_Applicative_Types.optShowDefault(opt)));
              var h = Options_Applicative_Types.optHelp(opt);
              return Control_Bind.discard(Control_Bind.discardUnit)(Data_Maybe.bindMaybe)(Control_MonadZero.guard(Data_Maybe.monadZeroMaybe)(!Options_Applicative_Help_Chunk.isEmpty(n)))(function () {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Data_Maybe.bindMaybe)(Control_MonadZero.guard(Data_Maybe.monadZeroMaybe)(!Options_Applicative_Help_Chunk.isEmpty(h)))(function () {
                      return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(new Data_Tuple.Tuple(Options_Applicative_Help_Chunk.extractChunk(Text_PrettyPrint_Leijen.docMonoid)(n), Text_PrettyPrint_Leijen.align(Options_Applicative_Help_Chunk.extractChunk(Text_PrettyPrint_Leijen.docMonoid)(Options_Applicative_Help_Chunk.chunkBeside(h)(hdef)))));
                  });
              });
          };
      };
      var $39 = Options_Applicative_Common.mapParser(doc);
      return function ($40) {
          return Options_Applicative_Help_Chunk.tabulate(Data_Array.catMaybes($39($40)));
      };
  };
  var footerHelp = function (chunk) {
      return Data_Newtype.over(Options_Applicative_Help_Types.newtypeParserHelp)(Options_Applicative_Help_Types.newtypeParserHelp)(Options_Applicative_Help_Types.ParserHelp)(function (v) {
          return {
              helpFooter: chunk,
              helpBody: v.helpBody,
              helpError: v.helpError,
              helpHeader: v.helpHeader,
              helpSuggestions: v.helpSuggestions,
              helpUsage: v.helpUsage
          };
      })(Data_Monoid.mempty(Options_Applicative_Help_Types.parserHelpMonoid));
  };
  var fold_tree = function (v) {
      if (v instanceof Options_Applicative_Types.Leaf) {
          return v.value0;
      };
      if (v instanceof Options_Applicative_Types.MultNode) {
          return Data_Foldable.foldr(Data_Foldable.foldableArray)(function ($41) {
              return Options_Applicative_Help_Chunk.chunkBesideOrBelow(fold_tree($41));
          })(Data_Monoid.mempty(Options_Applicative_Help_Chunk.chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup)))(v.value0);
      };
      if (v instanceof Options_Applicative_Types.AltNode) {
          var alt_node = function (v1) {
              if (v1.length === 1) {
                  return v1[0];
              };
              return Data_Functor.map(Options_Applicative_Help_Chunk.chunkFunctor)(Text_PrettyPrint_Leijen.parens)(Data_Foldable.foldr(Data_Foldable.foldableArray)(Options_Applicative_Help_Chunk.chunked(function (x) {
                  return function (y) {
                      return Text_PrettyPrint_Leijen.appendWithSoftline(x)(Text_PrettyPrint_Leijen.appendWithSoftline(Text_PrettyPrint_Leijen["char"]("|"))(y));
                  };
              }))(Data_Monoid.mempty(Options_Applicative_Help_Chunk.chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup)))(v1));
          };
          return alt_node(Data_Array.filter((function () {
              var $42 = Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean);
              return function ($43) {
                  return $42(Options_Applicative_Help_Chunk.isEmpty($43));
              };
          })())(Data_Functor.map(Data_Functor.functorArray)(fold_tree)(v.value0)));
      };
      throw new Error("Failed pattern match at Options.Applicative.Help.Core (line 116, column 1 - line 116, column 46): " + [ v.constructor.name ]);
  };
  var errorHelp = function (chunk) {
      return Data_Newtype.over(Options_Applicative_Help_Types.newtypeParserHelp)(Options_Applicative_Help_Types.newtypeParserHelp)(Options_Applicative_Help_Types.ParserHelp)(function (v) {
          return {
              helpError: chunk,
              helpBody: v.helpBody,
              helpFooter: v.helpFooter,
              helpHeader: v.helpHeader,
              helpSuggestions: v.helpSuggestions,
              helpUsage: v.helpUsage
          };
      })(Data_Monoid.mempty(Options_Applicative_Help_Types.parserHelpMonoid));
  };
  var cmdDesc = (function () {
      var desc = function (v) {
          return function (opt) {
              var v1 = (Data_Newtype.un(Options_Applicative_Types.optionNewtype)(Options_Applicative_Types.Option)(opt)).optMain;
              if (v1 instanceof Options_Applicative_Types.CmdReader) {
                  return Data_Tuple.Tuple.create(v1.value0)(Options_Applicative_Help_Chunk.tabulate(Control_Bind.bind(Control_Bind.bindArray)(Data_Array.reverse(v1.value1))(function (v2) {
                      return Control_Bind.bind(Control_Bind.bindArray)(Data_Maybe.maybe([  ])(Control_Applicative.pure(Control_Applicative.applicativeArray))(Data_Functor.map(Data_Maybe.functorMaybe)((function () {
                          var $44 = Data_Newtype.un(Options_Applicative_Types.parserInfoNewtype)(Options_Applicative_Types.ParserInfo);
                          return function ($45) {
                              return (function (v3) {
                                  return v3.infoProgDesc;
                              })($44($45));
                          };
                      })())(v1.value2(v2))))(function (v3) {
                          return Control_Applicative.pure(Control_Applicative.applicativeArray)(new Data_Tuple.Tuple(Text_PrettyPrint_Leijen.string(v2), Text_PrettyPrint_Leijen.align(Options_Applicative_Help_Chunk.extractChunk(Text_PrettyPrint_Leijen.docMonoid)(v3))));
                      });
                  })));
              };
              return Data_Monoid.mempty(Data_Tuple.monoidTuple(Data_Maybe.monoidMaybe(Data_Semigroup.semigroupString))(Options_Applicative_Help_Chunk.chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup)));
          };
      };
      return Options_Applicative_Common.mapParser(desc);
  })();
  var briefDesc$prime = function (showOptional) {
      return function (pprefs) {
          var style = {
              descSep: Text_PrettyPrint_Leijen.string("|"),
              descHidden: false,
              descOptional: showOptional,
              descSurround: true
          };
          var $46 = Options_Applicative_Common.treeMapParser(optDesc(pprefs)(style));
          return function ($47) {
              return fold_tree($46($47));
          };
      };
  };
  var missingDesc = briefDesc$prime(false);
  var briefDesc = briefDesc$prime(true);
  var parserUsage = function (pprefs) {
      return function (p) {
          return function (progn) {
              return Text_PrettyPrint_Leijen.hsep([ Text_PrettyPrint_Leijen.string("Usage:"), Text_PrettyPrint_Leijen.string(progn), Text_PrettyPrint_Leijen.align(Options_Applicative_Help_Chunk.extractChunk(Text_PrettyPrint_Leijen.docMonoid)(briefDesc(pprefs)(p))) ]);
          };
      };
  };
  var bodyHelp = function (chunk) {
      return Data_Newtype.over(Options_Applicative_Help_Types.newtypeParserHelp)(Options_Applicative_Help_Types.newtypeParserHelp)(Options_Applicative_Help_Types.ParserHelp)(function (v) {
          return {
              helpBody: chunk,
              helpError: v.helpError,
              helpFooter: v.helpFooter,
              helpHeader: v.helpHeader,
              helpSuggestions: v.helpSuggestions,
              helpUsage: v.helpUsage
          };
      })(Data_Monoid.mempty(Options_Applicative_Help_Types.parserHelpMonoid));
  };
  var parserHelp = function (pprefs) {
      return function (p) {
          var with_title = function (title) {
              return Data_Functor.map(Options_Applicative_Help_Chunk.chunkFunctor)(function (v) {
                  return Text_PrettyPrint_Leijen.appendWithLine(Text_PrettyPrint_Leijen.string(title))(v);
              });
          };
          var group_title = function (arr) {
              var v = Data_Array_NonEmpty.uncons(arr);
              return with_title(Data_Maybe.fromMaybe("Available commands:")(Data_Tuple.fst(v.head)))(Options_Applicative_Help_Chunk.vcatChunks(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Data_Tuple.snd(v.head) ])(Data_Functor.map(Data_Functor.functorArray)(Data_Tuple.snd)(v.tail))));
          };
          var cs = Data_Array.groupBy(Data_Function.on(Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqString)))(Data_Tuple.fst))(cmdDesc(p));
          return bodyHelp(Options_Applicative_Help_Chunk.vsepChunks(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ with_title("Available options:")(fullDesc(pprefs)(p)) ])(Data_Functor.map(Data_Functor.functorArray)(group_title)(cs))));
      };
  };
  exports["cmdDesc"] = cmdDesc;
  exports["briefDesc"] = briefDesc;
  exports["missingDesc"] = missingDesc;
  exports["fold_tree"] = fold_tree;
  exports["fullDesc"] = fullDesc;
  exports["errorHelp"] = errorHelp;
  exports["headerHelp"] = headerHelp;
  exports["suggestionsHelp"] = suggestionsHelp;
  exports["usageHelp"] = usageHelp;
  exports["bodyHelp"] = bodyHelp;
  exports["footerHelp"] = footerHelp;
  exports["parserHelp"] = parserHelp;
  exports["parserUsage"] = parserUsage;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Options.Applicative.Help.Levenshtein"] = $PS["Options.Applicative.Help.Levenshtein"] || {};
  var exports = $PS["Options.Applicative.Help.Levenshtein"];
  var Data_Array = $PS["Data.Array"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function_Memoize = $PS["Data.Function.Memoize"];
  var Data_NonEmpty = $PS["Data.NonEmpty"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup_Foldable = $PS["Data.Semigroup.Foldable"];                
  var editDistance = function (dictEq) {
      return function (xs) {
          return function (ys) {
              var dist$prime = Data_Function_Memoize.memoize2(Data_Function_Memoize.tabulateNat)(Data_Function_Memoize.tabulateNat)(function (a) {
                  return function (b) {
                      return dist(a)(b);
                  };
              });
              var dist = function (v) {
                  return function (v1) {
                      if (v === 0) {
                          return v1;
                      };
                      if (v1 === 0) {
                          return v;
                      };
                      return Data_Semigroup_Foldable.minimum(Data_Ord.ordInt)(Data_NonEmpty.foldable1NonEmpty(Data_Foldable.foldableArray))(new Data_NonEmpty.NonEmpty(dist$prime(v - 1 | 0)(v1) + 1 | 0, [ dist$prime(v)(v1 - 1 | 0) + 1 | 0, (function (dictPartial) {
                          var $6 = Data_Eq.eq(dictEq)(xs[v - 1 | 0])(ys[v1 - 1 | 0]);
                          if ($6) {
                              return dist$prime(v - 1 | 0)(v1 - 1 | 0);
                          };
                          return 1 + dist$prime(v - 1 | 0)(v1 - 1 | 0) | 0;
                      })() ]));
                  };
              };
              return dist$prime(Data_Array.length(xs))(Data_Array.length(ys));
          };
      };
  };
  exports["editDistance"] = editDistance;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Options.Applicative.Extra"] = $PS["Options.Applicative.Extra"] || {};
  var exports = $PS["Options.Applicative.Extra"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Either = $PS["Data.Either"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Exists = $PS["Data.Exists"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List = $PS["Data.List"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var ExitCodes = $PS["ExitCodes"];
  var Node_Encoding = $PS["Node.Encoding"];
  var Node_Process = $PS["Node.Process"];
  var Node_Stream = $PS["Node.Stream"];
  var Options_Applicative_BashCompletion = $PS["Options.Applicative.BashCompletion"];
  var Options_Applicative_Builder = $PS["Options.Applicative.Builder"];
  var Options_Applicative_Builder_Internal = $PS["Options.Applicative.Builder.Internal"];
  var Options_Applicative_Common = $PS["Options.Applicative.Common"];
  var Options_Applicative_Help_Chunk = $PS["Options.Applicative.Help.Chunk"];
  var Options_Applicative_Help_Core = $PS["Options.Applicative.Help.Core"];
  var Options_Applicative_Help_Levenshtein = $PS["Options.Applicative.Help.Levenshtein"];
  var Options_Applicative_Help_Types = $PS["Options.Applicative.Help.Types"];
  var Options_Applicative_Internal = $PS["Options.Applicative.Internal"];
  var Options_Applicative_Internal_Utils = $PS["Options.Applicative.Internal.Utils"];
  var Options_Applicative_Types = $PS["Options.Applicative.Types"];
  var Text_PrettyPrint_Leijen = $PS["Text.PrettyPrint.Leijen"];                
  var renderFailure = function (failure) {
      return function (progn) {
          var v = Data_Newtype.un(Options_Applicative_Types.newtypeParserFailure)(Options_Applicative_Types.ParserFailure)(failure)(progn);
          return new Data_Tuple.Tuple(Options_Applicative_Help_Types.renderHelp(v.value1.value1.value0)(v.value0), v.value1.value0);
      };
  };
  var parserFailure = function (pprefs) {
      return function (pinfo) {
          return function (msg) {
              return function (ctx) {
                  var with_context = function (arr) {
                      return function (i) {
                          return function (f) {
                              var v = Data_Array.head(arr);
                              if (v instanceof Data_Maybe.Nothing) {
                                  return f([  ])(i);
                              };
                              if (v instanceof Data_Maybe.Just) {
                                  return Data_Exists.runExists(function (i$prime) {
                                      return f(Options_Applicative_Internal.contextNames(arr))(i$prime);
                                  })(v.value0.value1);
                              };
                              throw new Error("Failed pattern match at Options.Applicative.Extra (line 184, column 28 - line 186, column 73): " + [ v.constructor.name ]);
                          };
                      };
                  };
                  var usage_help = function (progn) {
                      return function (names) {
                          return function (v) {
                              if (msg instanceof Options_Applicative_Types.InfoMsg) {
                                  return Data_Monoid.mempty(Options_Applicative_Help_Types.parserHelpMonoid);
                              };
                              return Options_Applicative_Help_Core.usageHelp(Options_Applicative_Help_Chunk.vcatChunks([ Control_Applicative.pure(Options_Applicative_Help_Chunk.chunkApplicative)(Options_Applicative_Help_Core.parserUsage(pprefs)(v.infoParser)(Options_Applicative_Internal_Utils.unWords(Data_Foldable.foldableArray)(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ progn ])(names)))), Data_Functor.map(Options_Applicative_Help_Chunk.chunkFunctor)(Text_PrettyPrint_Leijen.indent(2))(v.infoProgDesc) ]));
                          };
                      };
                  };
                  var suggestion_help = Options_Applicative_Help_Core.suggestionsHelp((function () {
                      if (msg instanceof Options_Applicative_Types.UnexpectedError) {
                          var opt_completions = function (v) {
                              return function (v1) {
                                  if (v1.optMain instanceof Options_Applicative_Types.OptReader) {
                                      return Data_Functor.map(Data_Functor.functorArray)(Options_Applicative_Common.showOption)(v1.optMain.value0);
                                  };
                                  if (v1.optMain instanceof Options_Applicative_Types.FlagReader) {
                                      return Data_Functor.map(Data_Functor.functorArray)(Options_Applicative_Common.showOption)(v1.optMain.value0);
                                  };
                                  if (v1.optMain instanceof Options_Applicative_Types.ArgReader) {
                                      return [  ];
                                  };
                                  if (v1.optMain instanceof Options_Applicative_Types.CmdReader) {
                                      if (v.hinfoUnreachableArgs) {
                                          return [  ];
                                      };
                                      if (Data_Boolean.otherwise) {
                                          return v1.optMain.value1;
                                      };
                                  };
                                  throw new Error("Failed pattern match at Options.Applicative.Extra (line 278, column 64 - line 285, column 37): " + [ v1.optMain.constructor.name ]);
                              };
                          };
                          var possibles = Data_Foldable.fold(Data_Foldable.foldableArray)(Data_Monoid.monoidArray)(Data_Exists.runExists(function (zz) {
                              return Options_Applicative_Common.mapParser(opt_completions)(zz);
                          })(msg.value1.value0));
                          var isClose = function (a) {
                              return Data_Function.on(Options_Applicative_Help_Levenshtein.editDistance(Data_Eq.eqChar))(Data_String_CodeUnits.toCharArray)(a)(msg.value0) < 3;
                          };
                          var good = Data_Array.filter(isClose)(possibles);
                          var prose = (function () {
                              var $47 = Data_Array.length(good) < 2;
                              if ($47) {
                                  return Options_Applicative_Help_Chunk.stringChunk("Did you mean this?");
                              };
                              return Options_Applicative_Help_Chunk.stringChunk("Did you mean one of these?");
                          })();
                          var suggestions = Control_Apply.apply(Options_Applicative_Help_Chunk.chunkApply)(Data_Functor.map(Options_Applicative_Help_Chunk.chunkFunctor)(Text_PrettyPrint_Leijen.appendWithLine)(prose))(Data_Functor.map(Options_Applicative_Help_Chunk.chunkFunctor)(Text_PrettyPrint_Leijen.indent(4))(Options_Applicative_Help_Chunk.vcatChunks(Data_Functor.map(Data_Functor.functorArray)(Options_Applicative_Help_Chunk.stringChunk)(good))));
                          return suggestions;
                      };
                      return Data_Monoid.mempty(Options_Applicative_Help_Chunk.chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup));
                  })());
                  var show_full_help = (function () {
                      if (msg instanceof Options_Applicative_Types.ShowHelpText) {
                          return true;
                      };
                      if (msg instanceof Options_Applicative_Types.MissingError && (msg.value0 instanceof Options_Applicative_Types.CmdStart && (Data_Newtype.un(Options_Applicative_Types.parserPrefsNewtype)(Options_Applicative_Types.ParserPrefs)(pprefs)).prefShowHelpOnEmpty)) {
                          return true;
                      };
                      return (Data_Newtype.un(Options_Applicative_Types.parserPrefsNewtype)(Options_Applicative_Types.ParserPrefs)(pprefs)).prefShowHelpOnError;
                  })();
                  var exit_code = (function () {
                      if (msg instanceof Options_Applicative_Types.ErrorMsg) {
                          return (Data_Newtype.un(Options_Applicative_Types.parserInfoNewtype)(Options_Applicative_Types.ParserInfo)(pinfo)).infoFailureCode;
                      };
                      if (msg instanceof Options_Applicative_Types.UnknownError) {
                          return (Data_Newtype.un(Options_Applicative_Types.parserInfoNewtype)(Options_Applicative_Types.ParserInfo)(pinfo)).infoFailureCode;
                      };
                      if (msg instanceof Options_Applicative_Types.MissingError) {
                          return (Data_Newtype.un(Options_Applicative_Types.parserInfoNewtype)(Options_Applicative_Types.ParserInfo)(pinfo)).infoFailureCode;
                      };
                      if (msg instanceof Options_Applicative_Types.ExpectsArgError) {
                          return (Data_Newtype.un(Options_Applicative_Types.parserInfoNewtype)(Options_Applicative_Types.ParserInfo)(pinfo)).infoFailureCode;
                      };
                      if (msg instanceof Options_Applicative_Types.UnexpectedError) {
                          return (Data_Newtype.un(Options_Applicative_Types.parserInfoNewtype)(Options_Applicative_Types.ParserInfo)(pinfo)).infoFailureCode;
                      };
                      if (msg instanceof Options_Applicative_Types.ShowHelpText) {
                          return ExitCodes.Success.value;
                      };
                      if (msg instanceof Options_Applicative_Types.InfoMsg) {
                          return ExitCodes.Success.value;
                      };
                      throw new Error("Failed pattern match at Options.Applicative.Extra (line 171, column 17 - line 178, column 44): " + [ msg.constructor.name ]);
                  })();
                  var error_help = Options_Applicative_Help_Core.errorHelp((function () {
                      if (msg instanceof Options_Applicative_Types.ShowHelpText) {
                          return Data_Monoid.mempty(Options_Applicative_Help_Chunk.chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup));
                      };
                      if (msg instanceof Options_Applicative_Types.ErrorMsg) {
                          return Options_Applicative_Help_Chunk.stringChunk(msg.value0);
                      };
                      if (msg instanceof Options_Applicative_Types.InfoMsg) {
                          return Options_Applicative_Help_Chunk.stringChunk(msg.value0);
                      };
                      if (msg instanceof Options_Applicative_Types.MissingError && (msg.value0 instanceof Options_Applicative_Types.CmdStart && (Data_Newtype.un(Options_Applicative_Types.parserPrefsNewtype)(Options_Applicative_Types.ParserPrefs)(pprefs)).prefShowHelpOnEmpty)) {
                          return Data_Monoid.mempty(Options_Applicative_Help_Chunk.chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup));
                      };
                      if (msg instanceof Options_Applicative_Types.MissingError) {
                          return Data_Exists.runExists(function (x) {
                              return Options_Applicative_Help_Chunk.chunkBeside(Options_Applicative_Help_Chunk.stringChunk("Missing:"))(Options_Applicative_Help_Core.missingDesc(pprefs)(x));
                          })(msg.value1.value0);
                      };
                      if (msg instanceof Options_Applicative_Types.ExpectsArgError) {
                          return Options_Applicative_Help_Chunk.stringChunk("The option `" + (msg.value0 + "` expects an argument."));
                      };
                      if (msg instanceof Options_Applicative_Types.UnexpectedError) {
                          var msg$prime = (function () {
                              var $71 = Options_Applicative_Internal_Utils.startsWith("-")(msg.value0);
                              if ($71) {
                                  return "Invalid option `" + (msg.value0 + "'");
                              };
                              return "Invalid argument `" + (msg.value0 + "'");
                          })();
                          return Options_Applicative_Help_Chunk.stringChunk(msg$prime);
                      };
                      if (msg instanceof Options_Applicative_Types.UnknownError) {
                          return Data_Monoid.mempty(Options_Applicative_Help_Chunk.chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup));
                      };
                      throw new Error("Failed pattern match at Options.Applicative.Extra (line 197, column 30 - line 229, column 18): " + [ msg.constructor.name ]);
                  })());
                  var base_help = function (v) {
                      var h = Options_Applicative_Help_Core.headerHelp(v.infoHeader);
                      var f = Options_Applicative_Help_Core.footerHelp(v.infoFooter);
                      if (show_full_help) {
                          return Data_Foldable.fold(Data_Foldable.foldableArray)(Options_Applicative_Help_Types.parserHelpMonoid)([ h, f, Options_Applicative_Help_Core.parserHelp(pprefs)(v.infoParser) ]);
                      };
                      return Data_Monoid.mempty(Options_Applicative_Help_Types.parserHelpMonoid);
                  };
                  return Options_Applicative_Types.ParserFailure(function (progn) {
                      var h = with_context(ctx)(pinfo)(function (names) {
                          return function (pinfo$prime) {
                              return Data_Foldable.fold(Data_Foldable.foldableArray)(Options_Applicative_Help_Types.parserHelpMonoid)([ base_help(pinfo$prime), usage_help(progn)(names)(pinfo$prime), suggestion_help, error_help ]);
                          };
                      });
                      return new Data_Tuple.Tuple(h, new Data_Tuple.Tuple(exit_code, new Data_Tuple.Tuple((Data_Newtype.un(Options_Applicative_Types.parserPrefsNewtype)(Options_Applicative_Types.ParserPrefs)(pprefs)).prefColumns, Data_Unit.unit)));
                  });
              };
          };
      };
  };
  var helper = Options_Applicative_Builder.abortOption(Options_Applicative_Types.ShowHelpText.value)(Data_Foldable.fold(Data_Foldable.foldableArray)(Options_Applicative_Builder_Internal.modMonoid)([ Options_Applicative_Builder["long"](Options_Applicative_Builder_Internal.optionFieldsHasName)("help"), Options_Applicative_Builder["short"](Options_Applicative_Builder_Internal.optionFieldsHasName)("h"), Options_Applicative_Builder.help("Show this help text"), Options_Applicative_Builder.hidden ]));
  var getProgName = Data_Functor.mapFlipped(Effect.functorEffect)(Node_Process.argv)(function (args) {
      return Data_Maybe.fromMaybe("")(Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.index(args)(1))(function (v) {
          return Data_Array.last(Data_String_Common.split("/")(v));
      }));
  });
  var getArgs = Data_Functor.mapFlipped(Effect.functorEffect)(Node_Process.argv)(Data_Array.drop(2));
  var exitWith = function (c) {
      return Node_Process.exit(Data_Enum.fromEnum(ExitCodes.boundedEnumExitCode)(c));
  };
  var exitSuccess = Node_Process.exit(Data_Enum.fromEnum(ExitCodes.boundedEnumExitCode)(ExitCodes.Success.value));
  var handleParseResult = function (v) {
      if (v instanceof Options_Applicative_Types.Success) {
          return Control_Applicative.pure(Effect.applicativeEffect)(v.value0);
      };
      if (v instanceof Options_Applicative_Types.Failure) {
          return function __do() {
              var v1 = getProgName();
              var v2 = renderFailure(v.value0)(v1);
              var stream = (function () {
                  if (v2.value1 instanceof ExitCodes.Success) {
                      return Node_Process.stdout;
                  };
                  return Node_Process.stderr;
              })();
              Data_Functor["void"](Effect.functorEffect)(Node_Stream.writeString(stream)(Node_Encoding.UTF8.value)(v2.value0 + "\x0a")(Data_Monoid.mempty(Effect.monoidEffect(Data_Monoid.monoidUnit))))();
              return exitWith(v2.value1)();
          };
      };
      if (v instanceof Options_Applicative_Types.CompletionInvoked) {
          return function __do() {
              var v1 = getProgName();
              var v2 = (Data_Newtype.un(Options_Applicative_Types.newtypeCompletionResult)(Options_Applicative_Types.CompletionResult)(v.value0)).execCompletion(v1)();
              Data_Functor["void"](Effect.functorEffect)(Node_Stream.writeString(Node_Process.stdout)(Node_Encoding.UTF8.value)(v2)(Data_Monoid.mempty(Effect.monoidEffect(Data_Monoid.monoidUnit))))();
              return exitSuccess();
          };
      };
      throw new Error("Failed pattern match at Options.Applicative.Extra (line 110, column 1 - line 110, column 58): " + [ v.constructor.name ]);
  };
  var execParserPure = function (pprefs) {
      return function (pinfo) {
          return function (args) {
              var pinfo$prime = Data_Newtype.over(Options_Applicative_Types.parserInfoNewtype)(Options_Applicative_Types.parserInfoNewtype)(Options_Applicative_Types.ParserInfo)(function (i) {
                  return {
                      infoParser: Control_Alt.alt(Options_Applicative_Types.parserAlt)(Data_Functor.map(Options_Applicative_Types.parserFunctor)(Data_Either.Left.create)(Options_Applicative_BashCompletion.bashCompletionParser(pinfo)(pprefs)))(Data_Functor.map(Options_Applicative_Types.parserFunctor)(Data_Either.Right.create)(i.infoParser)),
                      infoFailureCode: i.infoFailureCode,
                      infoFooter: i.infoFooter,
                      infoFullDesc: i.infoFullDesc,
                      infoHeader: i.infoHeader,
                      infoPolicy: i.infoPolicy,
                      infoProgDesc: i.infoProgDesc
                  };
              })(pinfo);
              var p = Options_Applicative_Common.runParserInfo(Options_Applicative_Internal.pMonadP)(pinfo$prime)(Data_List.fromFoldable(Data_Foldable.foldableArray)(args));
              var v = Options_Applicative_Internal.runP(p)(pprefs);
              if (v.value0 instanceof Data_Either.Right && v.value0.value0 instanceof Data_Either.Right) {
                  return new Options_Applicative_Types.Success(v.value0.value0.value0);
              };
              if (v.value0 instanceof Data_Either.Right && v.value0.value0 instanceof Data_Either.Left) {
                  return new Options_Applicative_Types.CompletionInvoked(v.value0.value0.value0);
              };
              if (v.value0 instanceof Data_Either.Left) {
                  return Options_Applicative_Types.Failure.create(parserFailure(pprefs)(pinfo)(v.value0.value0)(v.value1));
              };
              throw new Error("Failed pattern match at Options.Applicative.Extra (line 144, column 3 - line 147, column 73): " + [ v.constructor.name ]);
          };
      };
  };
  var customExecParser = function (pprefs) {
      return function (pinfo) {
          return Control_Bind.bind(Effect.bindEffect)(Data_Functor.map(Effect.functorEffect)(execParserPure(pprefs)(pinfo))(getArgs))(handleParseResult);
      };
  };
  var execParser = customExecParser(Options_Applicative_Builder.defaultPrefs);
  exports["helper"] = helper;
  exports["execParser"] = execParser;
  exports["customExecParser"] = customExecParser;
  exports["execParserPure"] = execParserPure;
  exports["handleParseResult"] = handleParseResult;
  exports["parserFailure"] = parserFailure;
  exports["renderFailure"] = renderFailure;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Pscid.Options"] = $PS["Pscid.Options"] || {};
  var exports = $PS["Pscid.Options"];
  var $foreign = $PS["Pscid.Options"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_MonadZero = $PS["Control.MonadZero"];
  var Data_Array = $PS["Data.Array"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Effect = $PS["Effect"];
  var Node_Platform = $PS["Node.Platform"];
  var Node_Process = $PS["Node.Process"];
  var Options_Applicative_Builder = $PS["Options.Applicative.Builder"];
  var Options_Applicative_Builder_Internal = $PS["Options.Applicative.Builder.Internal"];
  var Options_Applicative_Extra = $PS["Options.Applicative.Extra"];
  var Options_Applicative_Internal_Utils = $PS["Options.Applicative.Internal.Utils"];
  var Options_Applicative_Types = $PS["Options.Applicative.Types"];                
  var ScriptCommand = (function () {
      function ScriptCommand(value0) {
          this.value0 = value0;
      };
      ScriptCommand.create = function (value0) {
          return new ScriptCommand(value0);
      };
      return ScriptCommand;
  })();
  var BuildCommand = (function () {
      function BuildCommand(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      BuildCommand.create = function (value0) {
          return function (value1) {
              return new BuildCommand(value0, value1);
          };
      };
      return BuildCommand;
  })();
  var spagoCmd = (function () {
      var $15 = Data_Eq.eq(Data_Maybe.eqMaybe(Node_Platform.eqPlatform))(Node_Process.platform)(new Data_Maybe.Just(Node_Platform.Win32.value));
      if ($15) {
          return "spago.cmd";
      };
      return "spago";
  })();
  var setCommandIncludes = function (includesArr) {
      return function (cmd) {
          if (cmd instanceof BuildCommand) {
              return new BuildCommand(cmd.value0, includesArr);
          };
          if (cmd instanceof ScriptCommand) {
              return new ScriptCommand(cmd.value0);
          };
          throw new Error("Failed pattern match at Pscid.Options (line 87, column 38 - line 89, column 40): " + [ cmd.constructor.name ]);
      };
  };
  var scanDefaultDirectories = (function () {
      var mkGlob = function (dir) {
          return dir + "/**/*.purs";
      };
      var defaultDirectories = [ "src", "app", "test", "tests" ];
      return Data_Array.filterA(Effect.applicativeEffect)((function () {
          var $45 = Data_Functor.map(Effect.functorEffect)((function () {
              var $47 = Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean);
              return function ($48) {
                  return $47(Data_Array["null"]($48));
              };
          })());
          return function ($46) {
              return $45($foreign.glob(mkGlob($46)));
          };
      })())(defaultDirectories);
  })();
  var pulpCmd = (function () {
      var $20 = Data_Eq.eq(Data_Maybe.eqMaybe(Node_Platform.eqPlatform))(Node_Process.platform)(new Data_Maybe.Just(Node_Platform.Win32.value));
      if ($20) {
          return "pulp.cmd";
      };
      return "pulp";
  })();
  var printCLICommand = function (v) {
      if (v instanceof ScriptCommand) {
          return v.value0;
      };
      if (v instanceof BuildCommand && v.value1.length === 0) {
          return v.value0;
      };
      if (v instanceof BuildCommand) {
          return v.value0 + (" -I " + Data_String_Common.joinWith(":")(v.value1));
      };
      throw new Error("Failed pattern match at Pscid.Options (line 72, column 19 - line 78, column 50): " + [ v.constructor.name ]);
  };
  var npmCmd = (function () {
      var $27 = Data_Eq.eq(Data_Maybe.eqMaybe(Node_Platform.eqPlatform))(Node_Process.platform)(new Data_Maybe.Just(Node_Platform.Win32.value));
      if ($27) {
          return "npm.cmd";
      };
      return "npm";
  })();
  var mkCommand = function (cmd) {
      return function __do() {
          var v = $foreign.isSpagoProject();
          var v1 = $foreign.hasNamedScript("pscid:" + cmd)();
          var v2 = $foreign.hasNamedScript(cmd)();
          var npmSpecificCommand = Data_Functor.voidLeft(Data_Maybe.functorMaybe)(Control_MonadZero.guard(Data_Maybe.monadZeroMaybe)(v1))(new ScriptCommand(npmCmd + (" run -s pscid:" + cmd)));
          var npmBuildCommand = Data_Functor.voidLeft(Data_Maybe.functorMaybe)(Control_MonadZero.guard(Data_Maybe.monadZeroMaybe)(v2))(new ScriptCommand(npmCmd + (" run -s " + cmd)));
          var buildCommand = (function () {
              if (v) {
                  return new BuildCommand(spagoCmd + (" " + cmd), [  ]);
              };
              return new BuildCommand(pulpCmd + (" " + cmd), [  ]);
          })();
          return Data_Maybe.fromMaybe(buildCommand)(Control_Alt.alt(Data_Maybe.altMaybe)(npmSpecificCommand)(npmBuildCommand));
      };
  };
  var defaultOptions = {
      port: Data_Maybe.Nothing.value,
      buildCommand: new BuildCommand(pulpCmd + " build", [  ]),
      outputDirectory: "output",
      testCommand: new BuildCommand(pulpCmd + " test", [  ]),
      testAfterRebuild: false,
      sourceDirectories: [  ],
      censorCodes: [  ]
  };
  var mkDefaultOptions = Control_Apply.apply(Effect.applyEffect)(Control_Apply.apply(Effect.applyEffect)(Data_Functor.map(Effect.functorEffect)(function (v) {
      return function (v1) {
          return function (v2) {
              return {
                  buildCommand: v,
                  testCommand: v1,
                  sourceDirectories: v2,
                  censorCodes: defaultOptions.censorCodes,
                  outputDirectory: defaultOptions.outputDirectory,
                  port: defaultOptions.port,
                  testAfterRebuild: defaultOptions.testAfterRebuild
              };
          };
      };
  })(mkCommand("build")))(mkCommand("test")))(scanDefaultDirectories);
  var buildOptions = function (defaults) {
      return function (v) {
          var sepArguments = function (sep) {
              var $49 = Data_Array.filter(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraBoolean))(Data_String_Common["null"]));
              var $50 = Data_String_Common.split(sep);
              return function ($51) {
                  return $49($50($51));
              };
          };
          var includesArr = sepArguments(";")(v.includes);
          return {
              port: v.port,
              testAfterRebuild: v.testAfterRebuild,
              sourceDirectories: Data_Semigroup.append(Data_Semigroup.semigroupArray)(defaults.sourceDirectories)(includesArr),
              censorCodes: sepArguments(",")(v.censor),
              outputDirectory: v.outputDirectory,
              buildCommand: setCommandIncludes(includesArr)(defaults.buildCommand),
              testCommand: setCommandIncludes(includesArr)(defaults.testCommand)
          };
      };
  };
  var options = function (defaults) {
      return Control_Apply.apply(Options_Applicative_Types.parserApply)(Control_Apply.apply(Options_Applicative_Types.parserApply)(Control_Apply.apply(Options_Applicative_Types.parserApply)(Control_Apply.apply(Options_Applicative_Types.parserApply)(Data_Functor.map(Options_Applicative_Types.parserFunctor)(function (v) {
          return function (v1) {
              return function (v2) {
                  return function (v3) {
                      return function (v4) {
                          return buildOptions(defaults)({
                              port: v,
                              testAfterRebuild: v1,
                              outputDirectory: v4,
                              includes: v2,
                              censor: v3
                          });
                      };
                  };
              };
          };
      })(Data_Maybe.optional(Options_Applicative_Types.parserAlternative)(Options_Applicative_Builder.option(Options_Applicative_Builder["int"])(Data_Semigroup.append(Options_Applicative_Builder_Internal.modSemigroup)(Options_Applicative_Builder["long"](Options_Applicative_Builder_Internal.optionFieldsHasName)("port"))(Data_Semigroup.append(Options_Applicative_Builder_Internal.modSemigroup)(Options_Applicative_Builder["short"](Options_Applicative_Builder_Internal.optionFieldsHasName)("p"))(Data_Semigroup.append(Options_Applicative_Builder_Internal.modSemigroup)(Options_Applicative_Builder.metavar(Options_Applicative_Builder_Internal.optionFieldsHasMetavar)("PORT"))(Options_Applicative_Builder.help("What port to start the ide server on"))))))))(Options_Applicative_Builder["switch"](Data_Semigroup.append(Options_Applicative_Builder_Internal.modSemigroup)(Options_Applicative_Builder["long"](Options_Applicative_Builder_Internal.flagFieldsHasName)("test"))(Options_Applicative_Builder.help("Run tests after successful rebuild")))))(Control_Alt.alt(Options_Applicative_Types.parserAlt)(Options_Applicative_Builder.strOption(Data_Semigroup.append(Options_Applicative_Builder_Internal.modSemigroup)(Options_Applicative_Builder["long"](Options_Applicative_Builder_Internal.optionFieldsHasName)("include"))(Data_Semigroup.append(Options_Applicative_Builder_Internal.modSemigroup)(Options_Applicative_Builder["short"](Options_Applicative_Builder_Internal.optionFieldsHasName)("I"))(Data_Semigroup.append(Options_Applicative_Builder_Internal.modSemigroup)(Options_Applicative_Builder.help("Directories for additional PureScript source files, separated by `;`"))(Data_Semigroup.append(Options_Applicative_Builder_Internal.modSemigroup)(Options_Applicative_Builder.value(Options_Applicative_Builder_Internal.optionFieldsHasValue)(""))(Options_Applicative_Builder.metavar(Options_Applicative_Builder_Internal.optionFieldsHasMetavar)("INCLUDES")))))))(Control_Applicative.pure(Options_Applicative_Types.parserApplicative)(""))))(Control_Alt.alt(Options_Applicative_Types.parserAlt)(Options_Applicative_Builder.strOption(Data_Semigroup.append(Options_Applicative_Builder_Internal.modSemigroup)(Options_Applicative_Builder["long"](Options_Applicative_Builder_Internal.optionFieldsHasName)("censor-codes"))(Data_Semigroup.append(Options_Applicative_Builder_Internal.modSemigroup)(Options_Applicative_Builder.help("Warning codes to ignore, seperated by `,`"))(Data_Semigroup.append(Options_Applicative_Builder_Internal.modSemigroup)(Options_Applicative_Builder.value(Options_Applicative_Builder_Internal.optionFieldsHasValue)(""))(Options_Applicative_Builder.metavar(Options_Applicative_Builder_Internal.optionFieldsHasMetavar)("CENSOR-CODES"))))))(Control_Applicative.pure(Options_Applicative_Types.parserApplicative)(""))))(Control_Alt.alt(Options_Applicative_Types.parserAlt)(Options_Applicative_Builder.strOption(Data_Semigroup.append(Options_Applicative_Builder_Internal.modSemigroup)(Options_Applicative_Builder["long"](Options_Applicative_Builder_Internal.optionFieldsHasName)("output"))(Data_Semigroup.append(Options_Applicative_Builder_Internal.modSemigroup)(Options_Applicative_Builder["short"](Options_Applicative_Builder_Internal.optionFieldsHasName)("O"))(Data_Semigroup.append(Options_Applicative_Builder_Internal.modSemigroup)(Options_Applicative_Builder.help("Output directory for compiled JavaScript"))(Data_Semigroup.append(Options_Applicative_Builder_Internal.modSemigroup)(Options_Applicative_Builder.value(Options_Applicative_Builder_Internal.optionFieldsHasValue)("output"))(Options_Applicative_Builder.metavar(Options_Applicative_Builder_Internal.optionFieldsHasMetavar)("OUTPUT")))))))(Control_Applicative.pure(Options_Applicative_Types.parserApplicative)("output")));
  };
  var optionParser = (function () {
      var opts = function (defaults) {
          return Options_Applicative_Builder.info(Options_Applicative_Internal_Utils.apApplyFlipped(Options_Applicative_Types.parserApply)(options(defaults))(Options_Applicative_Extra.helper))(Data_Semigroup.append(Options_Applicative_Builder.infoModSemigroup)(Options_Applicative_Builder.fullDesc)(Data_Semigroup.append(Options_Applicative_Builder.infoModSemigroup)(Options_Applicative_Builder.progDesc("Watches and rebuilds PureScript source files"))(Options_Applicative_Builder.header("pscid - A lightweight, fast and unintrusive PureScript file-watcher"))));
      };
      return function __do() {
          var v = mkDefaultOptions();
          return Options_Applicative_Extra.execParser(opts(v))();
      };
  })();
  exports["defaultOptions"] = defaultOptions;
  exports["scanDefaultDirectories"] = scanDefaultDirectories;
  exports["spagoCmd"] = spagoCmd;
  exports["pulpCmd"] = pulpCmd;
  exports["npmCmd"] = npmCmd;
  exports["mkDefaultOptions"] = mkDefaultOptions;
  exports["ScriptCommand"] = ScriptCommand;
  exports["BuildCommand"] = BuildCommand;
  exports["printCLICommand"] = printCLICommand;
  exports["setCommandIncludes"] = setCommandIncludes;
  exports["mkCommand"] = mkCommand;
  exports["buildOptions"] = buildOptions;
  exports["options"] = options;
  exports["optionParser"] = optionParser;
})(PS);
(function(exports) {
  'use strict';

  /* eslint-env node*/

  exports.unsafeFromNullable = function unsafeFromNullable (msg) {
      return function (x) {
          if (x === null) throw new Error(msg);
          return x;
      };
  };

  exports.spawnImpl = function spawnImpl (command) {
      return function (args) {
          return function (opts) {
              return function () {
                  return require('child_process').spawn(command, args, opts);
              };
          };
      };
  };

  exports.mkOnExit = function mkOnExit (mkChildExit) {
      return function onExit (cp) {
          return function (cb) {
              return function () {
                  cp.on('exit', function (code, signal) {
                      cb(mkChildExit(code)(signal))();
                  });
              };
          };
      };
  };

  exports.mkOnClose = function mkOnClose (mkChildExit) {
      return function onClose (cp) {
          return function (cb) {
              return function () {
                  cp.on('close', function (code, signal) {
                      cb(mkChildExit(code)(signal))();
                  });
              };
          };
      };
  };

  exports.onError = function onError (cp) {
      return function (cb) {
          return function () {
              cp.on('error', function (err) {
                  cb(err)();
              });
          };
      };
  };

  exports.undefined = undefined;
})(PS["Node.ChildProcess"] = PS["Node.ChildProcess"] || {});
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Node.ChildProcess"] = $PS["Node.ChildProcess"] || {};
  var exports = $PS["Node.ChildProcess"];
  var $foreign = $PS["Node.ChildProcess"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Data_Posix_Signal = $PS["Data.Posix.Signal"];
  var Effect_Exception_Unsafe = $PS["Effect.Exception.Unsafe"];
  var Pipe = (function () {
      function Pipe() {

      };
      Pipe.value = new Pipe();
      return Pipe;
  })();
  var Ignore = (function () {
      function Ignore() {

      };
      Ignore.value = new Ignore();
      return Ignore;
  })();
  var ShareStream = (function () {
      function ShareStream(value0) {
          this.value0 = value0;
      };
      ShareStream.create = function (value0) {
          return new ShareStream(value0);
      };
      return ShareStream;
  })();
  var ShareFD = (function () {
      function ShareFD(value0) {
          this.value0 = value0;
      };
      ShareFD.create = function (value0) {
          return new ShareFD(value0);
      };
      return ShareFD;
  })();
  var Normally = (function () {
      function Normally(value0) {
          this.value0 = value0;
      };
      Normally.create = function (value0) {
          return new Normally(value0);
      };
      return Normally;
  })();
  var BySignal = (function () {
      function BySignal(value0) {
          this.value0 = value0;
      };
      BySignal.create = function (value0) {
          return new BySignal(value0);
      };
      return BySignal;
  })();                                            
  var toActualStdIOBehaviour = function (b) {
      if (b instanceof Pipe) {
          return "pipe";
      };
      if (b instanceof Ignore) {
          return "ignore";
      };
      if (b instanceof ShareFD) {
          return b.value0;
      };
      if (b instanceof ShareStream) {
          return b.value0;
      };
      throw new Error("Failed pattern match at Node.ChildProcess (line 510, column 28 - line 514, column 33): " + [ b.constructor.name ]);
  };
  var toActualStdIOOptions = Data_Functor.map(Data_Functor.functorArray)((function () {
      var $29 = Data_Functor.map(Data_Maybe.functorMaybe)(toActualStdIOBehaviour);
      return function ($30) {
          return Data_Nullable.toNullable($29($30));
      };
  })());
  var spawn = function (cmd) {
      return function (args) {
          var convertOpts = function (opts) {
              return {
                  cwd: Data_Maybe.fromMaybe($foreign["undefined"])(opts.cwd),
                  stdio: toActualStdIOOptions(opts.stdio),
                  env: Data_Nullable.toNullable(opts.env),
                  detached: opts.detached,
                  uid: Data_Maybe.fromMaybe($foreign["undefined"])(opts.uid),
                  gid: Data_Maybe.fromMaybe($foreign["undefined"])(opts.gid)
              };
          };
          var $31 = $foreign.spawnImpl(cmd)(args);
          return function ($32) {
              return $31(convertOpts($32));
          };
      };
  }; 
  var runChildProcess = function (v) {
      return v;
  };
  var pipe = Data_Functor.map(Data_Functor.functorArray)(Data_Maybe.Just.create)([ Pipe.value, Pipe.value, Pipe.value ]);
  var mkExit = function (code) {
      return function (signal) {
          var fromSignal = Control_Bind.composeKleisli(Data_Maybe.bindMaybe)(Data_Nullable.toMaybe)((function () {
              var $34 = Data_Functor.map(Data_Maybe.functorMaybe)(BySignal.create);
              return function ($35) {
                  return $34(Data_Posix_Signal.fromString($35));
              };
          })());
          var fromCode = (function () {
              var $36 = Data_Functor.map(Data_Maybe.functorMaybe)(Normally.create);
              return function ($37) {
                  return $36(Data_Nullable.toMaybe($37));
              };
          })();
          var v = Control_Alt.alt(Data_Maybe.altMaybe)(fromCode(code))(fromSignal(signal));
          if (v instanceof Data_Maybe.Just) {
              return v.value0;
          };
          if (v instanceof Data_Maybe.Nothing) {
              return Effect_Exception_Unsafe.unsafeThrow("Node.ChildProcess.mkExit: Invalid arguments");
          };
          throw new Error("Failed pattern match at Node.ChildProcess (line 169, column 3 - line 171, column 73): " + [ v.constructor.name ]);
      };
  };
  var onClose = $foreign.mkOnClose(mkExit);
  var onExit = $foreign.mkOnExit(mkExit);
  var missingStream = function (str) {
      return "Node.ChildProcess: stream not available: " + (str + ("\x0aThis is probably " + ("because you passed something other than Pipe to the stdio option when " + "you spawned it.")));
  };
  var stderr = (function () {
      var $38 = $foreign.unsafeFromNullable(missingStream("stderr"));
      return function ($39) {
          return $38((function (v) {
              return v.stderr;
          })(runChildProcess($39)));
      };
  })();
  var stdout = (function () {
      var $42 = $foreign.unsafeFromNullable(missingStream("stdout"));
      return function ($43) {
          return $42((function (v) {
              return v.stdout;
          })(runChildProcess($43)));
      };
  })();
  var defaultSpawnOptions = {
      cwd: Data_Maybe.Nothing.value,
      stdio: pipe,
      env: Data_Maybe.Nothing.value,
      detached: false,
      uid: Data_Maybe.Nothing.value,
      gid: Data_Maybe.Nothing.value
  };
  exports["stdout"] = stdout;
  exports["stderr"] = stderr;
  exports["Normally"] = Normally;
  exports["BySignal"] = BySignal;
  exports["onExit"] = onExit;
  exports["onClose"] = onClose;
  exports["spawn"] = spawn;
  exports["defaultSpawnOptions"] = defaultSpawnOptions;
  exports["Pipe"] = Pipe;
  exports["Ignore"] = Ignore;
  exports["ShareStream"] = ShareStream;
  exports["ShareFD"] = ShareFD;
  exports["pipe"] = pipe;
  exports["onError"] = $foreign.onError;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Pscid.Process"] = $PS["Pscid.Process"] || {};
  var exports = $PS["Pscid.Process"];
  var Ansi_Codes = $PS["Ansi.Codes"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Console = $PS["Effect.Console"];
  var Effect_Ref = $PS["Effect.Ref"];
  var Node_ChildProcess = $PS["Node.ChildProcess"];
  var Node_Encoding = $PS["Node.Encoding"];
  var Node_Stream = $PS["Node.Stream"];
  var Pscid_Console = $PS["Pscid.Console"];
  var Pscid_Error = $PS["Pscid.Error"];                
  var execCommand = function (name) {
      return function (command) {
          return Pscid_Error.catchLog(name + " threw an exception")((function () {
              var cmd = Data_Maybe.fromJust()(Data_Array.uncons(Data_String_Common.split(" ")(command)));
              return function __do() {
                  var v = Effect_Ref["new"]("")();
                  Effect_Console.log("Running: \"" + (command + "\""))();
                  var v1 = Node_ChildProcess.spawn(cmd.head)(cmd.tail)(Node_ChildProcess.defaultSpawnOptions)();
                  var stout = Node_ChildProcess.stdout(v1);
                  var sterr = Node_ChildProcess.stderr(v1);
                  Node_Stream.onDataString(stout)(Node_Encoding.UTF8.value)(function (s) {
                      return Effect_Ref.modify_(function (v2) {
                          return v2 + s;
                      })(v);
                  })();
                  Node_Stream.onDataString(sterr)(Node_Encoding.UTF8.value)(function (s) {
                      return Effect_Ref.modify_(function (v2) {
                          return v2 + s;
                      })(v);
                  })();
                  return Node_ChildProcess.onExit(v1)(function (e) {
                      if (e instanceof Node_ChildProcess.Normally && e.value0 === 0) {
                          return Pscid_Console.logColored(Ansi_Codes.Green.value)(name + " successful!");
                      };
                      if (e instanceof Node_ChildProcess.Normally) {
                          return function __do() {
                              Control_Bind.bindFlipped(Effect.bindEffect)(Effect_Console.log)(Effect_Ref.read(v))();
                              return Pscid_Console.logColored(Ansi_Codes.Red.value)(name + (" errored with code: " + Data_Show.show(Data_Show.showInt)(e.value0)))();
                          };
                      };
                      if (e instanceof Node_ChildProcess.BySignal) {
                          return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
                      };
                      throw new Error("Failed pattern match at Pscid.Process (line 35, column 19 - line 40, column 34): " + [ e.constructor.name ]);
                  })();
              };
          })());
      };
  };
  exports["execCommand"] = execCommand;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafeRequireFS = require("fs");
})(PS["Node.FS.Internal"] = PS["Node.FS.Internal"] || {});
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Node.FS.Internal"] = $PS["Node.FS.Internal"] || {};
  var exports = $PS["Node.FS.Internal"];
  var $foreign = $PS["Node.FS.Internal"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var mkEffect = Unsafe_Coerce.unsafeCoerce;
  exports["mkEffect"] = mkEffect;
  exports["unsafeRequireFS"] = $foreign.unsafeRequireFS;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Node.FS.Sync"] = $PS["Node.FS.Sync"] || {};
  var exports = $PS["Node.FS.Sync"];
  var Data_Show = $PS["Data.Show"];
  var Node_Encoding = $PS["Node.Encoding"];
  var Node_FS_Internal = $PS["Node.FS.Internal"];          
  var fs = Node_FS_Internal.unsafeRequireFS;
  var readTextFile = function (encoding) {
      return function (file) {
          return Node_FS_Internal.mkEffect(function (v) {
              return fs.readFileSync(file, {
                  encoding: Data_Show.show(Node_Encoding.showEncoding)(encoding)
              });
          });
      };
  };
  var unlink = function (file) {
      return Node_FS_Internal.mkEffect(function (v) {
          return fs.unlinkSync(file);
      });
  };
  var writeTextFile = function (encoding) {
      return function (file) {
          return function (text) {
              return Node_FS_Internal.mkEffect(function (v) {
                  return fs.writeFileSync(file, text, {
                      encoding: Data_Show.show(Node_Encoding.showEncoding)(encoding)
                  });
              });
          };
      };
  };
  exports["unlink"] = unlink;
  exports["readTextFile"] = readTextFile;
  exports["writeTextFile"] = writeTextFile;
})(PS);
(function(exports) {
  "use strict";
  var path =require("path");         

  exports.concat = function (segments) {
    return path.join.apply(this, segments);
  };                         

  exports.isAbsolute = path.isAbsolute;
})(PS["Node.Path"] = PS["Node.Path"] || {});
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Node.Path"] = $PS["Node.Path"] || {};
  var exports = $PS["Node.Path"];
  var $foreign = $PS["Node.Path"];
  exports["concat"] = $foreign.concat;
  exports["isAbsolute"] = $foreign.isAbsolute;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Psa.Types"] = $PS["Psa.Types"] || {};
  var exports = $PS["Psa.Types"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Argonaut_Decode_Class = $PS["Data.Argonaut.Decode.Class"];
  var Data_Argonaut_Decode_Combinators = $PS["Data.Argonaut.Decode.Combinators"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Foreign_Object = $PS["Foreign.Object"];              
  var NoStats = (function () {
      function NoStats() {

      };
      NoStats.value = new NoStats();
      return NoStats;
  })();
  var Src = (function () {
      function Src(value0) {
          this.value0 = value0;
      };
      Src.create = function (value0) {
          return new Src(value0);
      };
      return Src;
  })();
  var Lib = (function () {
      function Lib(value0) {
          this.value0 = value0;
      };
      Lib.create = function (value0) {
          return new Lib(value0);
      };
      return Lib;
  })();
  var Unknown = (function () {
      function Unknown() {

      };
      Unknown.value = new Unknown();
      return Unknown;
  })();
  var parsePosition = Data_Maybe.maybe(Control_Applicative.pure(Data_Either.applicativeEither)(Data_Maybe.Nothing.value))(function (obj) {
      return Data_Functor.map(Data_Either.functorEither)(Data_Maybe.Just.create)(Control_Apply.apply(Data_Either.applyEither)(Control_Apply.apply(Data_Either.applyEither)(Control_Apply.apply(Data_Either.applyEither)(Data_Functor.map(Data_Either.functorEither)(function (v) {
          return function (v1) {
              return function (v2) {
                  return function (v3) {
                      return {
                          startLine: v,
                          startColumn: v1,
                          endLine: v2,
                          endColumn: v3
                      };
                  };
              };
          };
      })(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonInt)(obj)("startLine")))(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonInt)(obj)("startColumn")))(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonInt)(obj)("endLine")))(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonInt)(obj)("endColumn")));
  });
  var maybeProp = function (dictDecodeJson) {
      return function (obj) {
          return function (key) {
              return Data_Maybe.maybe(new Data_Either.Right(Data_Maybe.Nothing.value))(Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeJsonMaybe(dictDecodeJson)))(Foreign_Object.lookup(key)(obj));
          };
      };
  };
  var parseSuggestion = Data_Maybe.maybe(Control_Applicative.pure(Data_Either.applicativeEither)(Data_Maybe.Nothing.value))(function (obj) {
      return Data_Functor.map(Data_Either.functorEither)(Data_Maybe.Just.create)(Control_Apply.apply(Data_Either.applyEither)(Data_Functor.map(Data_Either.functorEither)(function (v) {
          return function (v1) {
              return {
                  replacement: v,
                  replaceRange: v1
              };
          };
      })(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonString)(obj)("replacement")))(Control_Bind.bind(Data_Either.bindEither)(maybeProp(Data_Argonaut_Decode_Class.decodeForeignObject(Data_Argonaut_Decode_Class.decodeJsonJson))(obj)("replaceRange"))(parsePosition)));
  });
  var parsePsaError = function (obj) {
      return Control_Apply.apply(Data_Either.applyEither)(Control_Apply.apply(Data_Either.applyEither)(Control_Apply.apply(Data_Either.applyEither)(Control_Apply.apply(Data_Either.applyEither)(Control_Apply.apply(Data_Either.applyEither)(Control_Apply.apply(Data_Either.applyEither)(Data_Functor.map(Data_Either.functorEither)(function (v) {
          return function (v1) {
              return function (v2) {
                  return function (v3) {
                      return function (v4) {
                          return function (v5) {
                              return function (v6) {
                                  return {
                                      moduleName: v,
                                      errorCode: v1,
                                      errorLink: v2,
                                      message: v3,
                                      filename: v4,
                                      position: v5,
                                      suggestion: v6
                                  };
                              };
                          };
                      };
                  };
              };
          };
      })(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonMaybe(Data_Argonaut_Decode_Class.decodeJsonString))(obj)("moduleName")))(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonString)(obj)("errorCode")))(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonString)(obj)("errorLink")))(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonString)(obj)("message")))(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonMaybe(Data_Argonaut_Decode_Class.decodeJsonString))(obj)("filename")))(Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonMaybe(Data_Argonaut_Decode_Class.decodeForeignObject(Data_Argonaut_Decode_Class.decodeJsonJson)))(obj)("position"))(parsePosition)))(Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonMaybe(Data_Argonaut_Decode_Class.decodeForeignObject(Data_Argonaut_Decode_Class.decodeJsonJson)))(obj)("suggestion"))(parseSuggestion));
  };
  var eqPsaPath = new Data_Eq.Eq(function (v) {
      return function (v1) {
          if (v instanceof Src && v1 instanceof Src) {
              return v.value0 === v1.value0;
          };
          if (v instanceof Lib && v1 instanceof Lib) {
              return v.value0 === v1.value0;
          };
          if (v instanceof Unknown && v1 instanceof Unknown) {
              return true;
          };
          return false;
      };
  });
  var ordPsaPath = new Data_Ord.Ord(function () {
      return eqPsaPath;
  }, function (v) {
      return function (v1) {
          if (v instanceof Src && v1 instanceof Src) {
              return Data_Ord.compare(Data_Ord.ordString)(v.value0)(v1.value0);
          };
          if (v instanceof Src && v1 instanceof Lib) {
              return Data_Ordering.GT.value;
          };
          if (v instanceof Src && v1 instanceof Unknown) {
              return Data_Ordering.GT.value;
          };
          if (v instanceof Lib && v1 instanceof Src) {
              return Data_Ordering.LT.value;
          };
          if (v instanceof Lib && v1 instanceof Lib) {
              return Data_Ord.compare(Data_Ord.ordString)(v.value0)(v1.value0);
          };
          if (v instanceof Lib && v1 instanceof Unknown) {
              return Data_Ordering.GT.value;
          };
          if (v instanceof Unknown && v1 instanceof Unknown) {
              return Data_Ordering.EQ.value;
          };
          if (v instanceof Unknown) {
              return Data_Ordering.LT.value;
          };
          throw new Error("Failed pattern match at Psa.Types (line 58, column 1 - line 66, column 31): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var compareByLocation = function (err1) {
      return function (err2) {
          var v = Data_Ord.compare(ordPsaPath)(err1.path)(err2.path);
          if (v instanceof Data_Ordering.EQ) {
              if (err1.position instanceof Data_Maybe.Nothing && err2.position instanceof Data_Maybe.Nothing) {
                  return Data_Ordering.EQ.value;
              };
              if (err1.position instanceof Data_Maybe.Nothing) {
                  return Data_Ordering.LT.value;
              };
              if (err2.position instanceof Data_Maybe.Nothing) {
                  return Data_Ordering.GT.value;
              };
              if (err1.position instanceof Data_Maybe.Just && err2.position instanceof Data_Maybe.Just) {
                  return Data_Ord.compare(Data_Tuple.ordTuple(Data_Ord.ordInt)(Data_Ord.ordInt))(new Data_Tuple.Tuple(err1.position.value0.startLine, err1.position.value0.startColumn))(new Data_Tuple.Tuple(err2.position.value0.startLine, err2.position.value0.startColumn));
              };
              throw new Error("Failed pattern match at Psa.Types (line 120, column 7 - line 126, column 52): " + [ err1.position.constructor.name, err2.position.constructor.name ]);
          };
          return v;
      };
  };
  exports["NoStats"] = NoStats;
  exports["Src"] = Src;
  exports["Lib"] = Lib;
  exports["Unknown"] = Unknown;
  exports["parsePsaError"] = parsePsaError;
  exports["compareByLocation"] = compareByLocation;
  exports["eqPsaPath"] = eqPsaPath;
  exports["ordPsaPath"] = ordPsaPath;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Psa.Output"] = $PS["Psa.Output"] || {};
  var exports = $PS["Psa.Output"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Array = $PS["Data.Array"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Set = $PS["Data.Set"];
  var Data_String_CodePoints = $PS["Data.String.CodePoints"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Foreign_Object = $PS["Foreign.Object"];
  var Node_Path = $PS["Node.Path"];
  var Psa_Types = $PS["Psa.Types"];                
  var $$Error = (function () {
      function $$Error() {

      };
      $$Error.value = new $$Error();
      return $$Error;
  })();
  var Warning = (function () {
      function Warning() {

      };
      Warning.value = new Warning();
      return Warning;
  })();
  var trimPosition = function ($copy_lines) {
      return function ($copy_pos) {
          var $tco_var_lines = $copy_lines;
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(lines, pos) {
              var isPunc = Data_HeytingAlgebra.disj(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraBoolean))(function (v) {
                  return Data_Eq.eq(Data_String_CodePoints.eqCodePoint)(v)(Data_String_CodePoints.codePointFromChar(" "));
              })(function (v) {
                  return Data_Eq.eq(Data_String_CodePoints.eqCodePoint)(v)(Data_String_CodePoints.codePointFromChar(","));
              });
              var trimComment = function (col) {
                  return function (l) {
                      var v = Data_String_CodePoints.indexOf("--")(l);
                      if (v instanceof Data_Maybe.Just && v.value0 === 0) {
                          return Data_Maybe.Nothing.value;
                      };
                      if (v instanceof Data_Maybe.Just && v.value0 < (col - 1 | 0)) {
                          return trimCol(v.value0 + 1 | 0)(l);
                      };
                      return new Data_Maybe.Just(col);
                  };
              };
              var trimCol = function ($copy_col) {
                  return function ($copy_l) {
                      var $tco_var_col = $copy_col;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(col, l) {
                          var v = Data_String_CodePoints.codePointAt(col - 2 | 0)(l);
                          if (v instanceof Data_Maybe.Just && isPunc(v.value0)) {
                              $tco_var_col = col - 1 | 0;
                              $copy_l = l;
                              return;
                          };
                          if (v instanceof Data_Maybe.Just) {
                              $tco_done = true;
                              return trimComment(col)(l);
                          };
                          $tco_done = true;
                          return Data_Maybe.Nothing.value;
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_col, $copy_l);
                      };
                      return $tco_result;
                  };
              };
              var trimPos = function ($copy_v) {
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(v) {
                      if (v.col <= 1) {
                          var v1 = Data_Array.index(lines)((v.row - pos.startLine | 0) - 1 | 0);
                          if (v1 instanceof Data_Maybe.Just) {
                              $copy_v = {
                                  row: v.row - 1 | 0,
                                  col: Data_String_CodePoints.length(v1.value0) + 1 | 0
                              };
                              return;
                          };
                          $tco_done = true;
                          return Data_Maybe.Nothing.value;
                      };
                      if (Data_Boolean.otherwise) {
                          var v1 = Data_Array.index(lines)(v.row - pos.startLine | 0);
                          if (v1 instanceof Data_Maybe.Just) {
                              var v2 = trimCol(v.col)(v1.value0);
                              if (v2 instanceof Data_Maybe.Just) {
                                  $tco_done = true;
                                  return new Data_Maybe.Just({
                                      row: v.row,
                                      col: v2.value0
                                  });
                              };
                              if (v2 instanceof Data_Maybe.Nothing) {
                                  $copy_v = {
                                      row: v.row,
                                      col: 1
                                  };
                                  return;
                              };
                              throw new Error("Failed pattern match at Psa.Output (line 225, column 11 - line 227, column 49): " + [ v2.constructor.name ]);
                          };
                          $tco_done = true;
                          return Data_Maybe.Nothing.value;
                      };
                      throw new Error("Failed pattern match at Psa.Output (line 216, column 3 - line 229, column 26): " + [ v.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($copy_v);
                  };
                  return $tco_result;
              };
              if (lines.length === 0) {
                  $tco_done = true;
                  return {
                      startLine: pos.startLine,
                      startColumn: pos.startColumn,
                      endLine: pos.startLine,
                      endColumn: pos.startColumn
                  };
              };
              if (lines.length === 1) {
                  var v = trimCol(pos.endColumn)(lines[0]);
                  if (v instanceof Data_Maybe.Just) {
                      $tco_done = true;
                      return {
                          startLine: pos.startLine,
                          startColumn: pos.startColumn,
                          endLine: pos.startLine,
                          endColumn: v.value0
                      };
                  };
                  if (v instanceof Data_Maybe.Nothing) {
                      $tco_done = true;
                      return {
                          startLine: pos.startLine,
                          startColumn: pos.startColumn,
                          endLine: pos.startLine,
                          endColumn: pos.startColumn
                      };
                  };
                  throw new Error("Failed pattern match at Psa.Output (line 204, column 7 - line 206, column 81): " + [ v.constructor.name ]);
              };
              var v = trimPos({
                  row: pos.endLine,
                  col: pos.endColumn
              });
              if (v instanceof Data_Maybe.Just) {
                  $tco_done = true;
                  return {
                      startLine: pos.startLine,
                      startColumn: pos.startColumn,
                      endLine: v.value0.row,
                      endColumn: v.value0.col
                  };
              };
              if (v instanceof Data_Maybe.Nothing) {
                  $tco_var_lines = [  ];
                  $copy_pos = pos;
                  return;
              };
              throw new Error("Failed pattern match at Psa.Output (line 209, column 7 - line 211, column 49): " + [ v.constructor.name ]);
          };
          while (!$tco_done) {
              $tco_result = $tco_loop($tco_var_lines, $copy_pos);
          };
          return $tco_result;
      };
  };
  var trimMessage = (function () {
      var dedent = function (v) {
          return function (l) {
              if (l === "") {
                  return {
                      lines: Data_Array.snoc(v.lines)(l),
                      indent: v.indent
                  };
              };
              if (Data_Boolean.otherwise) {
                  var indent$prime = Data_String_CodePoints.length(Data_String_CodePoints.takeWhile(function (v1) {
                      return Data_Eq.eq(Data_String_CodePoints.eqCodePoint)(v1)(Data_String_CodePoints.codePointFromChar(" "));
                  })(l));
                  var $63 = indent$prime < v.indent;
                  if ($63) {
                      return {
                          lines: Data_Array.snoc(v.lines)(Data_String_CodePoints.drop(indent$prime)(l)),
                          indent: indent$prime
                      };
                  };
                  return {
                      lines: Data_Array.snoc(v.lines)(Data_String_CodePoints.drop(v.indent)(l)),
                      indent: v.indent
                  };
              };
              throw new Error("Failed pattern match at Psa.Output (line 258, column 3 - line 264, column 69): " + [ v.constructor.name, l.constructor.name ]);
          };
      };
      var collapse = function (lines) {
          return function (l) {
              var v = Data_Array.last(lines);
              if (v instanceof Data_Maybe.Just && (v.value0 === "" && l === "")) {
                  return lines;
              };
              return Data_Array.snoc(lines)(l);
          };
      };
      var $118 = Data_String_Common.joinWith("\x0a");
      var $119 = Data_Foldable.foldl(Data_Foldable.foldableArray)(collapse)([  ]);
      var $120 = Data_Foldable.foldl(Data_Foldable.foldableArray)(dedent)({
          lines: [  ],
          indent: Data_Bounded.top(Data_Bounded.boundedInt)
      });
      var $121 = Data_String_Common.split("\x0a");
      return function ($122) {
          return Data_String_Common.trim($118($119((function (v) {
              return v.lines;
          })($120($121($122))))));
      };
  })();
  var onTag = function (f) {
      return function (g) {
          return function (v) {
              return function (x) {
                  if (v instanceof $$Error) {
                      return f(x);
                  };
                  if (v instanceof Warning) {
                      return g(x);
                  };
                  throw new Error("Failed pattern match at Psa.Output (line 169, column 1 - line 169, column 64): " + [ f.constructor.name, g.constructor.name, v.constructor.name, x.constructor.name ]);
              };
          };
      };
  };
  var onPath = function (f) {
      return function (g) {
          return function (v) {
              return function (x) {
                  if (v instanceof Psa_Types.Src) {
                      return f(x);
                  };
                  if (v instanceof Psa_Types.Lib) {
                      return g(x);
                  };
                  return x;
              };
          };
      };
  };
  var updateStats = function (tag) {
      return function (path) {
          return function (code) {
              return function (printed) {
                  return function (s) {
                      var bump = function (v) {
                          return new Data_Tuple.Tuple((function () {
                              if (printed) {
                                  return v.value0 + 1 | 0;
                              };
                              return v.value0;
                          })(), v.value1 + 1 | 0);
                      };
                      var alterStat = function (v) {
                          if (v instanceof Data_Maybe.Nothing) {
                              return new Data_Maybe.Just(bump(new Data_Tuple.Tuple(0, 0)));
                          };
                          if (v instanceof Data_Maybe.Just) {
                              return new Data_Maybe.Just(bump(v.value0));
                          };
                          throw new Error("Failed pattern match at Psa.Output (line 147, column 3 - line 147, column 47): " + [ v.constructor.name ]);
                      };
                      var bumpCode = Foreign_Object.alter(alterStat)(code);
                      return {
                          allWarnings: onTag(Control_Category.identity(Control_Category.categoryFn))(bumpCode)(tag)(s.allWarnings),
                          allErrors: onTag(bumpCode)(Control_Category.identity(Control_Category.categoryFn))(tag)(s.allErrors),
                          srcWarnings: onTag(Control_Category.identity(Control_Category.categoryFn))(onPath(bumpCode)(Control_Category.identity(Control_Category.categoryFn))(path))(tag)(s.srcWarnings),
                          srcErrors: onTag(onPath(bumpCode)(Control_Category.identity(Control_Category.categoryFn))(path))(Control_Category.identity(Control_Category.categoryFn))(tag)(s.srcErrors),
                          libWarnings: onTag(Control_Category.identity(Control_Category.categoryFn))(onPath(Control_Category.identity(Control_Category.categoryFn))(bumpCode)(path))(tag)(s.libWarnings),
                          libErrors: onTag(onPath(Control_Category.identity(Control_Category.categoryFn))(bumpCode)(path))(Control_Category.identity(Control_Category.categoryFn))(tag)(s.libErrors)
                      };
                  };
              };
          };
      };
  };
  var isSrc = function (v) {
      if (v instanceof Psa_Types.Src) {
          return true;
      };
      return false;
  };
  var isLib = function (v) {
      if (v instanceof Psa_Types.Lib) {
          return true;
      };
      return false;
  };
  var shouldShowError = function (v) {
      return function (v1) {
          return function (v2) {
              return function (v3) {
                  if (v1 instanceof $$Error) {
                      return true;
                  };
                  return !v.censorWarnings && (!(v.censorSrc && isSrc(v2) || v.censorLib && isLib(v2)) && ((Data_Set.isEmpty(v.filterCodes) || Data_Set.member(Data_Ord.ordString)(v3)(v.filterCodes)) && (Data_Set.isEmpty(v.censorCodes) || !Data_Set.member(Data_Ord.ordString)(v3)(v.censorCodes))));
              };
          };
      };
  };
  var initialStats = {
      allWarnings: Foreign_Object.empty,
      allErrors: Foreign_Object.empty,
      srcWarnings: Foreign_Object.empty,
      srcErrors: Foreign_Object.empty,
      libWarnings: Foreign_Object.empty,
      libErrors: Foreign_Object.empty
  };
  var errorPath = function (libDirs) {
      return function (path) {
          return function ($$short) {
              var startsWith = function (s$prime) {
                  return function (s) {
                      var v = Data_String_CodePoints.indexOf(s)(s$prime);
                      if (v instanceof Data_Maybe.Just && v.value0 === 0) {
                          return true;
                      };
                      return false;
                  };
              };
              var $105 = Data_Foldable.any(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(function (dir) {
                  return startsWith(path)(dir);
              })(libDirs);
              if ($105) {
                  return new Psa_Types.Lib($$short);
              };
              return new Psa_Types.Src($$short);
          };
      };
  };
  var annotatedError = function (path) {
      return function (lines) {
          return function (error) {
              var position = Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(trimPosition)(lines))(error.position);
              var source = Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(function (p) {
                  return Data_Array.take((p.endLine - p.startLine | 0) + 1 | 0);
              })(position))(lines);
              var message = trimMessage(error.message);
              return {
                  path: path,
                  position: position,
                  message: message,
                  source: source,
                  error: error
              };
          };
      };
  };
  var output = function (dictMonad) {
      return function (loadLines) {
          return function (options) {
              return function (result) {
                  var pathOf = function (x) {
                      if (x.filename instanceof Data_Maybe.Just && x.filename.value0 !== "") {
                          var path = (function () {
                              if (Node_Path.isAbsolute(x.filename.value0)) {
                                  return x.filename.value0;
                              };
                              if (Data_Boolean.otherwise) {
                                  return Node_Path.concat([ options.cwd, x.filename.value0 ]);
                              };
                              throw new Error("Failed pattern match at Psa.Output (line 85, column 11 - line 87, column 57): " + [  ]);
                          })();
                          return new Data_Tuple.Tuple(errorPath(options.libDirs)(path)(x.filename.value0), x);
                      };
                      return new Data_Tuple.Tuple(Psa_Types.Unknown.value, x);
                  };
                  var onError = function (tag) {
                      return function (state) {
                          return function (v) {
                              var update = function (log) {
                                  var printed = !Data_Array["null"](log);
                                  var tag$prime = (function () {
                                      var $111 = printed && (options.strict && isSrc(v.value0));
                                      if ($111) {
                                          return $$Error.value;
                                      };
                                      return tag;
                                  })();
                                  var stats = updateStats(tag$prime)(v.value0)(v.value1.errorCode)(printed)(state.stats);
                                  return Control_Applicative.pure(dictMonad.Applicative0())(onTag(function (v1) {
                                      return {
                                          stats: stats,
                                          errors: Data_Semigroup.append(Data_Semigroup.semigroupArray)(state.errors)(log),
                                          warnings: v1.warnings
                                      };
                                  })(function (v1) {
                                      return {
                                          stats: stats,
                                          errors: v1.errors,
                                          warnings: Data_Semigroup.append(Data_Semigroup.semigroupArray)(state.warnings)(log)
                                      };
                                  })(tag$prime)(state));
                              };
                              var $112 = shouldShowError(options)(tag)(v.value0)(v.value1.errorCode);
                              if ($112) {
                                  return Control_Bind.bind(dictMonad.Bind1())(Data_Maybe.fromMaybe(Control_Applicative.pure(dictMonad.Applicative0())(Data_Maybe.Nothing.value))(Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(loadLines)(v.value1.filename))(v.value1.position)))(function (v1) {
                                      return update([ annotatedError(v.value0)(v1)(v.value1) ]);
                                  });
                              };
                              return update([  ]);
                          };
                      };
                  };
                  var result$prime = {
                      warnings: Data_Functor.map(Data_Functor.functorArray)(pathOf)(result.warnings),
                      errors: Data_Functor.map(Data_Functor.functorArray)(pathOf)(result.errors)
                  };
                  var initialState = {
                      warnings: [  ],
                      errors: [  ],
                      stats: initialStats
                  };
                  return Control_Bind.bind(dictMonad.Bind1())(Data_Array.foldM(dictMonad)(onError(Warning.value))(initialState)(result$prime.warnings))(function (v) {
                      return Control_Bind.bind(dictMonad.Bind1())(Data_Array.foldM(dictMonad)(onError($$Error.value))(v)(result$prime.errors))(function (v1) {
                          return Control_Applicative.pure(dictMonad.Applicative0())({
                              warnings: Data_Array.sortBy(Psa_Types.compareByLocation)(v1.warnings),
                              errors: Data_Array.sortBy(Psa_Types.compareByLocation)(v1.errors),
                              stats: v1.stats
                          });
                      });
                  });
              };
          };
      };
  };
  exports["output"] = output;
  exports["annotatedError"] = annotatedError;
  exports["trimPosition"] = trimPosition;
  exports["trimMessage"] = trimMessage;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Psa.Util"] = $PS["Psa.Util"] || {};
  var exports = $PS["Psa.Util"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_String_CodePoints = $PS["Data.String.CodePoints"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];                
  var replicate = function (dictMonoid) {
      return function (n) {
          return function (m) {
              var go = function ($copy_i) {
                  return function ($copy_x) {
                      var $tco_var_i = $copy_i;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(i, x) {
                          if (i <= 0) {
                              $tco_done = true;
                              return x;
                          };
                          if (Data_Boolean.otherwise) {
                              $tco_var_i = i - 1 | 0;
                              $copy_x = Data_Semigroup.append(dictMonoid.Semigroup0())(x)(m);
                              return;
                          };
                          throw new Error("Failed pattern match at Psa.Util (line 10, column 3 - line 12, column 38): " + [ i.constructor.name, x.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_i, $copy_x);
                      };
                      return $tco_result;
                  };
              };
              return go(n)(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var padLeft = function (width) {
      return function (str) {
          return replicate(Data_Monoid.monoidString)(width - Data_String_CodePoints.length(str) | 0)(" ") + str;
      };
  };
  var iter_ = function (dictFoldable) {
      return function (dictApplicative) {
          return function (xs) {
              return function (f) {
                  var go = function (v) {
                      return function (b) {
                          return new Data_Tuple.Tuple(v.value0 + 1 | 0, Control_Apply.applyFirst(dictApplicative.Apply0())(v.value1)(f(v.value0)(b)));
                      };
                  };
                  return Data_Tuple.snd(Data_Foldable.foldl(dictFoldable)(go)(new Data_Tuple.Tuple(0, Control_Applicative.pure(dictApplicative)(Data_Unit.unit)))(xs));
              };
          };
      };
  };
  exports["replicate"] = replicate;
  exports["padLeft"] = padLeft;
  exports["iter_"] = iter_;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Psa.Printer"] = $PS["Psa.Printer"] || {};
  var exports = $PS["Psa.Printer"];
  var Ansi_Codes = $PS["Ansi.Codes"];
  var Ansi_Output = $PS["Ansi.Output"];
  var Data_Array = $PS["Data.Array"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List_NonEmpty = $PS["Data.List.NonEmpty"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_CodePoints = $PS["Data.String.CodePoints"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Psa_Util = $PS["Psa.Util"];                
  var Line = (function () {
      function Line(value0) {
          this.value0 = value0;
      };
      Line.create = function (value0) {
          return new Line(value0);
      };
      return Line;
  })();
  var Indent = (function () {
      function Indent(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Indent.create = function (value0) {
          return function (value1) {
              return new Indent(value0, value1);
          };
      };
      return Indent;
  })();
  var Para = (function () {
      function Para(value0) {
          this.value0 = value0;
      };
      Para.create = function (value0) {
          return new Para(value0);
      };
      return Para;
  })();
  var Plain = (function () {
      function Plain(value0) {
          this.value0 = value0;
      };
      Plain.create = function (value0) {
          return new Plain(value0);
      };
      return Plain;
  })();
  var Style = (function () {
      function Style(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Style.create = function (value0) {
          return function (value1) {
              return new Style(value0, value1);
          };
      };
      return Style;
  })();
  var style = Style.create;
  var semigroupRow = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          if (v instanceof Line && v1 instanceof Para) {
              return new Para(Data_Array.cons(v)(v1.value0));
          };
          if (v instanceof Indent && v1 instanceof Para) {
              return new Para(Data_Array.cons(v)(v1.value0));
          };
          if (v instanceof Para && v1 instanceof Line) {
              return new Para(Data_Array.snoc(v.value0)(v1));
          };
          if (v instanceof Para && v1 instanceof Indent) {
              return new Para(Data_Array.snoc(v.value0)(v1));
          };
          if (v instanceof Para && v1 instanceof Para) {
              return new Para(Data_Semigroup.append(Data_Semigroup.semigroupArray)(v.value0)(v1.value0));
          };
          return new Para([ v, v1 ]);
      };
  });
  var renderRow = function (f) {
      var go = function (ind) {
          return function (v) {
              if (v instanceof Line) {
                  return ind + f(v.value0);
              };
              if (v instanceof Para) {
                  return Data_String_Common.joinWith("\x0a")(Data_Functor.map(Data_Functor.functorArray)(go(ind))(v.value0));
              };
              if (v instanceof Indent) {
                  return go(ind + f(v.value0))(v.value1);
              };
              throw new Error("Failed pattern match at Psa.Printer (line 75, column 3 - line 75, column 36): " + [ ind.constructor.name, v.constructor.name ]);
          };
      };
      return go("");
  };
  var renderAnsi = function (v) {
      return function (v1) {
          if (!v && v1 instanceof Plain) {
              return v1.value0;
          };
          if (!v && v1 instanceof Style) {
              return v1.value1;
          };
          if (v && v1 instanceof Plain) {
              return v1.value0;
          };
          if (v && v1 instanceof Style) {
              return Ansi_Codes.escapeCodeToString(new Ansi_Codes.Graphics(v1.value0)) + (v1.value1 + Ansi_Codes.escapeCodeToString(new Ansi_Codes.Graphics(Data_List_NonEmpty.singleton(Ansi_Codes.Reset.value))));
          };
          throw new Error("Failed pattern match at Psa.Printer (line 79, column 1 - line 79, column 44): " + [ v.constructor.name, v1.constructor.name ]);
      };
  };
  var plain = Plain.create;
  var renderErrorRange = function (start) {
      return function (len) {
          return [ plain(Psa_Util.replicate(Data_Monoid.monoidString)(start - 1 | 0)(" ")), style(Ansi_Output.foreground(Ansi_Codes.Red.value))(Psa_Util.replicate(Data_Monoid.monoidString)(len)("^")) ];
      };
  };
  var renderErrorTick = function (start) {
      return function ($$char) {
          return [ plain(Psa_Util.replicate(Data_Monoid.monoidString)(start - 1 | 0)(" ")), style(Ansi_Output.foreground(Ansi_Codes.Red.value))($$char) ];
      };
  };
  var sourceLine = function (gutter) {
      return function (sep) {
          return function (num) {
              return function (code) {
                  return [ style(Ansi_Output.dim)(Psa_Util.padLeft(gutter)(Data_Show.show(Data_Show.showInt)(num)) + sep), plain(code) ];
              };
          };
      };
  };
  var para = Para.create;
  var monoidRow = new Data_Monoid.Monoid(function () {
      return semigroupRow;
  }, new Para([  ]));
  var line = Line.create;
  var renderAnnotation = function (offset) {
      return function (pos) {
          return function (lines) {
              return para((function () {
                  if (lines.length === 1) {
                      return [ line(lines[0]), line(renderErrorRange(pos.startColumn + offset | 0)(pos.endColumn - pos.startColumn | 0)) ];
                  };
                  return [ line(renderErrorTick(pos.startColumn + offset | 0)("v")), para(Data_Functor.map(Data_Functor.functorArray)(line)(lines)), line(renderErrorTick((pos.endColumn + offset | 0) - 1 | 0)("^")) ];
              })());
          };
      };
  };
  var renderSource = function (pos) {
      return function (lines) {
          var lineNums = Data_Array.range(pos.startLine)(pos.endLine);
          var gutter = Data_String_CodePoints.length(Data_Show.show(Data_Show.showInt)(pos.endLine));
          var source = Data_Functor.map(Data_Functor.functorArray)(Data_Tuple.uncurry(sourceLine(gutter)("  ")))(Data_Array.zip(lineNums)(lines));
          var source$prime = (function () {
              var $36 = Data_Array.length(source) > 7;
              if ($36) {
                  return Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.take(3)(source))(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ [ plain(Psa_Util.replicate(Data_Monoid.monoidString)(gutter + 2 | 0)(" ")), style(Ansi_Output.dim)("...") ] ])(Data_Array.drop(Data_Array.length(source) - 3 | 0)(source)));
              };
              return source;
          })();
          return renderAnnotation(gutter + 2 | 0)(pos)(source$prime);
      };
  };
  var indent = Indent.create;
  exports["line"] = line;
  exports["indent"] = indent;
  exports["para"] = para;
  exports["plain"] = plain;
  exports["style"] = style;
  exports["renderRow"] = renderRow;
  exports["renderAnsi"] = renderAnsi;
  exports["renderSource"] = renderSource;
  exports["semigroupRow"] = semigroupRow;
  exports["monoidRow"] = monoidRow;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Psa.Printer.Default"] = $PS["Psa.Printer.Default"] || {};
  var exports = $PS["Psa.Printer.Default"];
  var Ansi_Codes = $PS["Ansi.Codes"];
  var Ansi_Output = $PS["Ansi.Output"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Array = $PS["Data.Array"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Psa_Printer = $PS["Psa.Printer"];
  var Psa_Types = $PS["Psa.Types"];              
  var toLines = (function () {
      var $38 = Data_Functor.map(Data_Functor.functorArray)(function ($41) {
          return Psa_Printer.line(Data_Array.singleton(Psa_Printer.plain($41)));
      });
      var $39 = Data_String_Common.split("\x0a");
      return function ($40) {
          return Psa_Printer.para($38($39($40)));
      };
  })();
  var renderStatus = function (gfx) {
      return function (total) {
          return function (index) {
              return function (code) {
                  return Psa_Printer.style(gfx)("[" + (Data_Show.show(Data_Show.showInt)(index) + ("/" + (Data_Show.show(Data_Show.showInt)(total) + (" " + (code + "]"))))));
              };
          };
      };
  };
  var renderPosition = function (pos) {
      return [ Psa_Printer.style(Ansi_Output.dim)(":"), Psa_Printer.plain(Data_Show.show(Data_Show.showInt)(pos.startLine)), Psa_Printer.style(Ansi_Output.dim)(":"), Psa_Printer.plain(Data_Show.show(Data_Show.showInt)(pos.startColumn)) ];
  };
  var renderModuleName = function (v) {
      if (v instanceof Data_Maybe.Nothing) {
          return Psa_Printer.style(Ansi_Output.dim)("(unknown module)");
      };
      if (v instanceof Data_Maybe.Just) {
          return Psa_Printer.plain(v.value0);
      };
      throw new Error("Failed pattern match at Psa.Printer.Default (line 82, column 1 - line 82, column 45): " + [ v.constructor.name ]);
  };
  var renderPath = function (v) {
      return function (v1) {
          if (v instanceof Psa_Types.Src) {
              return Psa_Printer.plain(v.value0);
          };
          if (v instanceof Psa_Types.Lib) {
              return Psa_Printer.plain(v.value0);
          };
          return renderModuleName(v1);
      };
  };
  var indented = Psa_Printer.indent([ Psa_Printer.plain("  ") ]);
  var emptyLine = Psa_Printer.line([ Psa_Printer.plain("") ]);
  var renderSource$prime = function (pos) {
      return function (lines) {
          return Data_Semigroup.append(Psa_Printer.semigroupRow)(Psa_Printer.renderSource(pos)(lines))(emptyLine);
      };
  };
  var renderWrapper = function (gfx) {
      return function (total) {
          return function (index) {
              return function (v) {
                  return Psa_Printer.para([ Psa_Printer.line(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ renderStatus(gfx)(total)(index)(v.error.errorCode), Psa_Printer.plain(" "), renderPath(v.path)(v.error.moduleName) ])(Data_Maybe.fromMaybe(Data_Monoid.mempty(Data_Monoid.monoidArray))(Data_Functor.map(Data_Maybe.functorMaybe)(renderPosition)(v.position)))), emptyLine, indented(Data_Semigroup.append(Psa_Printer.semigroupRow)(Data_Maybe.fromMaybe(Data_Monoid.mempty(Psa_Printer.monoidRow))(Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(renderSource$prime)(v.position))(v.source)))(toLines(v.message))) ]);
              };
          };
      };
  };
  var renderError = renderWrapper(Ansi_Output.foreground(Ansi_Codes.Red.value));
  var renderWarning = renderWrapper(Ansi_Output.foreground(Ansi_Codes.Yellow.value));
  exports["renderWarning"] = renderWarning;
  exports["renderError"] = renderError;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Pscid.Psa"] = $PS["Pscid.Psa"] || {};
  var exports = $PS["Pscid.Psa"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Argonaut_Decode_Class = $PS["Data.Argonaut.Decode.Class"];
  var Data_Array = $PS["Data.Array"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Set = $PS["Data.Set"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Effect = $PS["Effect"];
  var Effect_Console = $PS["Effect.Console"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Node_Encoding = $PS["Node.Encoding"];
  var Node_FS_Sync = $PS["Node.FS.Sync"];
  var Psa_Output = $PS["Psa.Output"];
  var Psa_Printer = $PS["Psa.Printer"];
  var Psa_Printer_Default = $PS["Psa.Printer.Default"];
  var Psa_Types = $PS["Psa.Types"];
  var Psa_Util = $PS["Psa.Util"];                
  var wrapError = function (b) {
      return function (e) {
          if (b) {
              return {
                  warnings: [  ],
                  errors: [ e ]
              };
          };
          return {
              warnings: [ e ],
              errors: [  ]
          };
      };
  };
  var print = function (successMessage) {
      return function (options) {
          return function (v) {
              var toString = Psa_Printer.renderRow((function () {
                  var $11 = Data_String_Common.joinWith("");
                  var $12 = Data_Functor.map(Data_Functor.functorArray)(Psa_Printer.renderAnsi(options.ansi));
                  return function ($13) {
                      return $11($12($13));
                  };
              })());
              return function __do() {
                  Psa_Util.iter_(Data_Foldable.foldableArray)(Effect.applicativeEffect)(v.warnings)(function (i) {
                      return function (warning) {
                          return function __do() {
                              Effect_Console.error(toString(Psa_Printer_Default.renderWarning(1)(1)(warning)))();
                              return Effect_Console.error("")();
                          };
                      };
                  })();
                  Psa_Util.iter_(Data_Foldable.foldableArray)(Effect.applicativeEffect)(v.errors)(function (i) {
                      return function (error) {
                          return function __do() {
                              Effect_Console.error(toString(Psa_Printer_Default.renderError(1)(1)(error)))();
                              return Effect_Console.error("")();
                          };
                      };
                  })();
                  return Control_Applicative.when(Effect.applicativeEffect)(Data_Array["null"](v.warnings) && Data_Array["null"](v.errors))(Effect_Console.error(successMessage))();
              };
          };
      };
  };
  var parseErrors = function (j) {
      return Control_Bind.bindFlipped(Data_Either.bindEither)(Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Either.applicativeEither)(Psa_Types.parsePsaError))(Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeArray(Data_Argonaut_Decode_Class.decodeForeignObject(Data_Argonaut_Decode_Class.decodeJsonJson)))(j));
  };
  var loadLines = function (filename) {
      return function (pos) {
          return function __do() {
              var v = Data_Functor.map(Effect.functorEffect)(Data_String_Common.split("\x0a"))(Node_FS_Sync.readTextFile(Node_Encoding.UTF8.value)(filename))();
              var source = Data_Array.slice(pos.startLine - 1 | 0)(pos.endLine)(v);
              return new Data_Maybe.Just(source);
          };
      };
  };
  var filterWarnings = function (ignored) {
      return function (errors) {
          return Data_Array.filter(function (e) {
              return Data_Foldable.notElem(Data_Foldable.foldableArray)(Data_Eq.eqString)(e.errorCode)(ignored);
          })(errors);
      };
  };
  var emptyResult = {
      warnings: [  ],
      errors: [  ]
  };
  var defaultOptions = {
      ansi: true,
      censorWarnings: false,
      censorLib: false,
      censorSrc: false,
      censorCodes: Data_Set.empty,
      filterCodes: Data_Set.empty,
      libDirs: [  ],
      strict: false,
      cwd: "",
      statVerbosity: Psa_Types.NoStats.value
  };
  var psaPrinter = function (successMessage) {
      return function (isError) {
          return function (errs) {
              var result = Data_Maybe.fromMaybe(emptyResult)(Data_Functor.map(Data_Maybe.functorMaybe)(wrapError(isError))(Data_Array.head(errs)));
              return Effect_Exception.catchException(Data_Function["const"](Effect_Console.error("An error inside psaPrinter")))(function __do() {
                  var v = Psa_Output.output(Effect.monadEffect)(loadLines)(defaultOptions)(result)();
                  return print(successMessage)(defaultOptions)(v)();
              });
          };
      };
  };
  exports["parseErrors"] = parseErrors;
  exports["psaPrinter"] = psaPrinter;
  exports["filterWarnings"] = filterWarnings;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["PscIde.Server"] = $PS["PscIde.Server"] || {};
  var exports = $PS["PscIde.Server"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Parallel_Class = $PS["Control.Parallel.Class"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Effect_Random = $PS["Effect.Random"];
  var Global = $PS["Global"];
  var Node_ChildProcess = $PS["Node.ChildProcess"];
  var Node_Encoding = $PS["Node.Encoding"];
  var Node_FS_Sync = $PS["Node.FS.Sync"];
  var Node_Path = $PS["Node.Path"];
  var PscIde = $PS["PscIde"];                
  var Started = (function () {
      function Started(value0) {
          this.value0 = value0;
      };
      Started.create = function (value0) {
          return new Started(value0);
      };
      return Started;
  })();
  var Closed = (function () {
      function Closed() {

      };
      Closed.value = new Closed();
      return Closed;
  })();
  var StartError = (function () {
      function StartError(value0) {
          this.value0 = value0;
      };
      StartError.create = function (value0) {
          return new StartError(value0);
      };
      return StartError;
  })();
  var All = (function () {
      function All() {

      };
      All.value = new All();
      return All;
  })();
  var None = (function () {
      function None() {

      };
      None.value = new None();
      return None;
  })();
  var Debug = (function () {
      function Debug() {

      };
      Debug.value = new Debug();
      return Debug;
  })();
  var Perf = (function () {
      function Perf() {

      };
      Perf.value = new Perf();
      return Perf;
  })();
  var stopServer = function (port) {
      return Data_Functor["void"](Effect_Aff.functorAff)(PscIde.quit(port));
  };
  var portFilePath = function (cwd) {
      return Node_Path.concat([ cwd, ".psc-ide-port" ]);
  };
  var savePort = function (port) {
      return function (cwd) {
          return Node_FS_Sync.writeTextFile(Node_Encoding.UTF8.value)(portFilePath(cwd))(Data_Show.show(Data_Show.showInt)(port));
      };
  };
  var pickFreshPort = Effect_Random.randomInt(15000)(16000);
  var logParam = function (v) {
      if (v instanceof All) {
          return "all";
      };
      if (v instanceof None) {
          return "none";
      };
      if (v instanceof Debug) {
          return "debug";
      };
      if (v instanceof Perf) {
          return "perf";
      };
      throw new Error("Failed pattern match at PscIde.Server (line 50, column 12 - line 54, column 17): " + [ v.constructor.name ]);
  };
  var startServer = function (v) {
      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Node_ChildProcess.spawn(v.exe)(Data_Semigroup.append(Data_Semigroup.semigroupArray)((function () {
          if (v.combinedExe) {
              return [ "ide", "server" ];
          };
          return [  ];
      })())(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Maybe.maybe([  ])(function (p) {
          return [ "-p", Data_Show.show(Data_Show.showInt)(p) ];
      })(v.port))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Maybe.maybe([  ])(function (d) {
          return [ "-d", d ];
      })(v.directory))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Maybe.maybe([  ])(function (od) {
          return [ "--output-directory", od ];
      })(v.outputDirectory))(Data_Semigroup.append(Data_Semigroup.semigroupArray)((function () {
          if (v.watch) {
              return [  ];
          };
          return [ "--no-watch" ];
      })())(Data_Semigroup.append(Data_Semigroup.semigroupArray)((function () {
          if (v.debug) {
              return [ "--debug" ];
          };
          return [  ];
      })())(Data_Semigroup.append(Data_Semigroup.semigroupArray)((function () {
          if (v.polling) {
              return [ "--polling" ];
          };
          return [  ];
      })())(Data_Semigroup.append(Data_Semigroup.semigroupArray)((function () {
          if (v.editorMode) {
              return [ "--editor-mode" ];
          };
          return [  ];
      })())(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Maybe.maybe([  ])(function (l) {
          return [ "--log-level", logParam(l) ];
      })(v.logLevel))(v.source))))))))))({
          cwd: v.cwd,
          stdio: v.stdio,
          env: Node_ChildProcess.defaultSpawnOptions.env,
          detached: Node_ChildProcess.defaultSpawnOptions.detached,
          uid: Node_ChildProcess.defaultSpawnOptions.uid,
          gid: Node_ChildProcess.defaultSpawnOptions.gid
      })))(function (v1) {
          var handleErr = Effect_Aff.makeAff(function (cb) {
              return Data_Functor.voidRight(Effect.functorEffect)(Effect_Aff.nonCanceler)(function __do() {
                  Node_ChildProcess.onError(v1)(function (v2) {
                      return cb(Data_Either.Right.create(StartError.create("psc-ide-server error:" + ("{ code: " + (v2.code + (", errno: " + (v2.errno + (", syscall: " + (v2.syscall + " }")))))))));
                  })();
                  return Node_ChildProcess.onClose(v1)(function (exit) {
                      if (exit instanceof Node_ChildProcess.Normally && exit.value0 === 0) {
                          return cb(new Data_Either.Right(Closed.value));
                      };
                      if (exit instanceof Node_ChildProcess.Normally) {
                          return cb(Data_Either.Right.create(StartError.create("Error code returned: " + Data_Show.show(Data_Show.showInt)(exit.value0))));
                      };
                      return cb(Data_Either.Right.create(new StartError("Other close error")));
                  })();
              });
          });
          return Control_Parallel_Class.sequential(Effect_Aff.parallelAff)(Control_Alt.alt(Effect_Aff.altParAff)(Control_Parallel_Class.parallel(Effect_Aff.parallelAff)(handleErr))(Control_Parallel_Class.parallel(Effect_Aff.parallelAff)(Data_Functor.voidLeft(Effect_Aff.functorAff)(Effect_Aff.delay(100.0))(new Started(v1)))));
      });
  };
  var getSavedPort = function (cwd) {
      return function __do() {
          var v = Effect_Exception.catchException(function (v) {
              return Control_Applicative.pure(Effect.applicativeEffect)(Data_Maybe.Nothing.value);
          })(Data_Functor.map(Effect.functorEffect)(Data_Maybe.Just.create)(Node_FS_Sync.readTextFile(Node_Encoding.UTF8.value)(portFilePath(cwd))))();
          return Data_Maybe.maybe(Data_Maybe.Nothing.value)((function () {
              var $49 = Global.readInt(10);
              return function ($50) {
                  return Data_Int.fromNumber($49($50));
              };
          })())(v);
      };
  }; 
  var deleteSavedPort = function (cwd) {
      return Node_FS_Sync.unlink(portFilePath(cwd));
  };
  var defaultServerArgs = {
      exe: "purs",
      combinedExe: true,
      cwd: Data_Maybe.Nothing.value,
      stdio: Node_ChildProcess.pipe,
      source: [  ],
      port: Data_Maybe.Nothing.value,
      directory: Data_Maybe.Nothing.value,
      outputDirectory: Data_Maybe.Nothing.value,
      watch: true,
      debug: false,
      polling: false,
      editorMode: false,
      logLevel: Data_Maybe.Nothing.value
  };
  exports["Started"] = Started;
  exports["Closed"] = Closed;
  exports["StartError"] = StartError;
  exports["All"] = All;
  exports["None"] = None;
  exports["Debug"] = Debug;
  exports["Perf"] = Perf;
  exports["logParam"] = logParam;
  exports["defaultServerArgs"] = defaultServerArgs;
  exports["startServer"] = startServer;
  exports["portFilePath"] = portFilePath;
  exports["savePort"] = savePort;
  exports["deleteSavedPort"] = deleteSavedPort;
  exports["getSavedPort"] = getSavedPort;
  exports["pickFreshPort"] = pickFreshPort;
  exports["stopServer"] = stopServer;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Pscid.Server"] = $PS["Pscid.Server"] || {};
  var exports = $PS["Pscid.Server"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Show = $PS["Data.Show"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Console = $PS["Effect.Console"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Node_Process = $PS["Node.Process"];
  var PscIde = $PS["PscIde"];
  var PscIde_Server = $PS["PscIde.Server"];                
  var stopServer$prime = function (port) {
      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(function __do() {
          var $29 = Node_Process.cwd();
          return Effect_Exception["try"](PscIde_Server.deleteSavedPort($29))();
      }))(function (v) {
          return PscIde_Server.stopServer(port);
      });
  };
  var startServer$prime = function (optPort) {
      return function (outputDir) {
          var launchServer = function (dir) {
              var r = function (v) {
                  return function (v1) {
                      if (v1 instanceof PscIde_Server.Started) {
                          return new Data_Either.Right(v);
                      };
                      if (v1 instanceof PscIde_Server.Closed) {
                          return new Data_Either.Left("Closed");
                      };
                      if (v1 instanceof PscIde_Server.StartError) {
                          return new Data_Either.Left(v1.value0);
                      };
                      throw new Error("Failed pattern match at Pscid.Server (line 60, column 7 - line 60, column 47): " + [ v.constructor.name, v1.constructor.name ]);
                  };
              };
              return Control_Bind.bind(Effect_Aff.bindAff)(Data_Maybe.maybe(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(PscIde_Server.pickFreshPort))(Control_Applicative.pure(Effect_Aff.applicativeAff))(optPort))(function (v) {
                  return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Exception["try"](PscIde_Server.savePort(v)(dir))))(function (v1) {
                      return Data_Functor.map(Effect_Aff.functorAff)(r(v))(PscIde_Server.startServer({
                          exe: PscIde_Server.defaultServerArgs.exe,
                          combinedExe: PscIde_Server.defaultServerArgs.combinedExe,
                          cwd: new Data_Maybe.Just(dir),
                          stdio: PscIde_Server.defaultServerArgs.stdio,
                          source: PscIde_Server.defaultServerArgs.source,
                          port: new Data_Maybe.Just(v),
                          directory: PscIde_Server.defaultServerArgs.directory,
                          outputDirectory: new Data_Maybe.Just(outputDir),
                          watch: PscIde_Server.defaultServerArgs.watch,
                          debug: PscIde_Server.defaultServerArgs.debug,
                          polling: PscIde_Server.defaultServerArgs.polling,
                          editorMode: PscIde_Server.defaultServerArgs.editorMode,
                          logLevel: PscIde_Server.defaultServerArgs.logLevel
                      }));
                  });
              });
          };
          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Node_Process.cwd))(function (v) {
              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(PscIde_Server.getSavedPort(v)))(function (v1) {
                  var v2 = Control_Alt.alt(Data_Maybe.altMaybe)(optPort)(v1);
                  if (v2 instanceof Data_Maybe.Just) {
                      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Aff.attempt(PscIde.cwd(v2.value0)))(function (v3) {
                          if (v3 instanceof Data_Either.Right && (v3.value0 instanceof Data_Either.Right && v === v3.value0.value0)) {
                              return Control_Applicative.pure(Effect_Aff.applicativeAff)(new Data_Either.Right(v2.value0));
                          };
                          return launchServer(v);
                      });
                  };
                  if (v2 instanceof Data_Maybe.Nothing) {
                      return launchServer(v);
                  };
                  throw new Error("Failed pattern match at Pscid.Server (line 35, column 3 - line 44, column 31): " + [ v2.constructor.name ]);
              });
          });
      };
  };
  var restartServer = function (port) {
      return function (outputDir) {
          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Aff.attempt(PscIde_Server.stopServer(port)))(function (v) {
              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Aff.attempt(startServer$prime(new Data_Maybe.Just(port))(outputDir)))(function (v1) {
                  return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)((function () {
                      if (v1 instanceof Data_Either.Left) {
                          return function __do() {
                              Effect_Console.log("Failed to restart psc-ide-server on port: " + (Data_Show.show(Data_Show.showInt)(port) + ("\x0aThe error was: " + Data_Show.show(Effect_Exception.showError)(v1.value0))))();
                              return Node_Process.exit(1)();
                          };
                      };
                      if (v1 instanceof Data_Either.Right) {
                          return Effect_Console.log("I restarted psc-ide-server for you.");
                      };
                      throw new Error("Failed pattern match at Pscid.Server (line 68, column 14 - line 73, column 64): " + [ v1.constructor.name ]);
                  })());
              });
          });
      };
  };
  exports["restartServer"] = restartServer;
  exports["startServer'"] = startServer$prime;
  exports["stopServer'"] = stopServer$prime;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Pscid.Util"] = $PS["Pscid.Util"] || {};
  var exports = $PS["Pscid.Util"];
  var Data_Either = $PS["Data.Either"];                
  var both = function (f) {
      return function (e) {
          if (e instanceof Data_Either.Right) {
              return new Data_Either.Right(f(e.value0));
          };
          if (e instanceof Data_Either.Left) {
              return new Data_Either.Left(f(e.value0));
          };
          throw new Error("Failed pattern match at Pscid.Util (line 10, column 12 - line 12, column 22): " + [ e.constructor.name ]);
      };
  };
  exports["both"] = both;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Suggest"] = $PS["Suggest"] || {};
  var exports = $PS["Suggest"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Array = $PS["Data.Array"];
  var Data_Array_NonEmpty = $PS["Data.Array.NonEmpty"];
  var Data_Either = $PS["Data.Either"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_CodePoints = $PS["Data.String.CodePoints"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_String_Regex = $PS["Data.String.Regex"];
  var Data_String_Regex_Flags = $PS["Data.String.Regex.Flags"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Console = $PS["Effect.Console"];
  var Effect_Ref = $PS["Effect.Ref"];
  var Node_Encoding = $PS["Node.Encoding"];
  var Node_FS_Sync = $PS["Node.FS.Sync"];
  var Psa_Output = $PS["Psa.Output"];
  var Psa_Types = $PS["Psa.Types"];                
  var withNewlines = Data_List.concatMap(function (x) {
      return new Data_List_Types.Cons(x, new Data_List_Types.Cons("\x0a", Data_List_Types.Nil.value));
  });
  var replaceFile$prime = function (v) {
      return function (v1) {
          return function (v2) {
              return function (v3) {
                  if (v3 instanceof Data_List_Types.Cons && (v < v3.value0.position.startLine && Data_List.length(v2) >= (v3.value0.position.startLine - v | 0))) {
                      var count = v3.value0.position.startLine - v | 0;
                      return Data_Functor.map(Data_Either.functorEither)(function (v4) {
                          return Data_Semigroup.append(Data_List_Types.semigroupList)(withNewlines(Data_List.take(count)(v2)))(v4);
                      })(replaceFile$prime(v3.value0.position.startLine)(1)(Data_List.drop(count)(v2))(v3));
                  };
                  if (v3 instanceof Data_List_Types.Cons && v === v3.value0.position.startLine) {
                      var trailingNewline = Data_Either.either(Data_Function["const"](true))(function (regex) {
                          return Data_String_Regex.test(regex)(v3.value0.replacement);
                      })(Data_String_Regex.regex("\x0a\\s+$")(Data_String_Regex_Flags.noFlags));
                      var replace = function (regex) {
                          return function (s) {
                              return function (text) {
                                  return Data_Either.either(Data_Function["const"](text))(function (regex$prime) {
                                      return Data_String_Regex.replace(regex$prime)(s)(text);
                                  })(Data_String_Regex.regex(regex)(Data_String_Regex_Flags.global));
                              };
                          };
                      };
                      var tweak = (function () {
                          var $79 = replace("\\s+\\n")("\x0a");
                          var $80 = replace("\\n(.)")("\x0a" + (Data_Foldable.fold(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(Data_Array.replicate(v3.value0.position.startColumn - 1 | 0)(" ")) + "$1"));
                          return function ($81) {
                              return Data_String_Common.trim($79($80($81)));
                          };
                      })();
                      var remainingLines = Data_List.drop((v3.value0.position.endLine - v3.value0.position.startLine | 0) + 1 | 0)(v2);
                      var initial = Data_String_CodePoints.take(v3.value0.position.startColumn - v1 | 0)(Data_Maybe.fromMaybe("")(Data_List.head(v2)));
                      var $$final = Data_String_CodePoints.drop(v3.value0.position.endColumn - (function () {
                          var $26 = v3.value0.position.startLine === v3.value0.position.endLine;
                          if ($26) {
                              return v1;
                          };
                          return 1;
                      })() | 0)(Data_Maybe.fromMaybe("")(Data_List.index(v2)(v3.value0.position.endLine - v3.value0.position.startLine | 0)));
                      var addNewline = trailingNewline && !Data_String_Common["null"]($$final);
                      var newText = initial + (tweak(v3.value0.replacement) + (function () {
                          if (addNewline) {
                              return "\x0a";
                          };
                          return "";
                      })());
                      var replaceNewText = (function () {
                          if (newText === "") {
                              return Control_Category.identity(Control_Category.categoryFn);
                          };
                          return Data_List_Types.Cons.create(newText);
                      })();
                      var $29 = $$final === "" && newText === "";
                      if ($29) {
                          return Data_Functor.map(Data_Either.functorEither)(replaceNewText)(replaceFile$prime(v3.value0.position.endLine + 1 | 0)(1)(remainingLines)(v3.value1));
                      };
                      return Data_Functor.map(Data_Either.functorEither)(replaceNewText)(replaceFile$prime(v3.value0.position.endLine)(v3.value0.position.endColumn)(new Data_List_Types.Cons($$final, remainingLines))(v3.value1));
                  };
                  if (v3 instanceof Data_List_Types.Cons && v > v3.value0.position.startLine) {
                      return Data_Either.Left.create("Found replacement starting before current position: " + (Data_Show.show(Data_Show.showInt)(v3.value0.position.startLine) + (", " + Data_Show.show(Data_Show.showInt)(v))));
                  };
                  if (v3 instanceof Data_List_Types.Nil) {
                      return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Foldable.intercalate(Data_List_Types.foldableList)(Data_List_Types.monoidList)(new Data_List_Types.Cons("\x0a", Data_List_Types.Nil.value))(Data_Functor.map(Data_List_Types.functorList)(Data_List.singleton)(v2)));
                  };
                  return new Data_Either.Left("Found replacement after end of file");
              };
          };
      };
  };
  var replaceFile = function (lines) {
      return function (filename) {
          return function (group) {
              var v = replaceFile$prime(1)(1)(Data_List.fromFoldable(Data_Foldable.foldableArray)(lines))(Data_List.fromFoldable(Data_Foldable.foldableArray)(group));
              if (v instanceof Data_Either.Left) {
                  return Effect_Console.error(v.value0);
              };
              if (v instanceof Data_Either.Right) {
                  return function __do() {
                      Node_FS_Sync.writeTextFile(Node_Encoding.UTF8.value)(filename)(Data_Foldable.intercalate(Data_List_Types.foldableList)(Data_Monoid.monoidString)("")(v.value0))();
                      return Effect_Console.log(filename + (": Applied " + (Data_Show.show(Data_Show.showInt)(Data_Array.length(group)) + " fixes")))();
                  };
              };
              throw new Error("Failed pattern match at Suggest (line 96, column 3 - line 100, column 78): " + [ v.constructor.name ]);
          };
      };
  };
  var getSuggestions = function (warnings) {
      var loadLines = function (files) {
          return function (filename) {
              return function (pos) {
                  return function __do() {
                      var v = (function __do() {
                          var cache = Effect_Ref.read(files)();
                          var v = Data_Map_Internal.lookup(Data_Ord.ordString)(filename)(cache);
                          if (v instanceof Data_Maybe.Just) {
                              return v.value0;
                          };
                          if (v instanceof Data_Maybe.Nothing) {
                              var v1 = Data_Functor.map(Effect.functorEffect)(Data_String_Common.split("\x0a"))(Node_FS_Sync.readTextFile(Node_Encoding.UTF8.value)(filename))();
                              Effect_Ref.modify_(Data_Map_Internal.insert(Data_Ord.ordString)(filename)(v1))(files)();
                              return v1;
                          };
                          throw new Error("Failed pattern match at Suggest (line 47, column 9 - line 52, column 23): " + [ v.constructor.name ]);
                      })();
                      var source = Data_Array.slice(pos.startLine - 1 | 0)(pos.endLine)(v);
                      return new Data_Maybe.Just(source);
                  };
              };
          };
      };
      var getReplacement = function (v) {
          if (v.source instanceof Data_Maybe.Just && (v.error.suggestion instanceof Data_Maybe.Just && (v.error.filename instanceof Data_Maybe.Just && v.position instanceof Data_Maybe.Just))) {
              return new Data_Maybe.Just({
                  filename: v.error.filename.value0,
                  position: Data_Maybe.fromMaybe(v.position.value0)(v.error.suggestion.value0.replaceRange),
                  original: Data_String_Common.joinWith("\x0a")(v.source.value0),
                  replacement: v.error.suggestion.value0.replacement
              });
          };
          return Data_Maybe.Nothing.value;
      };
      var annotateError = function (loadLinesF) {
          return function (error) {
              return function __do() {
                  var v = Data_Maybe.fromMaybe(Control_Applicative.pure(Effect.applicativeEffect)(Data_Maybe.Nothing.value))(Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(loadLinesF)(error.filename))(error.position))();
                  return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(Psa_Output.annotatedError)(Data_Functor.map(Data_Maybe.functorMaybe)(Psa_Types.Src.create)(error.filename)))(Control_Applicative.pure(Data_Maybe.applicativeMaybe)(v)))(Control_Applicative.pure(Data_Maybe.applicativeMaybe)(error));
              };
          };
      };
      return function __do() {
          var v = Effect_Ref["new"](Data_Map_Internal.empty)();
          var loadLinesImpl = loadLines(v);
          var v1 = Data_Functor.map(Effect.functorEffect)(Data_Functor.map(Data_Functor.functorFn)(Data_Array.sortBy(Psa_Types.compareByLocation))(Data_Array.catMaybes))(Data_Traversable.traverse(Data_Traversable.traversableArray)(Effect.applicativeEffect)(annotateError(loadLinesImpl))(warnings))();
          var replacements = Data_Array.mapMaybe(getReplacement)(v1);
          return {
              replacements: Data_Functor.map(Data_Functor.functorArray)(Data_Array_NonEmpty.toArray)(Data_Array.groupBy(function (a) {
                  return function (b) {
                      return a.filename === b.filename;
                  };
              })(replacements)),
              files: v
          };
      };
  };
  var applySuggestions = function (warnings) {
      return function __do() {
          var v = getSuggestions(warnings)();
          return Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableArray)(v.replacements)(function (group) {
              var v1 = Data_Array.head(group);
              if (v1 instanceof Data_Maybe.Just) {
                  return function __do() {
                      Effect_Console.log("Processing " + v1.value0.filename)();
                      var res = Effect_Ref.read(v.files)();
                      var v2 = Data_Map_Internal.lookup(Data_Ord.ordString)(v1.value0.filename)(res);
                      if (v2 instanceof Data_Maybe.Just) {
                          return replaceFile(v2.value0)(v1.value0.filename)(group)();
                      };
                      return Data_Unit.unit;
                  };
              };
              if (v1 instanceof Data_Maybe.Nothing) {
                  return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at Suggest (line 74, column 5 - line 80, column 27): " + [ v1.constructor.name ]);
          })();
      };
  };
  exports["getSuggestions"] = getSuggestions;
  exports["applySuggestions"] = applySuggestions;
  exports["replaceFile"] = replaceFile;
  exports["withNewlines"] = withNewlines;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Type.Equality"] = $PS["Type.Equality"] || {};
  var exports = $PS["Type.Equality"];
  var TypeEquals = function (from, to) {
      this.from = from;
      this.to = to;
  };
  var to = function (dict) {
      return dict.to;
  };
  var refl = new TypeEquals(function (a) {
      return a;
  }, function (a) {
      return a;
  });
  var from = function (dict) {
      return dict.from;
  };
  exports["TypeEquals"] = TypeEquals;
  exports["to"] = to;
  exports["from"] = from;
  exports["refl"] = refl;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Main"] = $PS["Main"] || {};
  var exports = $PS["Main"];
  var $foreign = $PS["Main"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Reader_Class = $PS["Control.Monad.Reader.Class"];
  var Control_Monad_Reader_Trans = $PS["Control.Monad.Reader.Trans"];
  var Data_Argonaut_Decode_Class = $PS["Data.Argonaut.Decode.Class"];
  var Data_Array = $PS["Data.Array"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_CodePoints = $PS["Data.String.CodePoints"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Class_Console = $PS["Effect.Class.Console"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Effect_Ref = $PS["Effect.Ref"];
  var Node_Process = $PS["Node.Process"];
  var PscIde = $PS["PscIde"];
  var PscIde_Command = $PS["PscIde.Command"];
  var Pscid_Console = $PS["Pscid.Console"];
  var Pscid_Error = $PS["Pscid.Error"];
  var Pscid_Keypress = $PS["Pscid.Keypress"];
  var Pscid_Options = $PS["Pscid.Options"];
  var Pscid_Process = $PS["Pscid.Process"];
  var Pscid_Psa = $PS["Pscid.Psa"];
  var Pscid_Server = $PS["Pscid.Server"];
  var Pscid_Util = $PS["Pscid.Util"];
  var Suggest = $PS["Suggest"];
  var Type_Equality = $PS["Type.Equality"];                
  var State = function (x) {
      return x;
  };
  var Pscid = function (x) {
      return x;
  };
  var runPscid = function (v) {
      return function (e) {
          return Control_Monad_Reader_Trans.runReaderT(v)(e);
      };
  };
  var monadPscid = Control_Monad_Reader_Trans.monadReaderT(Effect.monadEffect);
  var monadEffectPscid = new Effect_Class.MonadEffect(function () {
      return monadPscid;
  }, (function () {
      var $85 = Effect_Class.liftEffect(Control_Monad_Reader_Trans.monadEffectReader(Effect_Class.monadEffectEffect));
      return function ($86) {
          return Pscid($85($86));
      };
  })());
  var monadAskPscid = function (dictTypeEquals) {
      return new Control_Monad_Reader_Class.MonadAsk(function () {
          return monadPscid;
      }, Data_Functor.map(Control_Monad_Reader_Trans.functorReaderT(Effect.functorEffect))(Type_Equality.from(dictTypeEquals))(Control_Monad_Reader_Class.ask(Control_Monad_Reader_Trans.monadAskReaderT(Effect.monadEffect))));
  };
  var handleRebuildResult = function (file) {
      return function (censorCodes) {
          return function (result) {
              return function __do() {
                  Pscid_Console.clearConsole();
                  Effect_Class_Console.log(Effect_Class.monadEffectEffect)("Checking " + file)();
                  var v = Pscid_Util.both(Pscid_Psa.parseErrors)(result);
                  if (v instanceof Data_Either.Right) {
                      return Data_Either.either(function (v1) {
                          return Data_Functor.voidLeft(Effect.functorEffect)(Effect_Class_Console.log(Effect_Class.monadEffectEffect)("Failed to parse warnings"))([  ]);
                      })(function (e) {
                          return Data_Functor.voidLeft(Effect.functorEffect)(Pscid_Psa.psaPrinter(Pscid_Console.owl)(false)(e))(e);
                      })(Data_Functor.map(Data_Either.functorEither)(Pscid_Psa.filterWarnings(censorCodes))(v.value0))();
                  };
                  if (v instanceof Data_Either.Left) {
                      return Data_Either.either(function (v1) {
                          return Data_Functor.voidLeft(Effect.functorEffect)(Effect_Class_Console.log(Effect_Class.monadEffectEffect)("Failed to parse errors"))([  ]);
                      })(function (e) {
                          return Data_Functor.voidLeft(Effect.functorEffect)(Pscid_Psa.psaPrinter(Pscid_Console.owl)(true)(e))(e);
                      })(v.value0)();
                  };
                  throw new Error("Failed pattern match at Main (line 157, column 3 - line 167, column 15): " + [ v.constructor.name ]);
              };
          };
      };
  };
  var functorPscid = Control_Monad_Reader_Trans.functorReaderT(Effect.functorEffect);
  var fileGlob = function (dir) {
      var go = function (x) {
          return dir + ("/**/*" + x);
      };
      return Data_Functor.map(Data_Functor.functorArray)(go)([ ".purs", ".js" ]);
  };
  var emptyState = {
      errors: [  ]
  };
  var changeExtension = function (s) {
      return function (ex) {
          var v = Data_String_CodePoints.lastIndexOf(".")(s);
          if (v instanceof Data_Maybe.Nothing) {
              return s;
          };
          if (v instanceof Data_Maybe.Just) {
              return Data_String_CodePoints.take(v.value0)(s) + ("." + ex);
          };
          throw new Error("Failed pattern match at Main (line 143, column 3 - line 147, column 36): " + [ v.constructor.name ]);
      };
  };
  var bindPscid = Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect);
  var keyHandler = function (stateRef) {
      return function (k) {
          var exit = Data_Function["const"](Node_Process.exit(0));
          return Control_Bind.bind(bindPscid)(Control_Monad_Reader_Class.ask(monadAskPscid(Type_Equality.refl)))(function (v) {
              if (!k.ctrl && (k.name === "b" && !k.meta)) {
                  return Effect_Class.liftEffect(monadEffectPscid)(Pscid_Process.execCommand("Build")(Pscid_Options.printCLICommand(v.buildCommand)));
              };
              if (!k.ctrl && (k.name === "t" && !k.meta)) {
                  return Effect_Class.liftEffect(monadEffectPscid)(Pscid_Process.execCommand("Test")(Pscid_Options.printCLICommand(v.testCommand)));
              };
              if (!k.ctrl && (k.name === "r" && !k.meta)) {
                  return Effect_Class.liftEffect(monadEffectPscid)(function __do() {
                      Pscid_Console.clearConsole();
                      Pscid_Error.catchLog("Failed to restart server")(Effect_Aff.launchAff_(Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Pscid_Server.restartServer(v.port)(v.outputDirectory))(function () {
                          return PscIde.load(v.port)([  ])([  ]);
                      })))();
                      return Effect_Class_Console.log(Effect_Class.monadEffectEffect)(Pscid_Console.owl)();
                  });
              };
              if (!k.ctrl && (k.name === "s" && !k.meta)) {
                  return Effect_Class.liftEffect(monadEffectPscid)(function __do() {
                      var v1 = Effect_Ref.read(stateRef)();
                      var v2 = Data_Array.head(v1.errors);
                      if (v2 instanceof Data_Maybe.Nothing) {
                          return Effect_Class_Console.log(Effect_Class.monadEffectEffect)("No suggestions available")();
                      };
                      if (v2 instanceof Data_Maybe.Just) {
                          return Pscid_Error.catchLog("Couldn't apply suggestion.")(Suggest.applySuggestions([ v2.value0 ]))();
                      };
                      throw new Error("Failed pattern match at Main (line 109, column 7 - line 113, column 71): " + [ v2.constructor.name ]);
                  });
              };
              if (!k.ctrl && (k.name === "q" && !k.meta)) {
                  return Effect_Class.liftEffect(monadEffectPscid)(Control_Apply.applyFirst(Effect.applyEffect)(Effect_Class_Console.log(Effect_Class.monadEffectEffect)("Bye!"))(Effect_Aff.runAff(Data_Either.either(exit)(exit))(Pscid_Server["stopServer'"](v.port))));
              };
              if (k.ctrl && (k.name === "c" && !k.meta)) {
                  return Effect_Class_Console.log(monadEffectPscid)("Press q to exit");
              };
              return Effect_Class_Console.log(monadEffectPscid)(k.name);
          });
      };
  };
  var triggerRebuild = function (stateRef) {
      return function (file) {
          return Control_Bind.bind(bindPscid)(Control_Monad_Reader_Class.ask(monadAskPscid(Type_Equality.refl)))(function (v) {
              var fileName = changeExtension(file)("purs");
              return Effect_Class.liftEffect(monadEffectPscid)(Pscid_Error.catchLog("We couldn't talk to the server")(Effect_Aff.launchAff_(Control_Bind.bind(Effect_Aff.bindAff)(PscIde.sendCommandR(PscIde_Command.encodeCommand)(Data_Argonaut_Decode_Class.decodeJsonJson)(Data_Argonaut_Decode_Class.decodeJsonJson)(v.port)(new PscIde_Command.RebuildCmd(fileName, Data_Maybe.Nothing.value, Data_Maybe.Nothing.value)))(function (v1) {
                  if (v1 instanceof Data_Either.Left) {
                      return Effect_Class_Console.log(Effect_Aff.monadEffectAff)("We couldn't talk to the server");
                  };
                  if (v1 instanceof Data_Either.Right) {
                      return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(function __do() {
                          var v2 = handleRebuildResult(fileName)(v.censorCodes)(v1.value0)();
                          Effect_Ref.write({
                              errors: v2
                          })(stateRef)();
                          (function () {
                              var v3 = Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.head(v2))(function (v4) {
                                  return v4.suggestion;
                              });
                              if (v3 instanceof Data_Maybe.Nothing) {
                                  return Data_Unit.unit;
                              };
                              if (v3 instanceof Data_Maybe.Just) {
                                  return Pscid_Console.suggestionHint();
                              };
                              throw new Error("Failed pattern match at Main (line 135, column 9 - line 137, column 34): " + [ v3.constructor.name ]);
                          })();
                          return Control_Applicative.when(Effect.applicativeEffect)(v.testAfterRebuild && Data_Either.isRight(v1.value0))(Pscid_Process.execCommand("Test")(Pscid_Options.printCLICommand(v.testCommand)))();
                      });
                  };
                  throw new Error("Failed pattern match at Main (line 130, column 5 - line 139, column 61): " + [ v1.constructor.name ]);
              }))));
          });
      };
  };
  var main = Effect_Aff.launchAff_(Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Pscid_Options.optionParser))(function (v) {
      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Control_Applicative.when(Effect_Aff.applicativeAff)(Data_Array["null"](v.sourceDirectories))(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Pscid_Error.noSourceDirectoryError)))(function () {
          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref["new"](emptyState)))(function (v1) {
              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class_Console.log(Effect_Aff.monadEffectAff)("Starting purs ide server"))(function () {
                  return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Aff.attempt(Pscid_Server["startServer'"](v.port)(v.outputDirectory)))(function (v2) {
                      if (v2 instanceof Data_Either.Right && v2.value0 instanceof Data_Either.Right) {
                          var config$prime = {
                              port: v2.value0.value0,
                              buildCommand: v.buildCommand,
                              censorCodes: v.censorCodes,
                              outputDirectory: v.outputDirectory,
                              sourceDirectories: v.sourceDirectories,
                              testAfterRebuild: v.testAfterRebuild,
                              testCommand: v.testCommand
                          };
                          return Control_Bind.bind(Effect_Aff.bindAff)(Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Aff.delay(500.0))(function () {
                              return Control_Bind.bind(Effect_Aff.bindAff)(PscIde.load(v2.value0.value0)([  ])([  ]))(function (v3) {
                                  return Control_Bind.bind(Effect_Aff.bindAff)(PscIde.cwd(v2.value0.value0))(function (v4) {
                                      if (v4 instanceof Data_Either.Right) {
                                          return Control_Applicative.pure(Effect_Aff.applicativeAff)(v4.value0);
                                      };
                                      if (v4 instanceof Data_Either.Left) {
                                          return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(function __do() {
                                              Effect_Class_Console.log(Effect_Class.monadEffectEffect)(v4.value0)();
                                              return Node_Process.exit(1)();
                                          });
                                      };
                                      throw new Error("Failed pattern match at Main (line 67, column 9 - line 71, column 27): " + [ v4.constructor.name ]);
                                  });
                              });
                          }))(function (v3) {
                              return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(function __do() {
                                  $foreign.gaze(Data_Array.concatMap(fileGlob)(v.sourceDirectories), function (d) {
                                      return runPscid(triggerRebuild(v1)(d))(config$prime);
                                  });
                                  Pscid_Console.clearConsole();
                                  Pscid_Keypress.initializeKeypresses();
                                  Pscid_Keypress.onKeypress(function (k) {
                                      return runPscid(keyHandler(v1)(k))(config$prime);
                                  })();
                                  Effect_Class_Console.log(Effect_Class.monadEffectEffect)("Watching " + (v3 + (" on port " + Data_Show.show(Data_Show.showInt)(v2.value0.value0))))();
                                  return Pscid_Console.startScreen();
                              });
                          });
                      };
                      if (v2 instanceof Data_Either.Right && v2.value0 instanceof Data_Either.Left) {
                          return Effect_Class_Console.log(Effect_Aff.monadEffectAff)("Failed to start psc-ide-server with: " + v2.value0.value0);
                      };
                      if (v2 instanceof Data_Either.Left) {
                          return Effect_Class_Console.log(Effect_Aff.monadEffectAff)("Failed to start psc-ide-server with : " + Data_Show.show(Effect_Exception.showError)(v2.value0));
                      };
                      throw new Error("Failed pattern match at Main (line 60, column 3 - line 84, column 73): " + [ v2.constructor.name ]);
                  });
              });
          });
      });
  }));
  var applyPscid = Control_Monad_Reader_Trans.applyReaderT(Effect.applyEffect);
  var applicativePscid = Control_Monad_Reader_Trans.applicativeReaderT(Effect.applicativeEffect);
  exports["Pscid"] = Pscid;
  exports["runPscid"] = runPscid;
  exports["State"] = State;
  exports["emptyState"] = emptyState;
  exports["main"] = main;
  exports["fileGlob"] = fileGlob;
  exports["keyHandler"] = keyHandler;
  exports["triggerRebuild"] = triggerRebuild;
  exports["changeExtension"] = changeExtension;
  exports["handleRebuildResult"] = handleRebuildResult;
  exports["functorPscid"] = functorPscid;
  exports["applyPscid"] = applyPscid;
  exports["applicativePscid"] = applicativePscid;
  exports["bindPscid"] = bindPscid;
  exports["monadPscid"] = monadPscid;
  exports["monadAskPscid"] = monadAskPscid;
  exports["monadEffectPscid"] = monadEffectPscid;
  exports["gaze"] = $foreign.gaze;
})(PS);
PS["Main"].main();